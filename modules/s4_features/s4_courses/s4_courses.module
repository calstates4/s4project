<?php
/**
 * @file
 * Code for the S4 Courses feature.
 */

include_once('s4_courses.features.inc');

/**
*  Implementation of s4_core_field_access
*/
function s4_courses_s4_field_access() {

  return array('course' => array(
            'field_course_students',
            'field_course_faculty',
            'field_site_restrict',
            'field_sites',
            'field_term',
            'field_site_restrict_to_list',
            'field_course_subject',
            'field_course_title',
            'field_course_catalog_number',
            'field_course_section',
            'field_course_signups',
        ),
        'course_term' => array(
            'field_term_code',
            'field_term_date_start',
            'field_term_filter',
        ),

  );
}

/**
*  Returns all terms that cover the current time.
*  This is primarily used when making API calls to see what
*  courses are available generally or for a user.
*/
function _s4_courses_get_current_terms() {
  if ($cache = cache_get('s4_core_current_terms', FALSE)) {
    return $cache->data;
  }
  $terms = db_query('SELECT entity_id FROM {field_data_field_term_date_start} WHERE
             field_term_date_start_value <= NOW()
             AND field_term_date_start_value2 >= NOW()
             ORDER BY field_term_date_start_value');
  $term_results = array();
  foreach ($terms as $term) {
    $term = node_load($term->entity_id);
    $term_code = field_get_items('node', $term, 'field_term_code');
    $term_results[$term_code[0]['value']] = $term_code[0]['value'];
  }
  cache_set('s4_core_current_terms', $term_results, 'cache', time() + (4 * 60 * 60));
  return $term_results;
}


/**
* Implements hook_s4_user_status
*/
function s4_courses_s4_user_status(&$status) {
  if (isset($_SESSION['s4_signup_program']) && !isset($_SESSION['s4_signup_course'])) {
    return;
  }
  if (isset($_SESSION['s4_signup_course'])) {
    $course = node_load($_SESSION['s4_signup_course']);
  }
  if (isset($course)) {
    $selection = '<div class="selection">' . l($course->title, 'node/' . $course->nid) . '</div>';
  }
  $status = array('course' => array('data' => ($course) ? 'Course' : 'Course or program',
            'id'     => 'status-course',
            'href'  => 'my-courses',
            'class'  => (isset($_SESSION['s4_signup_course'])) ? array('done') : array(),
            'selection' => (isset($selection)) ? $selection : FALSE)) + $status;
}

/**
* Implements hook_s4_signup
*/
function s4_courses_s4_signup($type, $nid) {
  if ($type == 'course') {
    global $user;
    $course = node_load($nid);
    if ($course->type == 'course') {
      $_SESSION['s4_signup_course'] = check_plain($nid);
      drupal_set_message(t('Course @course selected.', array('@course' => $course->title)));
      $programs = field_get_items('node', $course, 'field_site_restrict');
      $program_terms = array();
      foreach($programs as $program) {
        $program = taxonomy_term_load($program['tid']);
        $program_terms[$program->tid] = str_replace(' ', '-', $program->name);
      }
      $_SESSION['s4_signup_program'] = $program_terms;
      $sites = field_get_items('node', $course, 'field_sites');
      if (!$sites || !count($sites)) {
        drupal_goto('site-list/all/'. implode('+', $program_terms));
      }
      else {
        $argument = array();
        foreach ($sites as $site) {
          $argument[] = $site['nid'];
        }
        drupal_goto('site-list/' . implode('+', $argument) . '/'. implode('+', $program_terms));
      }
    }
    else {
      $success = FALSE;
      drupal_set_message(t('That is not a course'), 'error');
    }
  }
}

function s4_courses_form_views_form_course_students_block_alter(&$form, &$form_state) {
  if ($form_state['values']['site']) {
    $site_staff = db_select('field_data_field_site', 's')
            ->fields('s', array('entity_id'))
            ->condition('s.bundle', 'coordinator')
            ->condition('s.field_site_nid', $form_state['values']['site'])
            ->execute()
            ->fetchCol();
    foreach ($site_staff as $staff) {
      $staff = node_load($staff);
      $available = field_get_items('node', $staff, 'field_staff_signup_available');
      if ($available[0]['value']) {
        $role = field_get_items('node', $staff, 'field_staff_role');
        $role = taxonomy_term_load($role[0]['tid']);
        $form['site-staff']['#options'][$staff->nid] = t('@title (@role)', array('@title' => $staff->title,
                                       '@role' => $role->name));
      }
    }
  }
}

function s4_courses_s4_signup_dates($node) {
  $course = node_load($node->field_course[$node->language][0]['nid']);
  if (!$course) {
    return false;
  }
  $course_date = field_get_items('node', $course, 'field_service_end');
  if ($course_date[0]['value'] && strtotime($course_date[0]['value']) > time()) {
    $end_date = array('date' => strtotime($course_date[0]['value']),
           'weight' => 50);
  }
  $term = field_get_items('node', $course, 'field_term');
  $term = node_load($term[0]['nid']);
  if ($term) {
    $term_date = field_get_items('node', $term, 'field_term_date_start');
    $result = array();
    $result['end_date'] = (isset($end_date))
                  ? $end_date
                  : array('date' => strtotime($term_date[0]['value2']), 'weight' => 50);
    $result['start_date'] = array('date' => strtotime($term_date[0]['value']),
           'weight' => 50);
    return $result;
  }
  return false;
}


/**
 * Implements hook_form_alter().
 */
function s4_courses_form_s4_core_admin_form_alter(&$form, $form_state) {
  $message = variable_get('s4_courses_faculty_help', array('value' => t('You can quickly search for a student below, or manage your courses to the right, where you can edit your course settings. To restrict students to a course, visit the !link, click on a site, and click the "Add to course" button.', array('!link' => l('site listing page', 'site-list'))), 'format' => FILTER_FORMAT_DEFAULT));
  $form['s4_courses_faculty_help'] = array(
    '#title' => t('Welcome message for faculty'),
    '#type' => 'text_format',
    '#description' => t('The number of days before a student\'s service ends where an email should be sent.'),
    '#default_value' => $message['value'],
    '#text_format' => $message['format'],
    );
}

/**
* Implements hook_block_info
*/
function s4_courses_block_info() {
  $blocks['s4_courses_add_course'] = array('info' => 'Add new course button');
  $blocks['s4_courses_restriction_form'] = array('info' => 'Edit course site restriction');
  $blocks['s4_courses_faculty_help'] = array('info' => 'Faculty help');
  $blocks['s4_courses_add_site'] = array('info' => 'Add to sites');
  $blocks['s4_courses_add_message'] = array('info' => 'Add to sites message');
  $blocks['s4_couress_add_sites'] = array('info' => 'Course add sites button');
  return $blocks;
}

/**
 * Implements hook_user_logout().
 */
function s4_courses_user_logout($account) {
  unset($_SESSION['s4_courses_add_course_current']);
}

/**
* Implements hook_block_view
*/
function s4_courses_block_view($delta) {
  switch ($delta) {
    case 's4_courses_faculty_help':
      global $user;
      $view = views_get_view('user_courses');
      $view->set_display('block');
      $view->set_arguments(array($user->uid));
      $view->preview();
      if(!count($view->result)) {
        return;
      }
      $message = variable_get('s4_courses_faculty_help', array('value' => t('You can quickly search for a student below, or manage your courses to the right, where you can edit your course settings. To restrict students to a course, visit the !link, click on a site, and click the "Add to course" button.', array('!link' => l('site listing page', 'site-list'))), 'format' => FILTER_FORMAT_DEFAULT));
      return array('subject' => t('Get started'),
                   'content' => check_markup($message['value'], $message['format']));
    case 's4_courses_add_course':
      if (user_access('create course content')) {
        return array('content' => l(t('<i class="icon-plus icon-white"></i> Add new course'),
                  'node/add/course',
                  array('html' => TRUE,
                       'attributes' =>
                      array('class' => 'btn btn-success')
                  )
                  )
          );
      }
      break;
    case 's4_courses_restriction_form':
      $node = menu_get_object();
      global $user;
      if ($node->type != 'course') {
        return null;
      }
      $faculty = array();
      $course_faculty = field_get_items('node', $node, 'field_course_faculty');
    if (is_array($course_faculty)) {
      foreach($course_faculty as $faculty_uid) {
        $faculty[] = $faculty_uid['uid'];
      }
    }
    if (!in_array($user->uid, $faculty) && !node_access('update', $node)) {
      return null;
    }
    return array('subject' => '',
             'content' => drupal_get_form('s4_courses_edit_course_restrict_form'));
      break;
    case 's4_courses_add_site':
      if (!$_SESSION['s4_courses_add_course_current']) {
        return;
      }
      $site = menu_get_object();
      if(!isset($_SESSION['s4_courses_add_course_current']['sites'][$site->nid])) {
        return array('content' => l(t('Add to @course', array('@course' => $_SESSION['s4_courses_add_course_current']['title'])), 'faculty/add-site/'. $_SESSION['s4_courses_add_course_current']['course'] .'/'. $site->nid, array('attributes' => array('class' => array('btn', 'btn-success')))));
      }
      elseif($_SESSION['s4_courses_add_course_current']['sites'][$site->nid]) {
        return array('content' => l(t('Remove from @course', array('@course' => $_SESSION['s4_courses_add_course_current']['title'])), 'faculty/remove-site/'. $_SESSION['s4_courses_add_course_current']['course'] .'/'. $site->nid, array('attributes' => array('class' => array('btn', 'btn-danger')))));
      }
      break;
    case 's4_courses_add_message':
      if (!$_SESSION['s4_courses_add_course_current']) {
        return;
      }
      return array('content' => '<div class="alert alert-info">'. t('You are currently adding sites to %course. !link', array('%course' => $_SESSION['s4_courses_add_course_current']['title'], '!link' => l(t('Return to my courses'), 'faculty/add-sites/done'))) .'</div>');
    case 's4_couress_add_sites';
      $node = menu_get_object();
      if($node->type != 'course' || !node_access('update', $node)) {
        return;
      }
      return array('content' => l('<i class="icon-plus icon-white"></i> '. t('Add sites to this course'), 'faculty/add-sites/' . $node->nid, array('html' => TRUE, 'query' => array('return' => 'node/'. $node->nid), 'attributes' => array('class' => array('btn', 'btn-success')))));
  }
}

function s4_courses_node_access($node, $op, $account) {
  if($node->type != 'signup') {
    return;
  }
  $course = field_get_items('node', $node, 'field_course');
  if(!$course) {
  	return;
  }
  if($course[0]['nid']) {
    $course = node_load($course[0]['nid']);
    $faculty = field_get_items('node', $course, 'field_course_faculty');
    foreach($faculty as $instructor) {
      if($instructor['uid'] == $account->uid && ($op == 'view' || user_access('manage course students', $account))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
}

/**
 * Implements hook_node_presave. We're customizing a course node's title.
 */
function s4_courses_node_presave($node) {
  if($node->type != 'course') {
    return;
  }
  $subject = field_get_items('node', $node, 'field_course_subject');
  $number = field_get_items('node', $node, 'field_course_catalog_number');
  $section = field_get_items('node', $node, 'field_course_section');
  $section = ($section[0]['value']) 
    ? t(' section @section', array('@section' => $section[0]['value'])) 
    : '';
  $node->title = t('@subject @number @section', array('@subject' => $subject[0]['value'],
                                                      '@number' => $number[0]['value'],
                                                      '@section' => $section));
}

/**
 * Implements hook_form_FORM_ID_alter. We're removing the title from course node forms.
 */
function s4_courses_form_course_node_form_alter(&$form, $form_state) {
  $form['title']['#type'] = 'value';
  $form['title']['#required'] = FALSE;
}

function s4_courses_edit_course_restrict_form($form_state) {
  $node = menu_get_object();
  $form = array();

  $default = field_get_items('node', $node, 'field_site_restrict_to_list');
  $default_email = field_get_items('node', $node, 'field_course_faculty_email');
  
  field_attach_form('node', $node, $form, $form_state);
  
  foreach($form as $key => &$field) {
    if(strpos($key, '#') !== 0 && !in_array($key, array('field_course_syllabus', 'field_site_restrict_to_list', 'field_course_faculty_email'))) {
        unset($form[$key]);
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update',
    '#weight' => 40
  );
  return $form;
}

function s4_courses_edit_course_restrict_form_submit($form, $form_state) {
  
  field_attach_submit('node', $form['#entity'], $form, $form_state);
  node_save($form['#entity']);
  drupal_set_message(t('Your course has been updated.'));
}

/**
*  Implementation of hook_signup_post_action
*/
function s4_courses_signup_post_action($node, $context = array()) {
  $node = $context['node'];
  if ($node->type == 'course') {
     s4_courses_node_event('course_signup', $node)->trigger();
  }
}

/**
*  Implementation of hook_action_info
*/
function s4_courses_action_info() {
  return array(
    's4_courses_signup_post_action' => array(
      'type' => 'notifications',
      'label' => t('Send notifications for new signups'),
      'configurable' => FALSE,
      'behavior' => array('sends_notification'),
      'triggers' => array('course_signup'),
    ),
    's4_courses_bulk_signup_students_action' => array(
      'type' => 'system',
      'label' => t('Place students in bulk'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    's4_courses_email_course_faculty' => array(
      'type' => 'system',
      'label' => t('Email faculty in a course'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action to send an email to the faculty in a course.
 */
function s4_courses_email_course_faculty($entity, $context) {
  $faculty = field_get_items('node', $entity, 'field_course_faculty');
  if(!count($faculty)) {
    return;
  }
  $reply_to = (valid_email_address($context['reply_to']))
              ? $context['reply_to']
              : variable_get('site_mail', '');
  $students = db_query('SELECT DISTINCT s.field_course_students_uid as uid FROM {field_data_field_course_students} s LEFT JOIN {node} n ON n.nid = s.entity_id AND n.vid = s.revision_id WHERE s.entity_id = :course AND s.deleted = 0 AND s.field_course_students_uid NOT IN (
	SELECT u.field_user_uid FROM {field_data_field_user} u LEFT JOIN {field_data_field_course} c ON c.entity_id = u.entity_id AND c.revision_id = u.entity_id LEFT JOIN {node} n ON n.nid = u.entity_id AND n.vid = u.revision_id WHERE field_course_nid = :course
);', array(':course' => $entity->nid));
  $student_list = array();
  if($students) {
    while($student = $students->fetchField()) {
      $student = user_load($student);
      $first_name = field_get_items('user', $student, 'field_first_name');
      $last_name  = field_get_items('user', $student, 'field_last_name');
      $student_list[] = $first_name[0]['value'] .' '. $last_name[0]['value'];
    }
  }
  if(count($student_list)) {
    $context['message']['value'] = str_replace('[missing_students]', theme('item_list', array('items' => $student_list)), $context['message']['value']);
    foreach($faculty as $instructor) {
      $instructor = user_load($instructor['uid']);
      drupal_mail('s4_core', 'action_send_email', $instructor->mail, language_default(), $context, $reply_to);
    }
  }
}

function s4_courses_menu() {
  $items = array();

  $items['faculty/add-sites/%node'] = array(
    'page callback' => 's4_courses_add_sites_page',
    'page arguments' => array(2),
    'access callback' => 's4_courses_add_sites_access',
    'access arguments' => array(2),
    );

  $items['faculty/add-sites/done'] = array(
    'page callback' => 's4_courses_add_sites_done', 
    'page arguments' => array(0, 'done'),
    'access arguments' => array('access content'),
    );

  $items['faculty/add-site/%node/%node'] = array(
    'page callback' => 's4_courses_add_site',
    'page arguments' => array(2, 3),
    'access callback' => 's4_courses_add_sites_access',
    'access arguments' => array(2),
    );

  $items['faculty/remove-site/%node/%node'] = array(
    'page callback' => 's4_courses_remove_site',
    'page arguments' => array(2, 3),
    'access callback' => 's4_courses_add_sites_access',
    'access arguments' => array(2),
    );

  $items['courses/manage'] = array(
    'page callback' => 's4_courses_course_manage_redirect',
    'access arguments' => array('create course content'),
    );

  $items['signup/create/faculty/%user'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_courses_faculty_signup_student_form', 3),
    'access callback' => 's4_corses_signup_student_access',
    'access arguments' => array(3),
    'file' => 's4_courses.pages.inc'
    );
  return $items;
}

function s4_corses_signup_student_access($student) {
  global $user;
  if(!s4_courses_user_is_faculty($user) || !user_access('manage course students')) {
    return;
  }
  return true;
}

function s4_courses_course_manage_redirect() {
  global $user;
  $user = user_load($user->uid);
  $default_programs = field_get_items('user', $user, 'field_program_default');
  $query = array();
  foreach($default_programs as $program) {
    $query['programs'][] = $program['tid'];
  }
  $terms = _s4_courses_get_current_terms();
  if($cache = cache_get('s4_courses_current_term_nids')) {
    $query['terms'] = $cache->data;
  }
  else {
    foreach($terms as $term) {
      $items = array();
      $term_nid = db_select('field_data_field_term_code', 'c')
           ->condition('field_term_code_value', $term)
           ->fields('c', array('entity_id'))
           ->execute()
           ->fetchField();
      $query['terms'][] = $term_nid;
    }
    cache_set('s4_courses_current_term_nids', $query['terms'], 'cache', time() + (12 * 60 * 60));
  }
  drupal_goto('courses', array('query' => $query));
  return;
}

function s4_courses_add_site($course, $site) {
  $_SESSION['s4_courses_add_course_current']['sites'][$site->nid] = $site->nid;
  if (!$sites = field_get_items('node', $course, 'field_sites')) {
    $sites = array();
  }
  $sites[] = array('nid' => $site->nid);
  $course->field_sites[$course->language] = $sites;
  node_save($course);
  drupal_set_message(t('The site %site has been added to %course.', array('%site' => $site->title, '%course' => $course->title)), 'success');
  drupal_goto(isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $site->nid);
}

function s4_courses_remove_site($course, $site) {
  unset($_SESSION['s4_courses_add_course_current']['sites'][$site->nid]);
  if (!$sites = field_get_items('node', $course, 'field_sites')) {
    $sites = array();
  }
  foreach($sites as $k => $course_site) {
    if($course_site['nid'] == $site->nid) {
      unset($sites[$k]);
    }
  }
  $sites = array_values($sites);
  $course->field_sites[$course->language] = $sites;
  node_save($course);
  drupal_set_message(t('The site %site has been removed from %course.', array('%site' => $site->title, '%course' => $course->title)), 'success');
  drupal_goto(isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $site->nid);
}

function s4_courses_add_sites_access($node) {
  global $user;
  if(node_access('update', $node)) {
    return TRUE;
  }
  $faculty = field_get_items('node', $node, 'field_course_faculty');
  if(!$faculty) {
    return false;
  }
  foreach($faculty as $instructor) {
    if($instructor['uid'] == $user->uid) {
      return true;
    }
  }
  return false;
}

function s4_courses_add_sites_done() {
  $return = $_SESSION['s4_courses_add_course_current'];
  $_SESSION['s4_courses_add_course_current'] = false;
  drupal_goto($return['return']);
}

function s4_courses_add_sites_page($node) {
  $_SESSION['s4_courses_add_course_current'] = array('course' => $node->nid,
                                                     'title' => $node->title,
                                                     'return' => $_GET['return']);
  $sites = field_get_items('node', $node, 'field_sites');
  foreach($sites as $site) {
    $_SESSION['s4_courses_add_course_current']['sites'][$site['nid']] = $site['nid'];
  }
  drupal_set_message(t('You are currently adding sites to !course', array('!course' => $node->title)), 'success');
  drupal_goto('site-list');
}

/**
 * Form callback for s4_courses_email_course_faculty
 */
function s4_courses_email_course_faculty_form($context) {
  $form = s4_core_email_site_coordinator_action_form($context);
  $form['token_message'] = array(
    '#markup' => t('Enter the token [missing_students] in your message for a list of all students who have no placements in the course.'),
    '#weight' => -1,
  );
  return $form;
}

/**
*  Form submit callback for s4_courses_email_course_faculty
*/
function s4_courses_email_course_faculty_submit($form, $form_state) {
  return s4_core_email_site_coordinator_action_submit($form, $form_state);
}

/**
*  Action to send an email to the selected user
*/
function s4_courses_bulk_signup_students_action($entity, $context) {
  if(!user_access('manage course students') && !user_access('create signups for other users')) {
    return;
  }
  global $user;
  $signup = array('user' => $entity->uid,
           'site' => $context['site'],
           'course' => $context['course'],
           'coordinator' => ($context['site-staff']) ? $context['site-staff'] : 0,
           'hours' => $context['hours']
          );
  $signup = _s4_core_create_signup($user->uid, $signup);
  $site = node_load($context['site']);
  $form = field_get_items('node', $site, 'field_site_form');
  if ($form[0]['nid'] && $context['email-student']) {

  }
}

/**
*  Form callback for s4_core_email_user_action
*/
function s4_courses_bulk_signup_students_action_form($context) {
  if(!user_access('manage course students') && !user_access('create signups for other users')) {
    return array();
  }
  $node = ($context['course']) ? node_load($context['settings']['course']) : node_load(arg(1));
  module_load_include('inc', 's4_core', 's4_core.pages');
  $form_state = array('values' => $context['settings']);
  $settings = _s4_courses_bulk_signup_students_action_settings();
  $form = array();
  global $user;
  $form['user'] = array(
    '#type' => 'hidden',
    '#value' => $user->uid,
  );

  $form['course'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $sites = array();
  $query = db_select('node', 'n')
       ->fields('n', array('nid', 'title'))
       ->condition('type', 'site')
       ->orderBy('title', 'ASC');
  $results = $query->execute();
  foreach ($results as $result) {
    $sites[$result->nid] = $result->title;
  }
  $form['site'] = array(
    '#type' => 'select',
    '#title' => 'Site',
    '#options' => $sites,
    '#attributes' => array('class' => array('chosen')),
    '#required' => TRUE,
    '#empty_option' => t('-- Select a site --'),
    '#ajax' => array(
      'callback' => 's4_core_site_options_choice',
      'wrapper' => 'site-options',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Looking up site information'),
      ),
    ),
  );

  $site_staff_options = array();
  $program_options = array();
  if ($settings['site']) {
    $site_staff = db_select('field_data_field_site', 's')
            ->fields('s', array('entity_id'))
            ->condition('s.bundle', 'coordinator')
            ->condition('s.field_site_nid', $settings['site'])
            ->execute()
            ->fetchCol();
    foreach ($site_staff as $staff) {
      $staff = node_load($staff);
      $available = field_get_items('node', $staff, 'field_staff_signup_available');
      if ($available[0]['value']) {
        $role = field_get_items('node', $staff, 'field_staff_role');
        $role = taxonomy_term_load($role[0]['tid']);
        $site_staff_options[$staff->nid] = t('@title (@role)', array('@title' => $staff->title,
                                       '@role' => $role->name));
      }
    }
    $site = node_load($settings['site']);
    $program_options = array();
    foreach(field_get_items('node', $site, 'field_site_restrict') as $program) {
      $program = taxonomy_term_load($program['tid']);
      $program_options[$program->tid] = $program->name;
    }
  }
  $form['site_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site options'),
    '#prefix' => '<div id="site-options">',
    '#suffix' => '</div>',
  );
  
  $form['site_options']['site-staff'] = array(
    '#type' => 'radios',
    '#title' => 'Site staff',
    '#options' => $site_staff_options,
  );

  $form['site_options']['program'] = array(
    '#type' => 'radios',
    '#title' => 'Related program',
    '#options' => $program_options,
  );

  $form['hours'] = array(
    '#type' => 'textfield',
    '#title' => 'Number of expected hours of services',
    '#size' => 6,
  );

  return $form;
}

/** 
 * Total hack to store the settings a user selects on the bulk signup action.
 */
function _s4_courses_bulk_signup_students_action_settings($settings = FALSE) {
  static $internal_settings;
  if($settings) {
    $internal_settings = $settings;
  }
  return $internal_settings;
}

/** 
 * Validate the bulk operation form. Here we pull a hack and store it in a static array.
 */
function s4_courses_bulk_signup_students_action_validate($form, &$form_state) {
  $params = array(
    'course'   => $form_state['values']['course'],
    'site'   => $form_state['values']['site'],
    'site-staff'   => $form_state['values']['site-staff'],
    'hours'   => $form_state['values']['hours'],
    'email-student' => $form_state['values']['email-student'],
  );
  _s4_courses_bulk_signup_students_action_settings($params);
}

/**
*  Form submit callback for s4_core_email_user_action
*/
function s4_courses_bulk_signup_students_action_submit($form, $form_state) {
  $params = array(
    'course'   => $form_state['input']['course'],
    'site'   => $form_state['input']['site'],
    'site-staff'   => $form_state['input']['site-staff'],
    'hours'   => ($form_state['input']['hours']) ? intval($form_state['input']['hours']) : 0,
    'email-student' => $form_state['input']['email-student'],
  );
  return $params;
}

function s4_courses_views_pre_view(&$view, $display_id, &$args) {
  if($view->name != 'course_students') {
    return;
  }
  foreach($view->display_handler->options['fields'] as $field_name => $field) {
    if($field['field'] == 'views_bulk_operations' && $field['vbo']['operations']['action::s4_courses_bulk_signup_students_action']['selected']) {
      if(!user_access('manage course students') && !user_access('create signups for other users')) {
        unset($view->display_handler->options['fields'][$field_name]);
      }
    }
  }
}

/**
*  Implementation of hook_node_event
*/
function s4_courses_node_event($action, $node) {
  $page = &drupal_static(__FUNCTION__);
  if (!isset($page[$action][$node->nid])) {
    $page[$action][$node->nid] = notifications_event('course_signup', $action)->add_object('node', $node);
  }
  return $page[$action][$node->nid];
}

/**
*  Implementation of hook_node_insert
*/
function s4_courses_node_insert($node) {
  if ($node->type == 'signup') {
    $course = field_get_items('node', $node, 'field_course');
    if(!$course || !count($course)) {
      return;
    }
    $course = node_load($course[0]['nid']);
    $subject = t('New placement in [s4_course:field-course-subject] [s4_course:field-course-catalog-number] ([s4_course:field-course-section])');
    $message = t('<strong>[user:field_last_name] [user:field_first_name]</strong> has been placed in <strong>[s4_signup:field-site]</strong> with the staff member <strong>[s4_site_staff:field-first-name] [s4_site_staff:field-last-name]</strong>.');
    $tokens['s4_signup'] = $node;
    $tokens['s4_course'] = $course;
    $coordinator = field_get_items('node', $node, 'field_coordinator');
    $tokens['s4_site_staff'] = node_load($coordinator[0]['nid']);
    $site = field_get_items('node', $node, 'field_site');
    $user = field_get_items('node', $node, 'field_user');
    $user = user_load($user[0]['uid']);
    $tokens['user'] = $user;
    $tokens['course'] = node_load($node->field_course[$node->language][0]['nid']);
    s4_mail_send_subscriptions('subscription_course_placements', 'node', $course->nid, $subject, $message, filter_default_format(), $tokens);
  }
}

/**
*  Implementation of hook_trigger_info
*/
function s4_courses_trigger_info() {
  return array(
    'node' => array(
      'course_signup' => array(
        'label' => t('A signup is registered for a course'),
      ),
    ),
  );
}

/**
*  Implementation of hook_context_plugins
*/
function s4_courses_context_plugins() {
  $plugins = array();
  $plugins['s4_courses_user_edit_course'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 's4_courses') .'/plugins',
      'file' => 's4_courses_user_edit_course.inc',
      'class' => 's4_courses_user_edit_course',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

function s4_courses_user_login(&$edit, $account) {
    $rid = db_select('role', 'r')
            ->condition('r.name', 'faculty')
            ->fields('r', array('rid'))
            ->execute()
            ->fetchField();
  if(s4_courses_user_is_faculty($account)) {
    foreach($account->roles as $role) {
      if($role == 'faculty') {
        return;
      }
    }
    $account->roles[$rid] = 'faculty';
    user_save($account);
    return;
  }
  if(isset($account->roles[$rid])) {
    unset($account->roles[$rid]);
    user_save($account);
  }
}

/**
*  Implementation of hook_context_registry
*/
function s4_courses_context_registry() {
  return array(
    'conditions' => array(
      'user_edit_course' => array(
        'title' => t('User can edit course'),
        'plugin' => 's4_courses_user_edit_course',
      ),
    ),
  );
}

/**
*  Implementation of hook_node_view
*  Here we trigger the user can edit course context
*/
function s4_courses_node_view($node, $view_mode) {
  if ($view_mode === 'full') {
    $object = menu_get_object();
    if (isset($object->nid) && $object->nid === $node->nid) {
      if ($plugin = context_get_plugin('condition', 'user_edit_course')) {
      $plugin->execute($node);
      }
    }
    if($node->type == 'course') {
      $term = field_get_items('node', $node, 'field_term');
      $term = node_load($term[0]['nid']);
      drupal_set_breadcrumb(
        array(l(t('Home'), '<front>'),
              l(t('Courses'), 'courses'),
              l($term->title, 'courses', array('query' => array('field_term_nid' => array($term->nid)))),
              l($node->title, 'node/'. $node->nid))
      );
    }
  }
}

function s4_courses_s4_reporting_info() {
  $info = array();
  foreach(array('course', 'course_term') as $type) {
    $fields = field_info_instances('node', $type);
    foreach($fields as $name => $field) {
      $info['s4_courses']['filters'][$type][$name] = $field;
      if (!in_array($name, array('field_course_students', 'field_course_faculty'))) {
        $info['s4_courses']['fields'][$type][$name] = $field;
      }
    }
    $info['s4_courses']['types'][$type] = node_type_load($type);
  }
  return $info;
}

function s4_courses_s4_reporting_summary_report() {
  return array('_s4_courses_reporting_general' => array('callback' => '_s4_courses_reporting_general',
            'file' => drupal_get_path('module', 's4_courses') .'/s4_courses.reporting.inc',
            'title' => t('General course totals'),
            ),
            '_s4_courses_reporting_course_summary' => array('callback' => '_s4_courses_reporting_course_summary',
            'file' => drupal_get_path('module', 's4_courses') .'/s4_courses.reporting.inc',
            'title' => t('Course summary reports'),
            )            
            );
}

/**
 * Views access callback
 */
function s4_courses_views_check_faculty_access($view, $account) {
  $node = node_load(arg(1));
  if ($node->type != 'course') {
    return FALSE;
  }
  if(node_access('update', $node)) {
    return TRUE;
  }
  $faculty = field_get_items('node', $node, 'field_course_faculty');
  foreach($faculty as $instructor) {
    if ($instructor['uid'] == $account->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Implements hook_permission
*/
function s4_courses_permission() {
  return array(
    'manage course students' => array(
      'title' => t('Manage (delete or edit signups) students in assigned courses'),
      'description' => t('Users can sign up other people who are in courses assigned to them as faculty.'),
    ),
  );
}

function s4_courses_user_is_faculty($user) {
  $faculty = &drupal_static(__FUNCTION__);
  if(isset($faculty[$user->uid])) {
    return $faculty[$user->uid];
  }
  $terms = db_query('SELECT entity_id FROM {field_data_field_term_date_start} WHERE
             field_term_date_start_value <= NOW()
             AND field_term_date_start_value2 >= NOW()
             ORDER BY field_term_date_start_value');
  if(!$terms) {
    $faculty[$user->uid] = FALSE;
    return FALSE;
  }
  $term_results = array();
  foreach ($terms as $term) {
    $term_results[] = $term->entity_id;
  }
  if(!$term_results || !count($term_results)) {
    $faculty[$user->uid] = FALSE;
    return FALSE;
  }
  $courses = db_select('field_data_field_course_faculty', 'f')
              ->condition('field_course_faculty_uid', $user->uid)
              ->fields('f', array('entity_id'));
  $courses->leftJoin('field_data_field_term', 't', 't.entity_type = f.entity_type AND t.entity_id = f.entity_id');
  $courses->condition('t.field_term_nid', $term_results, 'IN');
  $faculty[$user->uid] = $courses->execute()->fetchAllKeyed(0,0);
  return $faculty[$user->uid];
}

function s4_courses_s4_frontpage_blocks() {
  $result = array();
  global $user;
  if(s4_courses_user_is_faculty($user)) {
    $result =  array('courses' => array('subject' => t('Manage your courses'),
                                    'content' => t('See a list of your current courses, manage the sites available to your students, and view enrollment.'),
                                    'href' => 'faculty/manage/courses'),
                 'students' => array('subject' => t('Manage your students'),
                                     'content' => t('See where all your current students are placed.'),
                                     'href' => 'faculty/manage/students'));
  }
  return $result;
}
