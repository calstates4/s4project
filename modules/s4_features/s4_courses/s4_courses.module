<?php
/**
 * @file
 * Code for the S4 Courses feature.
 */

include_once('s4_courses.features.inc');

/**
* Implements hook_menu
*/
function s4_courses_menu() {
  $items = array();

  $items['admin/config/s4/courses'] = array(
    'title' => 'Course Integration',
    'description' => 'Manage how courses are imported and managed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_courses_admin_form'),
    'file' => 's4_courses.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function s4_courses_get_term_codes($requested_code = FALSE) {

  return $term_codes;
}

/**
*  Implementation of hook_s4_site_configuration
*/
function s4_courses_s4_site_configuration() {
  return array(
    's4_courses' => array(
      'group' => t('Courses'),
      'title' => t('Setup courses & course filters'),
      'description' => t('Manage how S4 integrates with your SIS for courses and create filters to select only courses that are needed for this site'),
      'href' => 'admin/config/s4/courses',
    ),
  );
}

/**
*  Implementation of s4_core_field_access
*/
function s4_courses_s4_field_access() {

  return array('course' => array(
            'field_course_students',
            'field_course_faculty',
            'field_site_restrict',
            'field_sites',
            'field_term',
            'field_site_restrict_to_list',
            'field_course_subject',
            'field_course_title',
            'field_course_catalog_number',
            'field_course_section',
            'field_course_signups',
        ),
        'course_term' => array(
            'field_term_code',
            'field_term_date_start',
            'field_term_filter',
        ),

  );
}

/**
*  Returns allowed term codes
*/
function s4_courses_get_allowed_term_codes() {
  $year = date('Y', strtotime('-1 year'));
  $codes = s4_courses_get_term_codes();
  $values = array();
  while (intval($year) < date('Y', strtotime('+3 years'))) {
    $year_format = str_split($year, 1);
    foreach ($codes as $code => $value) {
      $values[$year_format[0] . $year_format[2] . $year_format[3] . $code] = $value . ' ' . $year;
    }
    $year = date('Y', strtotime('+1 year', strtotime($year . '-1-1')));
  }
  return $values;
}

/**
* Implements hook_cron
*  On cron we check courses periodically and create new course or
*  term nodes.
*/
function s4_courses_cron() {
  if (time() > variable_get('s4_term_cron_last_update', 0) + variable_get('s4_courses_update_frequency', (2 * 60 * 60))) {
    $terms = module_invoke_all('s4_get_term', date('Y-m-d', strtotime('-1 year')),
                           date('Y-m-d', strtotime('+1 year')));
    if (count($terms)) {
      foreach ($terms as $term) {
        s4_courses_create_term($term);
      }
      variable_set('s4_term_cron_last_update', time());
  }
    return NULL;
  }
  if (time() > variable_get('s4_courses_cron_last_update', 0) + variable_get('s4_courses_update_frequency', (2 * 60 * 60))) {
    foreach(_s4_courses_get_current_terms() as $term) {
      $courses = module_invoke_all('s4_get_courses', $term);
      foreach ($courses as $course) {
        s4_courses_create_course($course);
      }
  }
    variable_set('s4_courses_cron_last_update', time());
  }


}

/**
* Implements hook_user_login
*  On login, we cal user enrollment and faculty
*  enrollment hooks to see what courses are assigned
*  to the current user.
*/
function s4_courses_user_login(&$edit, $account) {
  $user_id = field_get_items('user', $account, 'field_sis_user_id');
  if (!$user_id) {
    return NULL;
  }
  $user_id = $user_id[0]['value'];
  $hooks = array('s4_get_user_enrollment' => 'students',
           's4_get_faculty_courses' => 'faculty');
  foreach (_s4_courses_get_current_terms() as $term) {

    foreach ($hooks as $hook => $course_role) {
      $courses = module_invoke_all($hook, $user_id, $term);
      foreach ($courses as $course) {
        s4_courses_create_course($course, $account->uid, $course_role);
      }
    }
  }
}

/**
*  Creates a term node using information from the SIS hooks
*/
function s4_courses_create_term($term) {
  $term_node = s4_core_get_entity($term, 'term');
  if (!$term_node) {
    $term_node = new stdClass();
    $term_node->type = 'course_term';
    $term_node->language = language_default()->language;
    $term_node->s4_unique_id = s4_core_make_hash($term, 'term');
  }
  $term_node->title = $term['term_title'];
  $term_node->field_term_code[$term_node->language][0]['value'] = $term['term_code'];
  $term_node->field_term_date_start[$term_node->language][0] = array(
                'value'  => date('Y-m-d', strtotime($term['start_date'])),
                'value2' => date('Y-m-d', strtotime($term['end_date']))
              );
  node_save($term_node);
}

/**
*  Creates a course node using information from the SIS hooks.
*  @param course The course array returned from the hook
*  @param add_user An additional user ID to add, useful if this is
*          being called as part of a known user's enrollment
*  @param add_user If a user is set above, also set the role -
*            either "students" or "faculty"
*/
function s4_courses_create_course($course, $add_user= FALSE, $add_role = FALSE) {
  $course_node = s4_core_get_entity($course, 'course');
  if (!$course_node) {

    $course_node = new stdClass();
    $course_node->type = 'course';
    $course_node->language = language_default()->language;
    $course_node->s4_unique_id = s4_core_make_hash($course, 'course');
    $course_node->title = $course['subject'] .' '. $course['catalog_number'] .' ('. $course['section'] .')';
    $course_node->field_term[$course_node->language][0]['nid'] = _s4_courses_get_term_nid($course['term']);
    foreach (_s4_courses_get_field_mapping() as $field => $key) {
      $course_node->{$field} = array($course_node->language => array(
                         array('value' => $course[$key])
                         ));
    }
    node_save($course_node);
  }
  if ($course_node->nid && $add_user) {
    $course[$add_role][] = $add_user;
  }
  if (count($course['students']) || count($course['faculty'])) {
    foreach (array('students', 'faculty') as $role) {
      $field_name = 'field_course_' . $role;
      $users = field_get_items('node', $course_node, $field_name);
      $existing = array();
      if ($users) {
        foreach ($users as $user) {
          $existing[$user['uid']] = $user['uid'];
        }
      }
      else {
        $users = array();
      }
      foreach ($course[$role] as $user) {
        if (is_numeric($user) && !$existing[$user]) {
          //This is a user ID, just add it
          if (!isset($existing[$user])) {
            $users[] = array('uid' => $user);
        }
        }
        elseif (is_array($user)) {
          //This is a user object, create or load them
          $user = s4_core_create_user($user);
          if (!isset($existing[$user->uid])) {
            $users[] = array('uid' => $user->uid);
        }
        }
      }
      $course_node->{$field_name}[$course_node->language] = $users;
    }
    node_save($course_node);
  }
}

/**
*  Returns the NID of a term based on term code
*/
function _s4_courses_get_term_nid($code) {
  static $terms;
  if (!isset($terms[$code])) {
    $term = db_select('field_data_field_term_code', 't')
          ->condition('t.field_term_code_value', $code)
          ->fields('t', array('entity_id'));
      $result = $term->execute();
      $terms[$code] = $result->fetchField();
    }
    return $terms[$code];
}

/**
*  Retrieves all field mappings from Drupal fields to
*  the array keys returned by S4 hooks.
*  @todo - This should probably be a bit smarter than a
*  single array.
*/
function _s4_courses_get_field_mapping($type = 'course') {
  if ($type == 'course') {
    return array(
      'field_course_subject' => 'subject',
      'field_course_catalog_number' => 'catalog_number',
      'field_course_section' => 'section',
      'field_course_title' => 'title',
      'field_course_status' => 'status'
    );
  }
}

/**
*  Returns all terms that cover the current time.
*  This is primarily used when making API calls to see what
*  courses are available generally or for a user.
*/
function _s4_courses_get_current_terms() {
  if ($cache = cache_get('s4_core_current_terms', FALSE)) {
    return $cache->data;
  }
  $terms = db_query('SELECT entity_id FROM {field_data_field_term_date_start} WHERE
             field_term_date_start_value <= NOW()
             AND field_term_date_start_value2 >= NOW()
             ORDER BY field_term_date_start_value');
  $term_results = array();
  foreach ($terms as $term) {
    $term = node_load($term->entity_id);
    $term_code = field_get_items('node', $term, 'field_term_code');
    $term_results[$term_code[0]['value']] = $term_code[0]['value'];
  }
  cache_set('s4_core_current_terms', $term_results, 'cache', time() + (4 * 60 * 60));
  return $term_results;
}


/**
* Implements hook_s4_user_status
*/
function s4_courses_s4_user_status(&$status) {
  if (isset($_SESSION['s4_signup_program']) && !isset($_SESSION['s4_signup_course'])) {
    return;
  }
  if (isset($_SESSION['s4_signup_course'])) {
    $course = node_load($_SESSION['s4_signup_course']);
  }
  if (isset($course)) {
    $selection = '<div class="selection">' . l($course->title, 'node/' . $course->nid) . '</div>';
  }
  $status = array('course' => array('data' => ($course) ? 'Course' : 'Course or program',
            'id'     => 'status-course',
            'href'  => 'my-courses',
            'class'  => (isset($_SESSION['s4_signup_course'])) ? array('done') : array(),
            'selection' => (isset($selection)) ? $selection : FALSE)) + $status;
}

/**
* Implements hook_s4_signup
*/
function s4_courses_s4_signup($type, $nid) {
  if ($type == 'course') {
    global $user;
    $course = node_load($nid);
    if ($course->type == 'course') {
      $_SESSION['s4_signup_course'] = check_plain($nid);
      drupal_set_message(t('Course @course selected.', array('@course' => $course->title)));
      $programs = field_get_items('node', $course, 'field_site_restrict');
      $program_terms = array();
      foreach($programs as $program) {
        $program = taxonomy_term_load($program['tid']);
        $program_terms[$program->tid] = str_replace(' ', '-', $program->name);
      }
      $_SESSION['s4_signup_program'] = $program_terms;
      $sites = field_get_items('node', $course, 'field_sites');
      if (!$sites || !count($sites)) {
        drupal_goto('site-list/all/'. implode('+', $program_terms));
      }
      else {
        $argument = array();
        foreach ($sites as $site) {
          $argument[] = $site['nid'];
        }
        drupal_goto('site-list/' . implode('+', $argument) . '/'. implode('+', $program_terms));
      }
    }
    else {
      $success = FALSE;
      drupal_set_message(t('That is not a course'), 'error');
    }
  }
}

function s4_courses_form_views_form_course_students_block_alter(&$form, &$form_state) {
  if ($form_state['values']['site']) {
    $site_staff = db_select('field_data_field_site', 's')
            ->fields('s', array('entity_id'))
            ->condition('s.bundle', 'coordinator')
            ->condition('s.field_site_nid', $form_state['values']['site'])
            ->execute()
            ->fetchCol();
    foreach ($site_staff as $staff) {
      $staff = node_load($staff);
      $available = field_get_items('node', $staff, 'field_staff_signup_available');
      if ($available[0]['value']) {
        $role = field_get_items('node', $staff, 'field_staff_role');
        $role = taxonomy_term_load($role[0]['tid']);
        $form['site-staff']['#options'][$staff->nid] = t('@title (@role)', array('@title' => $staff->title,
                                       '@role' => $role->name));
      }
    }
  }
}

function s4_courses_s4_signup_dates($node) {
  $course = node_load($node->field_course[$node->language][0]['nid']);
  if (!$course) {
    return false;
  }
  $course_date = field_get_items('node', $course, 'field_service_end');
  if ($course_date[0]['value'] && strtotime($course_date[0]['value']) > time()) {
    $end_date = array('date' => strtotime($course_date[0]['value']),
           'weight' => 50);
  }
  $term = field_get_items('node', $course, 'field_term');
  $term = node_load($term[0]['nid']);
  if ($term) {
    $term_date = field_get_items('node', $term, 'field_term_date_start');
    $result = array();
    $result['end_date'] = (isset($end_date))
                  ? $end_date
                  : array('date' => strtotime($term_date[0]['value2']), 'weight' => 50);
    $result['start_date'] = array('date' => strtotime($term_date[0]['value']),
           'weight' => 50);
    return $result;
  }
  return false;
}


/**
 * Implements hook_form_alter().
 */
function s4_courses_form_s4_core_admin_form_alter(&$form, $form_state) {
  $message = variable_get('s4_courses_faculty_help', array('value' => t('You can quickly search for a student below, or manage your courses to the right, where you can edit your course settings. To restrict students to a course, visit the !link, click on a site, and click the "Add to course" button.', array('!link' => l('site listing page', 'site-list'))), 'format' => FILTER_FORMAT_DEFAULT));
  $form['s4_courses_faculty_help'] = array(
    '#title' => t('Welcome message for faculty'),
    '#type' => 'text_format',
    '#description' => t('The number of days before a student\'s service ends where an email should be sent.'),
    '#default_value' => $message['value'],
    '#text_format' => $message['format'],
    );
}

/**
* Implements hook_block_info
*/
function s4_courses_block_info() {
  $blocks['s4_courses_add_course'] = array('info' => 'Add new course button');
  $blocks['s4_courses_subscriptions'] = array('info' => 'Subscribe to new signups');
  $blocks['s4_courses_restriction_form'] = array('info' => 'Edit course site restriction');
  $blocks['s4_courses_faculty_help'] = array('info' => 'Faculty help');
  return $blocks;
}

/**
* Implements hook_block_view
*/
function s4_courses_block_view($delta) {
  switch ($delta) {
    case 's4_courses_faculty_help':
      global $user;
      $view = views_get_view('user_courses');
      $view->set_display('block');
      $view->set_arguments(array($user->uid));
      $view->preview();
      if(!count($view->result)) {
        return;
      }
      $message = variable_get('s4_courses_faculty_help', array('value' => t('You can quickly search for a student below, or manage your courses to the right, where you can edit your course settings. To restrict students to a course, visit the !link, click on a site, and click the "Add to course" button.', array('!link' => l('site listing page', 'site-list'))), 'format' => FILTER_FORMAT_DEFAULT));
      return array('subject' => t('Get started'),
                   'content' => check_markup($message['value'], $message['format']));
    case 's4_courses_add_course':
      if (user_access('create course content')) {
        return array('content' => l(t('<span class="add"></span>Add new course'),
                  'node/add/course',
                  array('html' => TRUE,
                       'attributes' =>
                      array('class' => 'button add')
                  )
                  )
          );
      }
      break;
    case 's4_courses_subscriptions':
      global $user;
      $node = menu_get_object();
      $faculty = field_get_items('node', $node, 'field_course_faculty');
      foreach ($faculty as $uid) {
        if ($uid['uid'] == $user->uid) {
          $query = db_select('notifications_subscription', 's');
          $query->leftJoin('notifications_subscription_fields', 'f', 's.sid = f.sid');
          $query->condition('s.uid', $user->uid)
              ->condition('s.type', 'course_signup')
              ->condition('f.type', 'node:nid')
              ->condition('f.value', $node->nid)
              ->fields('s', array('sid'));
          $subscription = $query->execute()->fetchField();
          if ($subscription) {
            $text = '<span class="hover">Unsubscribe</span><span class="nohover">Subscribed</span>';
            $url = 'notifications/unsubscribe/' . $subscription;
            $query = array(0 => $node->nid, 'destination' => 'node/' . $node->nid);
            $class = 'subscribed';
          }
          else {
            $text = 'Subscribe to signups';
            $url = 'notifications/subscribe/course_signup';
            $query = array(0 => $node->nid, 'destination' => 'node/' . $node->nid);
            $class = 'not-subscribed';
          }
          return array('content' => l($text, $url,
                        array('query' => $query,
                            'html' => TRUE,
                            'attributes' =>
                              array('class' => 'subscription-button ' . $class)
                            )
                        ) .
                        '<div class="small">' . t('Receive an email when a student signs up with a site.') .'</div>'
                );
        }
      }
      break;
    case 's4_courses_restriction_form':
      $node = menu_get_object();
      global $user;
      if ($node->type != 'course') {
        return null;
      }
      $faculty = array();
      $course_faculty = field_get_items('node', $node, 'field_course_faculty');
    if (is_array($course_faculty)) {
      foreach($course_faculty as $faculty_uid) {
        $faculty[] = $faculty_uid['uid'];
      }
    }
    if (!in_array($user->uid, $faculty) && !node_access('update', $node)) {
      return null;
    }
    return array('subject' => '',
             'content' => drupal_get_form('s4_courses_edit_course_restrict_form'));
      break;
  }
}

function s4_courses_node_access($node, $op, $account) {
  if($node->type != 'signup') {
    return;
  }
  $course = field_get_items('node', $node, 'field_course');
  if($course[0]['nid']) {
    $course = node_load($course[0]['nid']);
    $faculty = field_get_items('node', $course, 'field_course_faculty');
    foreach($faculty as $instructor) {
      if($instructor['uid'] == $account->uid && ($op == 'view' || user_access('manage course students', $account))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
}

function s4_courses_edit_course_restrict_form() {
  $node = menu_get_object();
  $form = array();

  $default = field_get_items('node', $node, 'field_site_restrict_to_list');
  $default_email = field_get_items('node', $node, 'field_course_faculty_email');

  $form['message'] = array(
    '#markup' => t('You can add sites to your course by browsing the !link and clicking the "Add to my course" buttons on the right.',
      array('!link' => l(t('site list'), 'site-list'))),
  );

  $form['field_site_restrict_to_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict students to only selected sites'),
    '#description' => t('When checked, students will not be able to register for any other sites.'),
    '#default_value' => $default[0]['value'],
  );

  $form['field_course_faculty_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send evaluation reminders from my email account'),
    '#default_value' => $default_email[0]['value'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update',
  );

  return $form;
}

function s4_courses_edit_course_restrict_form_submit($form, $form_state) {
  $node = menu_get_object();
  $node->field_site_restrict_to_list[$node->language][0]['value'] =
     $form_state['values']['field_site_restrict_to_list'];
  $node->field_course_faculty_email[$node->language][0]['value'] =
    $form_state['values']['field_course_faculty_email'];
  node_save($node);
  drupal_set_message(t('Your course has been updated.'));
}

/**
* Implements hook_notifications
*/
function s4_courses_notifications($op) {
  switch ($op) {
    case 'subscription types':
      $types['course_signup'] = array(
        'title' => t('Course signups'),
        'class' => 'Notifications_Course_Subscription',
        'field_types' => array('node:nid'),
        'object_types' => array('node'),
        'access' => array('subscribe to content'),
        'description' => t('Subscribe to all signups for this course.'),
        'display_options' => array('node_links'),
      );
      return $types;

    case 'field types':
      return array();

    case 'object types':
      $types['signup'] = array(
        'title' => t('Signup'),
        'class' => 'Notifications_Signup',
      );
      return $types;

    case 'event types':
      $types['course_signup'] = array(
        'object' => 'node',
        'action' => 'course_signup',
        'title' => t('Signup created'),
        'class' => 'Notifications_Course_Signup_Post_Event',
        'template' => 's4_courses-singup-created',
        'triggers' => array('node' => array('course_signup')),
        'actions' => array('s4_courses_signup_post_action'),
      );
      return $types;

    case 'message templates':
      $types['s4_courses-singup-created'] = array(
        'object' => 'node',
        'title' => t('Signup created'),
        'class' => 'Notifications_Course_Signup_Post_Event',
      );
      return $types;

    case 'display options':
      $options['node_links'] = array(
        '#title' => t('Full node links'),
        '#description' => t('Subscription links will be displayed for full node pages.'),
      );
      return $options;

    case 'event classes':
      return array('node' => t('Node'));

    case 'event actions':
      return array(
        'course_signup' => t('Creation'),
      );
  }
}

/**
*  Implementation of hook_signup_post_action
*/
function s4_courses_signup_post_action($node, $context = array()) {
  $node = $context['node'];
  if ($node->type == 'course') {
     s4_courses_node_event('course_signup', $node)->trigger();
  }
}

/**
*  Implementation of hook_action_info
*/
function s4_courses_action_info() {
  return array(
    's4_courses_signup_post_action' => array(
      'type' => 'notifications',
      'label' => t('Send notifications for new signups'),
      'configurable' => FALSE,
      'behavior' => array('sends_notification'),
      'triggers' => array('course_signup'),
    ),
    's4_courses_bulk_signup_students_action' => array(
      'type' => 'system',
      'label' => t('Signup students in bulk'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
*  Action to send an email to the selected user
*/
function s4_courses_bulk_signup_students_action($entity, $context) {
  if(!user_access('manage course students') && !user_access('create signups for other users')) {
    return;
  }
  global $user;
  $signup = array('user' => $entity->uid,
           'site' => $context['site'],
           'course' => $context['course'],
           'coordinator' => ($context['site-staff']) ? $context['site-staff'] : 0,
           'hours' => $context['hours']
          );
  $signup = _s4_core_create_signup($user->uid, $signup);
  $site = node_load($context['site']);
  $form = field_get_items('node', $site, 'field_site_form');
  if ($form[0]['nid'] && $context['email-student']) {

  }
}

/**
*  Form callback for s4_core_email_user_action
*/
function s4_courses_bulk_signup_students_action_form($context) {
  if(!user_access('manage course students') && !user_access('create signups for other users')) {
    return array();
  }
  $node = ($context['course']) ? node_load($context['settings']['course']) : node_load(arg(1));
  module_load_include('inc', 's4_core', 's4_core.pages');
  $form_state = array('values' => $context['settings']);
  $settings = _s4_courses_bulk_signup_students_action_settings();
  $form = array();
  global $user;
  $form['user'] = array(
    '#type' => 'hidden',
    '#value' => $user->uid,
  );

  $form['course'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $sites = array();
  $query = db_select('node', 'n')
       ->fields('n', array('nid', 'title'))
       ->condition('type', 'site')
       ->orderBy('title', 'ASC');
  $results = $query->execute();
  foreach ($results as $result) {
    $sites[$result->nid] = $result->title;
  }
  $form['site'] = array(
    '#type' => 'select',
    '#title' => 'Site',
    '#options' => $sites,
    '#attributes' => array('class' => array('chosen')),
    '#required' => TRUE,
    '#empty_option' => t('-- Select a site --'),
    '#ajax' => array(
      'callback' => 's4_core_site_options_choice',
      'wrapper' => 'site-options',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Looking up site information'),
      ),
    ),
  );

  $site_staff_options = array();
  $program_options = array();
  if ($settings['site']) {
    $site_staff = db_select('field_data_field_site', 's')
            ->fields('s', array('entity_id'))
            ->condition('s.bundle', 'coordinator')
            ->condition('s.field_site_nid', $settings['site'])
            ->execute()
            ->fetchCol();
    foreach ($site_staff as $staff) {
      $staff = node_load($staff);
      $available = field_get_items('node', $staff, 'field_staff_signup_available');
      if ($available[0]['value']) {
        $role = field_get_items('node', $staff, 'field_staff_role');
        $role = taxonomy_term_load($role[0]['tid']);
        $site_staff_options[$staff->nid] = t('@title (@role)', array('@title' => $staff->title,
                                       '@role' => $role->name));
      }
    }
    $site = node_load($settings['site']);
    $program_options = array();
    foreach(field_get_items('node', $site, 'field_site_restrict') as $program) {
      $program = taxonomy_term_load($program['tid']);
      $program_options[$program->tid] = $program->name;
    }
  }
  $form['site_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site options'),
    '#prefix' => '<div id="site-options">',
    '#suffix' => '</div>',
  );
  
  $form['site_options']['site-staff'] = array(
    '#type' => 'radios',
    '#title' => 'Site staff',
    '#options' => $site_staff_options,
  );

  $form['site_options']['program'] = array(
    '#type' => 'radios',
    '#title' => 'Related program',
    '#options' => $program_options,
  );

  $form['hours'] = array(
    '#type' => 'textfield',
    '#title' => 'Number of expected hours of services',
    '#size' => 6,
  );

  return $form;
}

/** 
 * Total hack to store the settings a user selects on the bulk signup action.
 */
function _s4_courses_bulk_signup_students_action_settings($settings = FALSE) {
  static $internal_settings;
  if($settings) {
    $internal_settings = $settings;
  }
  return $internal_settings;
}

/** 
 * Validate the bulk operation form. Here we pull a hack and store it in a static array.
 */
function s4_courses_bulk_signup_students_action_validate($form, &$form_state) {
  $params = array(
    'course'   => $form_state['values']['course'],
    'site'   => $form_state['values']['site'],
    'site-staff'   => $form_state['values']['site-staff'],
    'hours'   => $form_state['values']['hours'],
    'email-student' => $form_state['values']['email-student'],
  );
  _s4_courses_bulk_signup_students_action_settings($params);
}

/**
*  Form submit callback for s4_core_email_user_action
*/
function s4_courses_bulk_signup_students_action_submit($form, $form_state) {
  $params = array(
    'course'   => $form_state['input']['course'],
    'site'   => $form_state['input']['site'],
    'site-staff'   => $form_state['input']['site-staff'],
    'hours'   => $form_state['input']['hours'],
    'email-student' => $form_state['input']['email-student'],
  );
  return $params;
}

function s4_courses_views_pre_view(&$view, $display_id, &$args) {
  if($view->name != 'course_students') {
    return;
  }
  foreach($view->display_handler->options['fields'] as $field_name => $field) {
    if($field['field'] == 'views_bulk_operations' && $field['vbo']['operations']['action::s4_courses_bulk_signup_students_action']['selected']) {
      if(!user_access('manage course students') && !user_access('create signups for other users')) {
        unset($view->display_handler->options['fields'][$field_name]);
      }
    }
  }
}

/**
*  Notification subscriptions
*/
function s4_courses_notifications_subscription($op, $subscription = NULL) {
  switch ($op) {
    case 'page objects':
      $objects = array();
      // Return objects on current page to which we can subscribe
      if (arg(0) == 'node' && is_numeric(arg(1)) && ($node = menu_get_object('node')) && $node->type == 'course') {
        $objects[] = notifications_object('signup', $node);
      }
      return $objects;
      break;
  }
}

/**
*  Implementation of hook_node_event
*/
function s4_courses_node_event($action, $node) {
  $page = &drupal_static(__FUNCTION__);
  if (!isset($page[$action][$node->nid])) {
    $page[$action][$node->nid] = notifications_event('course_signup', $action)->add_object('node', $node);
  }
  return $page[$action][$node->nid];
}

/**
*  Implementation of hook_node_insert
*/
function s4_courses_node_insert($node) {
  if ($node->type == 'signup') {
    $course = field_get_items('node', $node, 'field_course');
    $course = node_load($course[0]['nid']);
    _trigger_node($course, 'course_signup');
  }
}

/**
*  Implementation of hook_trigger_info
*/
function s4_courses_trigger_info() {
  return array(
    'node' => array(
      'course_signup' => array(
        'label' => t('A signup is registered for a course'),
      ),
    ),
  );
}

/**
*  Implementation of hook_context_plugins
*/
function s4_courses_context_plugins() {
  $plugins = array();
  $plugins['s4_courses_user_edit_course'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 's4_courses') .'/plugins',
      'file' => 's4_courses_user_edit_course.inc',
      'class' => 's4_courses_user_edit_course',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
*  Implementation of hook_context_registry
*/
function s4_courses_context_registry() {
  return array(
    'conditions' => array(
      'user_edit_course' => array(
        'title' => t('User can edit course'),
        'plugin' => 's4_courses_user_edit_course',
      ),
    ),
  );
}

/**
*  Implementation of hook_node_view
*  Here we trigger the user can edit course context
*/
function s4_courses_node_view($node, $view_mode) {
  if ($view_mode === 'full') {
    $object = menu_get_object();
    if (isset($object->nid) && $object->nid === $node->nid) {
      if ($plugin = context_get_plugin('condition', 'user_edit_course')) {
      $plugin->execute($node);
      }
    }
    if($node->type == 'course') {
      $term = field_get_items('node', $node, 'field_term');
      $term = node_load($term[0]['nid']);
      drupal_set_breadcrumb(
        array(l(t('Home'), '<front>'),
              l(t('Courses'), 'courses'),
              l($term->title, 'courses', array('query' => array('field_term_nid' => array($term->nid)))),
              l($node->title, 'node/'. $node->nid))
      );
    }
  }
}

function s4_courses_s4_reporting_info() {
  $info = array();
  foreach(array('course', 'course_term') as $type) {
    $fields = field_info_instances('node', $type);
    foreach($fields as $name => $field) {
      $info['s4_courses']['filters'][$type][$name] = $field;
      if (!in_array($name, array('field_course_students', 'field_course_faculty'))) {
        $info['s4_courses']['fields'][$type][$name] = $field;
      }
    }
    $info['s4_courses']['types'][$type] = node_type_load($type);
  }
  return $info;
}

function s4_courses_s4_reporting_term_report($report_criteria) {
  $totals = array('sections' => array('count' => 0,
                         'title' => t('Sections')),
            'total-courses' => array('count' => 0,
                         'title' => t('Courses')),
            'ud-courses' => array('count' => 0,
                         'title' => t('Upper-division sections')),
            'ld-courses' => array('count' => 0,
                         'title' => t('Lower-division sections')),
            'students' => array('count' => 0,
                         'title' => t('Students')),
            'placements' => array('count' => 0,
                         'title' => t('Placements')),
            'hours' => array('count' => 0,
                      'title' => t('Service hours')),
          );
  $courses = array();
  $query = db_select('node_revision', 'r')
           ->fields('r', array('nid', 'status'));
  $query->leftJoin('field_data_field_term', 't', 't.entity_id = r.nid AND t.bundle = :course', array(':course' => 'course'));
  $query->fields('t', array('field_term_nid'));
  $query->leftJoin('field_data_field_site_restrict', 'p', 'p.entity_id = r.nid AND p.bundle = :course', array(':course' => 'course'));
  $query->condition('p.field_site_restrict_tid', $report_criteria['program']);
  if ($report_criteria['term']) {
    $query->condition('t.field_term_nid', $report_criteria['term']->nid);
  }
  else {
    $query->condition('r.timestamp', strtotime($report_criteria['start']), '>=')
        ->condition('r.timestamp', strtotime($report_criteria['end']), '<=');
  }
  $query->leftJoin('field_data_field_course_students', 's', 's.entity_id = r.nid AND s.bundle = :course', array(':course' => 'course'));
  $query->leftJoin('field_data_field_user', 'u', 's.field_course_students_uid = u.field_user_uid AND u.bundle = :signup', array(':signup' => 'signup'));
  $query->leftJoin('field_data_field_course', 'c', 'c.field_course_nid = r.nid AND c.bundle = :signup', array(':signup' => 'signup'));

  $query->leftJoin('field_data_field_course_catalog_number', 'cn', 'cn.entity_id = t.entity_id AND cn.bundle = t.bundle');
  $query->leftJoin('field_data_field_signup_hours', 'h', 'h.entity_id = c.entity_id AND h.bundle = c.bundle');
  $query->leftJoin('field_data_field_course_subject', 'su', 'su.entity_id = t.entity_id AND su.bundle = t.bundle');
  $query->fields('h', array('field_signup_hours_value'));
  $query->fields('cn', array('field_course_catalog_number_value'));
  $query->fields('su', array('field_course_subject_value'));
  $query->fields('c', array('entity_id'));
  $query->fields('s', array('field_course_students_uid'));
  $query->leftJoin('node', 'n', 'n.vid = r.vid');
  $query->condition('n.type', 'course');
  $results = $query->execute()->fetchAll();

  foreach($results as $result) {
    $total_courses[$result->field_course_subject_value . $reuslt->field_course_catalog_number_value] = $result->field_course_subject_value . $reuslt->field_course_catalog_number_value;
    $sections[$result->nid] = $result->nid;
    $students[$result->field_course_students_uid] = $result->field_course_students_uid;
    $signups[$result->entity_id] = $result->entity_id;
    if (intval(substr($result->field_course_catalog_number_value, 0, 1)) > 2) {
      $ud_courses[$result->nid] = $result->nid;
    }
    else {
      $ld_courses[$result->nid] = $result->nid;
    }
    $hours[$result->entity_id] = $result->field_signup_hours_value;
  };
  foreach($hours as $hour) {
    $totals['hours']['count'] += $hour;
  }
  $totals['students']['count'] = count($students);
  $totals['sections']['count'] = count($sections);
  $totals['total-courses']['count'] = count($total_courses);
  $totals['placements']['count'] = count($signups);
  $totals['ud-courses']['count'] = count($ud_courses);
  $totals['ld-courses']['count'] = count($ld_courses);
  $output = '';
  $course_query = db_select('node', 'n')
                    ->condition('n.type', 'course')
                    ->fields('n', array('nid'));
  $course_query->leftJoin('field_data_field_term', 't', 't.entity_type = :node AND t.entity_id = n.nid', array(':node' => 'node'));
  if($report_criteria['term']) {
    $course_query->condition('t.field_term_nid', $report_criteria['term']->nid);
  }
  else {
    // @todo also add case for time
  }
  $course_query->leftJoin('field_data_field_course_catalog_number', 'num', 'num.entity_type = :node AND num.entity_id = n.nid', array(':node' => 'node'));
  $course_query->fields('num', array('field_course_catalog_number_value'));
  $course_query->leftJoin('field_data_field_course_subject', 's', 's.entity_type = :node AND s.entity_id = n.nid', array(':node' => 'node'));
  $course_query->fields('s', array('field_course_subject_value'));
  $course_query->leftJoin('field_data_field_course_section', 'sect', 'sect.entity_type = s.entity_type AND sect.entity_id = n.nid');
  $course_query->fields('sect', array('field_course_section_value'));
  $course_query->distinct();
  $course_query->orderBy('s.field_course_subject_value')
               ->orderBy('num.field_course_catalog_number_value')
               ->orderBy('sect.field_course_section_value');
  $course_query->distinct();
  $course_result = $course_query->execute()->fetchAll();
  $discipline_header = array(t('Discipline'),
                  t('# Registered'),
                  t('# Placed'),
                  t('% Placed'),
                  t('Hours'),
                  t('Evaluations'),
                  t('% Evaluations'),
                  );
  
  $course_header = array(t('Course'),
                          t('# Registered'),
                          t('# Placed'),
                          t('% Placed'),
                          t('Hours'),
                          t('Evaluations'),
                          t('% Evaluations'),
                          );
                  
  $discipline_rows = array();
  $course_rows = array();
  foreach($course_result as $course) {
    if(!isset($discipline_rows[$course->field_course_subject_value])) {
      $discipline_rows[$course->field_course_subject_value] = array($course->field_course_subject_value,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0);
    }
    $course_rows[$course->nid] = array($course->field_course_subject_value .' '. $course->field_course_catalog_number_value .' - '. $course->field_course_section_value,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0);
    $course_query = db_select('field_data_field_course', 'c')
			               ->condition('c.entity_type', 'node')
			               ->condition('c.bundle', 'signup')
			               ->condition('c.field_course_nid', $course->nid);
		$course_query->leftJoin('field_data_field_signup_hours', 'h', 'h.entity_type = c.entity_type AND h.entity_id = c.entity_id');
		$course_query->fields('h', array('field_signup_hours_value'));
		$course_query->leftJoin('field_data_field_form_evaluation_sid', 'e', 'e.entity_type = c.entity_type AND e.entity_id = c.entity_id');
		$course_query->fields('e', array('field_form_evaluation_sid_value'));
		$signups = $course_query->execute()->fetchAll();
		$enrollment = db_select('field_data_field_course_students', 's')
		                    ->condition('s.entity_type', 'node')
		                    ->condition('s.bundle', 'course')
		                    ->condition('s.entity_id', $course->nid)
		                    ->fields('s', array('field_course_students_uid'))
		                    ->countQuery()
		                    ->execute()
		                    ->fetchField();
		$discipline_rows[$course->field_course_subject_value][1] += $enrollment;
		$course_rows[$course->nid][1] = $enrollment;
		foreach($signups as $signup) {
  		$discipline_rows[$course->field_course_subject_value][2]++;
  		$course_rows[$course->nid][2]++;
  		$discipline_rows[$course->field_course_subject_value][4] += $signup->field_signup_hours_value;
  		$course_rows[$course->nid][4] += $signup->field_signup_hours_value;
  		if($signup->field_form_evaluation_sid_value) {
    		$discipline_rows[$course->field_course_subject_value][5]++;
    		$course_rows[$course->nid][5]++;
      }
		}
  }
  foreach($course_rows as &$row) {
    $row[3] = round((($row[2] / $row[1]) * 100), 1) .'%';
    $row[6] = round((($row[5] / $row[2]) * 100), 1) .'%';
  }
  foreach($discipline_rows as &$row) {
    $row[3] = round((($row[2] / $row[1]) * 100), 1) .'%';
    $row[6] = round((($row[5] / $row[2]) * 100), 1) .'%';
  }
  
  $output['discipline'] = array(
    '#type' => 'fieldset',
    '#title' => t('Course discipline'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $output['discipline']['table'] = array(
    '#markup' => theme('table', array('header' => $discipline_header, 'rows' => $discipline_rows)),
  );
  
  $output['courses'] = array(
    '#type' => 'fieldset',
    '#title' => t('Courses'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $output['courses']['table'] = array(
    '#markup' => theme('table', array('header' => $course_header, 'rows' => $course_rows)),
  );
  
  return array('totals' => $totals,
         'output' => $output,
        );
}

/**
 * Views access callback
 */
function s4_courses_views_check_faculty_access() {
  $node = node_load(arg(1));
  if ($node->type != 'course' || user_access('create signups for other users')) {
    return TRUE;
  }
  $faculty = field_get_items('node', $node, 'field_course_faculty');
  global $user;
  foreach($faculty as $instructor) {
    if ($instructor[0]['uid'] == $user->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Implements hook_permission
*/
function s4_courses_permission() {
  return array(
    'manage course students' => array(
      'title' => t('Manage (delete or edit signups) students in assigned courses'),
      'description' => t('Users can sign up other people who are in courses assigned to them as faculty.'),
    ),
  );
}