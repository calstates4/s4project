<?php

include_once('s4_core.features.inc');

/**
* Implements hook_init()
*/
function s4_core_init() {
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/jquery.quicksearch.js');
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/chosen/chosen/chosen.jquery.min.js');
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/s4.status.js');
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/s4.core.js');
  drupal_add_css(drupal_get_path('module', 's4_core') . '/js/chosen/chosen/chosen.css');
  drupal_add_css(drupal_get_path('module', 's4_core') . '/css/quicksearch.css');
  drupal_add_css(drupal_get_path('module', 's4_core') . '/css/status.css');
  drupal_add_css(drupal_get_path('module', 's4_core') . '/css/export.css');
}

/**
* Implements hook_block_info()
*/
function s4_core_block_info() {
  $blocks['user_progress'] = array('info' => 'User progress bar');
  $blocks['jump_to_node'] = array('info' => 'Jump to node');
  $blocks['site_list_course_restriction'] = array('info' => 'Site list course restrictions');
  $blocks['s4_user_login'] = array('info' => 'S4 Login options');
  $blocks['s4_user_login_message'] = array('info' => 'S4 Login message');
  $blocks['s4_page_notifications'] = array('info' => 'Pretty page subscriptions');
  $blocks['s4_add_new_site'] = array('info' => 'Add new site button');
  $blocks['s4_add_new_coordinator'] = array('info' => 'Add new coordinator button');
  $blocks['s4_report_export_link'] = array('info' => 'Export report link');
  $blocks['s4_subscribe_file_expiration'] = array('info' => 'Subscribe to file expiration link');
  $blocks['s4_current_user_link'] = array('info' => 'Logged-in user link');
  $blocks['s4_site_settings'] = array('info' => 'S4 site settings');
  $blocks['s4_welcome_message'] = array('info' => 'S4 Welcome Message');
  $blocks['s4_signup_forms'] = array('info' => 'S4 Signup form jump link');
  $blocks['s4_signup_error'] = array('info' => 'S4 Signup student error');
  return $blocks;
}

/**
* Implements hook_block_view
*/
function s4_core_block_view($delta) {
  module_load_include('inc', 's4_core', 's4_core.blocks');
  $function_name = 's4_core_block_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
  return NULL;
}

/**
 * Implements hook_field_extra_fields().
 */
function s4_core_field_extra_fields() {
  $extra['node']['signup']['display'] = array(
    's4_core_signup_submission' => array(
      'label' => t('Signup form submission'),
      'description' => t('Displays the results of the signup form.'),
      'weight' => 10,
      ),
    's4_core_evaluation_submission' => array(
      'label' => t('Student evaluation submission'),
      'description' => t('Displays the results of the evaluation completed by the student.'),
      'weight' => 10,
      ),
    's4_core_assessment_submission' => array(
      'label' => t('Assessment of student learning submission(s)'),
      'description' => t('Displays the results of the assessments of student learning.'),
      'weight' => 10,
      ),
  );

  $extra['node']['site']['display'] = array(
    's4_core_signup_select_site' => array(
        'label' => t('Signup for this site'),
        'description' => t('Provides a helpful link to signup with the site.'),
        'weight' => 10,
      ),
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function s4_core_node_view($node, $view_mode) {
  if ($node->type == 'signup') {
    $content = s4_webform_render_submission('field_form_signup_sid', $node);
    if ($content['content']) {
      $node->content['s4_core_signup_submission'] = array(
        '#type' => 'item',
        '#title' => t('Signup form'),
        '#markup' => $content['content'],
        );
    }
    $content = s4_webform_render_submission('field_form_evaluation_sid', $node);
    if ($content['content']) {
      $node->content['s4_core_evaluation_submission'] = array(
      '#type' => 'item',
      '#title' => t('Evaluation form'),
      '#markup' => $content['content'],
      );
    }
    $content = s4_webform_render_submission('field_form_assessment_sid', $node);
    if ($content['content']) {
      $node->content['s4_core_assessment_submission'] = array(
        '#type' => 'item',
        '#title' => t('Assessment forms'),
        '#markup' => $content['content'],
        );
    }
  }
  if ($node->type == 'site' && s4_core_user_can_signup()) {
    if (!s4_core_signup_access($node)) {
      $output = '<div class="signup denied"><div class="icon"></div>You can\'t sign up for this site.</div>';
    }
    else {
      $output = '<div class="signup"><div class="icon"></div>' .
            l(t('Signup for this site'), 's4/signup/site/' . $node->nid,
             array('attributes' => array('data-target' => 'status-site'))) . '</div>';
    }
    $node->content['s4_core_signup_select_site'] = array(
      '#type' => 'item',
      '#markup' => $output,
      );
  }
}

/**
*  Alter the masquerade form to be more user-friendly
*/
function s4_core_form_masquerade_block_1_alter(&$form, $form_state) {
  $form['masquerade_desc']['#markup'] = 'Enter the login ID of the user you want to switch to';
}

function s4_core_block_view_alter(&$data, $block) {
  if ($block->module == 'masquerade' && $block->delta == 'masquerade') {
    $data['subject'] = 'Switch users';
  }
}

/**
*  Compares the access restrictions of any object to the user's access
*  vis-a-vis a course or their individual settings.
*/
function s4_core_signup_access($node, $user = FALSE) {
  if (!$user) {
    global $user;
  }
  $user = user_load($user->uid);
  $user_access = field_get_items('user', $user, 'field_site_restrict');
  $node_access = field_get_items('node', $node, 'field_site_restrict');
  if (_s4_core_object_is_full($node)) {
    return FALSE;
  }
  if (!count($node_access) || !is_array($node_access)) {
    return TRUE;
  }
  foreach ($node_access as $key => $value) {
    $node_access[$key] = $value['tid'];
  }
  $user_access = ($user_access) ? $user_access : array();

  if (isset($_SESSION['s4_signup_course'])) {
    $course = node_load($_SESSION['s4_signup_course']);
    $course_access = field_get_items('node', $course, 'field_site_restrict');
    foreach ($course_access as $key => $access) {
      $user_access[] = $access;
    }
  }
  if (!$user_access || !count($user_access)) {
    return FALSE;
  }
  foreach ($user_access as $access) {
    if (in_array($access['tid'], $node_access)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns if an object (site or site staff) is already full.
 */
function _s4_core_object_is_full($node, $user = FALSE) {
  if (!$user) {
    global $user;
  }
  if (user_access('ignore maximum limits on site', $user)) {
    return FALSE;
  }
  $max = field_get_items('node', $node, 'field_signups_max');
  if (!$max[0]['value'] || $max[0]['value'] === 0) {
    return FALSE;
  }
  //@todo - change this to a dynamic query
  if ($node->type == 'site') {
    $count = db_query('select count(n.nid) as count FROM {node} n LEFT JOIN {field_data_field_signup_last_date} d ON d.revision_id = n.vid
LEFT JOIN {field_data_field_site} s ON s.revision_id = n.vid
WHERE n.created > :start AND d.field_signup_last_date_value > :end AND s.field_site_nid = :site_nid', array(':start' => time, ':end' => date('Y-m-d'), ':site_nid' => $node->nid));
  }
  if ($node->type == 'coordinator') {
    $count = db_query('select count(n.nid) as count FROM {node} n LEFT JOIN {field_data_field_signup_last_date} d ON d.revision_id = n.vid
LEFT JOIN {field_data_field_coordinator} s ON s.revision_id = n.vid
WHERE n.created > :start AND d.field_signup_last_date_value > :end AND s.field_coordinator_nid = :site_nid', array(':start' => time, ':end' => date('Y-m-d'), ':site_nid' => $node->nid));
    return FALSE;
  }
  $count = $count->fetchAssoc();
  if ($count['count'] >= $max[0]['value']) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Quick jump form callback.
 */
function s4_core_block_jump_form() {
  $form = array();

  $form['#attributes']['class'] = 'jump';

  $form['nid'] = array(
    '#type' => 'textfield',
    '#title' => 'Jump to a page',
    '#attributes' => array('placeholder' => 'Enter a number'),
    '#default_value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Jump',
    '#attributes' => array('class' => array('element-invisible')),
  );

  return $form;
}

/*function s4_core_block_jump_form_validate($form, &$form_state) {
  if (!node_load($form_state['values']['nid'])) {
    drupal_set_message('Could not find that number', 'error');
  }
}*/

function s4_core_block_jump_form_submit($form, &$form_state) {
  drupal_goto('node/' . $form_state['values']['nid']);
}

function s4_core_menu() {
  $items = array();

  $items['admin/config/s4'] = array(
    'title' => 'S4 configuration',
    'description' => 'General site configuration for S4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_form'),
    'file' => 's4_core.admin.inc',
    'position' => 'right',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/s4/settings'] = array(
    'title' => 'General configuration',
    'description' => 'General site configuration for S4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_form'),
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => -10,
  );

  $items['admin/config/s4/user-attributes'] = array(
    'title' => 'User attributes',
    'description' => 'Map additional user attributes like major to a profile field.',
    'page callback' => 's4_core_admin_user_attributes_list',
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => -9,
  );

  $items['admin/config/s4/user-attributes/list'] = array(
    'title' => 'User attributes',
    'description' => 'Map additional user attributes like major to a profile field.',
    'page callback' => 's4_core_admin_user_attributes_list',
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );

  $items['admin/config/s4/user-attributes/add'] = array(
    'title' => 'Add attribute',
    'description' => 'Add a new user attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_user_attributes_edit'),
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/s4/user-attributes/test'] = array(
    'title' => 'Test attributes',
    'description' => 'Test user attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_user_attributes_test'),
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/s4/user-attributes/edit/%'] = array(
    'title' => 'Edit attribute',
    'description' => 'Edit user attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_user_attributes_edit', 5),
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration')
  );

  $items['admin/config/s4/user-attributes/delete/%'] = array(
    'title' => 'Delete attribute',
    'description' => 'Delete user attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_admin_user_attributes_delete', 5),
    'file' => 's4_core.admin.inc',
    'access arguments' => array('administer site configuration')
  );

  $items['s4/signup/%/%'] = array(
    'title' => 'Signup',
    'description' => 'User signup callback',
    'page callback' => 's4_core_signup',
    'file' => 's4_core.pages.inc',
    'page arguments' => array(2, 3),
    'access arguments' => array('signup for service'),
  );

  $items['s4/course-list/%/%/%'] = array(
    'title' => 'Add to course',
    'description' => 'Adding a site to a course list',
    'page callback' => 's4_core_add_site_to_course',
    'file' => 's4_core.pages.inc',
    'page arguments' => array(2, 3, 4),
    'access callback' => 's4_core_add_site_to_course_access',
    'access arguments' => array(3),
  );

  $items['s4/evaluation/%node'] = array(
    'title' => 'Complete evaluation',
    'description' => 'Complete an evaluation of a site',
    'page callback' => 's4_core_signup_evaluation',
    'file' => 's4_core.pages.inc',
    'page arguments' => array(2),
    'access callback' => 's4_core_signup_evaluation_access',
    'access arguments' => array(2),
  );

  $items['s4/settings'] = array(
    'title' => 'Site settings',
    'page callback' => 's4_core_site_settings',
    'access arguments' => array('access s4 site settings'),
    'file' => 's4_core.pages.inc',
  );

  $items['signup/create/%'] = array(
    'title' => 'Create signup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_core_create_signup_form', 2),
    'access arguments' => array('create signups for other users'),
    'file' => 's4_core.pages.inc',
  );

  $items['signup/register/%/%'] = array(
    'title' => 'Complete site registration',
    'page callback' => 's4_core_student_signup_complete',
    'page arguments' => array(2),
    'access callback' => 's4_core_student_signup_complete_access',
    'access arguments' => array(2, 3),
    'file' => 's4_core.pages.inc',
  );
  
    
  $items['form'] = array(
    'title' => 'Sites',
    'page callback' => 's4_core_form_redirect',
    'access arguments' => array('access content'),
  );

  return $items;
}

function s4_core_form_redirect() {
  if(user_access('create webform content')) {
    drupal_goto('forms');
    return;
  }
  drupal_goto('forms/public');
}

function s4_core_student_signup_complete_access($signup, $key) {
  return (hash('sha256', $signup . drupal_get_hash_salt()) == $key);
}

/**
*  Indicates if the user is allowed to do an evaluation on a signup
*/
function s4_core_signup_evaluation_access($node) {
  global $user;
  $student = field_get_items('node', $node, 'field_user');
  return ($student[0]['uid'] == $user->uid);
}

/**
*  Checks whether the user is allowed to add a site to a course list
*/
function s4_core_add_site_to_course_access($course) {
  global $user;
  $course = node_load($course);
  $faculty_list = field_get_items('node', $course, 'field_course_faculty');
  foreach ($faculty_list as $faculty) {
    if ($faculty['uid'] == $user->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Implements hook_permission
*/
function s4_core_permission() {
  return array(
    'signup for service' => array(
      'title' => t('Sign up for service'),
      'description' => t('If unchecked, users of this role will never be able to register for sites regardless of any other settings.'),
    ),
    'ignore maximum limits on site' => array(
      'title' => t('Ignore max limits on sites'),
      'description' => t('If this user is creating a signup record, they can ignore the max limit on the site.'),
    ),
    'show input filter select menu' => array(
      'title' => t('Show input filter options'),
      'description' => t('Show the input filter options, normally these options are hidden from users.'),
    ),
    'get file expiration notifications' => array(
      'title' => t('Sign up for file expiration notifications'),
      'description' => t('Allow the user to receive notifications about files close to expiring'),
    ),
    'view all webform fields' => array(
      'title' => t('View all webform private fields'),
      'description' => t('Allows users to view information in "private" fields.'),
    ),
    'send bulk emails' => array(
      'title' => t('Send bulk emails'),
      'description' => t('Allows users to send bulk emails to users and site staff.'),
    ),
    'access s4 site settings' => array(
      'title' => t('Access S4 site settings'),
      'description' => t('Give access to general site setting help page'),
    ),
    'create signups for other users' => array(
      'title' => t('Create signup records for other users'),
      'description' => t('Allowed to create signup records for other people'),
    ),
    'override default field settings' => array(
      'title' => t('Override default field settings'),
      'description' => t('Override the normally protected default field settings'),
    ),
  );
}

/**
*  Function to test if the user is allowed to signup for service
*  This can be used to hide the signup process block
*/
function s4_core_user_can_signup($user = FALSE) {
  if (!$user) {
    global $user;
  }
  if (!user_access('signup for service', $user)) {
    return FALSE;
  }
  $programs = field_get_items('user', $user, 'field_site_restrict');
  if ((count($programs) && $programs[0]['tid']) || !module_exists('s4_courses')) {
    return TRUE;
  }
  if (module_exists('views')
     && module_exists('s4_courses')
     && $view = views_get_view_result('user_courses', 'block_2', $user->uid)) {
    $courses = array();
    $result = db_query('select f.entity_id, c.field_course_nid, p.field_max_placements_value FROM {field_data_field_user} f LEFT JOIN {node} n ON n.nid = f.entity_id LEFT JOIN {field_data_field_course} c ON c.entity_id = f.entity_id LEFT JOIN {field_data_field_max_placements} p ON p.entity_id = c.field_course_nid WHERE f.field_user_uid = :uid AND n.type = :type AND n.status = 1',
        array(':uid' =>  $user->uid,
              ':type' => 'signup'));
    foreach ($result as $row) {
      $courses[$row->field_course_nid]['count'] = ($courses[$row->field_course_nid]['count']) ?
      $courses[$row->field_course_nid] : 1;
      $courses[$row->field_course_nid]['max'] = $row->field_max_placements_value;
      $courses[$row->field_course_nid]['count']++;
    }
    foreach ($view as $row) {

      if ($courses[$row->nid]['count'] <= $courses[$row->nid]['max'] || $courses[$row->nid]['max'] == 0) {
        return TRUE;
      }
    }
    return FALSE;
  }
  return FALSE;
}

function s4_core_get_user_status() {

}

/**
*  Retrieves a list of the given uid's signup
*/
function s4_core_get_user_signups($uid) {
  $result = db_query('SELECT f.entity_id FROM {field_data_field_user} f
            LEFT JOIN {node} n ON n.nid = f.entity_id
            WHERE f.field_user_uid = :uid AND n.status = 1',
            array(':uid' => $uid));
  $signups = array();
  foreach ($result as $record) {
    $signups[$record->entity_id] = node_load($record->entity_id);
  }
  return $signups;
}

/**
*  Menu callback when the signup is completed
*/
function s4_core_user_signup_completed($sid = 0) {
  global $user;
  $signup = array('user' => $user->uid,
          'site' => $_SESSION['s4_signup_site'],
          'course' => $_SESSION['s4_signup_course'],
          'coordinator' => $_SESSION['s4_signup_coordinator'],
          'location' => $_SESSION['s4_signup_location'],
          'hours' => $_SESSION['s4_signup_hours'],
          'program' => $_SESSION['s4_signup_program'],
          'signup_sid' => $sid);
  _s4_core_create_signup($user->uid, $signup);
  unset($_SESSION['s4_signup_course']);
  unset($_SESSION['s4_signup_site']);
  unset($_SESSION['s4_signup_coordinator']);
  unset($_SESSION['s4_signup_hours']);
  unset($_SESSION['s4_signup_agreed']);
  unset($_SESSION['s4_signup_program']);
  unset($_SESSION['s4_core_viewed_downloadable_forms']);
  drupal_set_message(t('Congratulations, you are signed up!'));
  drupal_goto('<front>', array('query' => array('finished' => 'finished')));
}

function s4_core_student_signup_hours() {
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/s4.hours.js');
  $form = array();

  $form['hours'] = array(
    '#type' => 'textfield',
    '#title' => 'Please estimate the minimum number of hours you will serve at this site',
    '#description' => 'You will have a chance to correct this when you complete your site evaluation, but it is helpful for us to know a rough estimate before you start your service.',
    '#attributes' => array('class' => array('hours-field')),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

function s4_core_student_signup_hours_validate($form, $form_state) {
  if (!is_numeric($form_state['values']['hours'])) {
    form_set_error('hours', 'You should just enter a number for your hours.');
  }
}

function s4_core_student_signup_hours_submit($form, $form_state) {
  $_SESSION['s4_signup_hours'] = $form_state['values']['hours'];
}

/**
*  Helper function to create a signup node
*/
function _s4_core_create_signup($uid = 0, $signup = array()) {
  global $user;
  // backfill some default values;
  $signup += array('user' => $user->uid,
           'site' => 0,
           'course' => 0,
           'coordinator' => 0,
           'location' => 0,
           'signup_sid' => 0,
           'hours' => 0,
           'program' => 0,
           'cc_faculty' => FALSE,
           );
  $node = new stdClass();
  $node->type = 'signup';
  node_object_prepare($node);
  $node->uid = ($uid)
           ? $uid
           : $user->uid;
  $node->language = LANGUAGE_NONE;
  $node->field_user[$node->language][0]['uid'] = $signup['user'];
  $node->field_site[$node->language][0]['nid'] = $signup['site'];
  if($signup['course']) {
    $node->field_course[$node->language][0]['nid'] = $signup['course'];
  }
  $node->field_coordinator[$node->language][0]['nid'] = $signup['coordinator'];
  $node->field_form_signup_sid[$node->language][0]['value'] = $signup['signup_sid'];
  $node->field_signup_hours[$node->language][0]['value'] = $signup['hours'];
  if ($signup['program']) {
    if(is_array($signup['program'])) {
      foreach($signup['program'] as $tid => $name) {
        $node->field_site_restrict[$node->language][] = array('tid' => $tid);
      }
    }
    else {
      $node->field_site_restrict[$node->language][0]['tid'] = $signup['program'];
    }
  }
  if ($signup['location']) {
    $node->field_signup_location[$node->language][0]['lid'] = $signup['location'];
  }
  $start_date = array(0 => time());
  $end_date = array(0 => time() + ((24 * 60 * 60) * variable_get('s4_core_default_service_length', 100)));
  foreach (module_implements('s4_signup_dates') as $module) {
    $function = $module . '_s4_signup_dates';
    $date = $function($node);
    if (is_array($date)) {
      $start_date[$date['start_date']['weight']] = $date['start_date']['date'];
      $end_date[$date['end_date']['weight']] = $date['end_date']['date'];
    }
  }
  ksort($start_date);
  ksort($end_date);
  $start_date = array_pop($start_date);
  $end_date = array_pop($end_date);
  $node->field_signup_last_date[$node->language][0]['value'] = date('Y-m-d', $end_date);

  $node->field_signup_start_date[$node->language][0]['value'] = date('Y-m-d', $start_date);
  node_save($node);
  $node->title = t('Signup #!nid', array('!nid' => $node->nid));
  node_save($node);
  if($node->field_site_restrict[$node->language][0]['tid']) {
    $program = taxonomy_term_load($node->field_site_restrict[$node->language][0]['tid']);
    $email_fields = array('field_confirmation_send_email',
                          'field_confirmation_subject',
                          'field_confirmation_email',
                          'field_confirmation_email_sender');
    foreach($email_fields as $field) {
      $$field = field_get_items('taxonomy_term', $program, $field);
    }
    if($field_confirmation_send_email[0]['value']) {
      $signup_user = user_load($node->field_user[$node->language][0]['uid']);
      $params['body'] = $field_confirmation_email[0]['value'];
      $params['subject'] = $field_confirmation_subject[0]['value'];
      $params['signup'] = $node;
      $params['program'] = $program;
      $params['site_staff'] = node_load($signup['coordinator']);
      $params['site'] = node_load($node->field_site[$node->language][0]['nid']);
      if($node->field_course[$node->language][0]['nid']) {
        $params['course'] = node_load($node->field_course[$node->language][0]['nid']);
      }
      $sender = ($field_confirmation_email_sender[0]['email'])
                ? $field_confirmation_email_sender[0]['email']
                : variable_get('site_mail', '');
      $params['cc'] = array();
      if($signup['cc_faculty'] && $signup['course']) {
        $course = node_load($signup['course']);
        $faculty = field_get_items('node', $course, 'field_course_faculty');
        foreach($faculty as $instructor) {
          $user = user_load($instructor['uid']);
          $params['cc'][$user->uid] = $user->mail;
        }
        
      }
      drupal_mail('s4_core', 'signup_confirmation', $signup_user->mail, $node->language, $params, $sender);
    }
  }
  return $node;
}


/**
* Implements hook_webform_submission_insert
*  Here we check that this is the last step of the signup
*  process and if so, fire off the completed function
*/
function s4_core_webform_submission_insert($node, $submission) {
  if (isset($_SESSION['s4_signup_site'])) {
    $site = node_load($_SESSION['s4_signup_site']);
    $forms = field_get_items('node', $site, 'field_site_signup_group');
    foreach($forms as $form) {
      $form = field_collection_item_load($form['value']);
      $webform = field_get_items('field_collection_item', $form, 'field_site_form');
      if ($node->nid == $webform[0]['nid']) {
        s4_core_user_signup_completed($submission->sid);
      }
    }
  }
  if (isset($_SESSION['s4_core_site_eval_signup'])) {
    $signup = node_load($_SESSION['s4_core_site_eval_signup']);
    if ($signup) {
      $signup->field_form_evaluation_sid[$node->language][0]['value'] = $submission->sid;
      node_save($signup);
    }
    unset($_SESSION['s4_core_site_eval_signup']);
    drupal_set_message(t('Thanks for your evaluation. We will be using this to improve the experience for future students.'));
    drupal_goto('<front>');
  }
  if (isset($_SESSION['s4_core_student_signup_complete'])) {
    $signup = node_load($_SESSION['s4_core_site_eval_signup']);
    if ($signup) {
      $signup->field_form_signup_sid[$node->language][0]['value'] = $submission->sid;
      node_save($signup);
    }
    unset($_SESSION['s4_core_student_signup_complete']);
    drupal_goto('<front>');
  }
}

/**
* Implements hook_user_login
*/
function s4_core_user_login(&$edit, $account) {
  $sis_user = module_invoke_all('s4_get_user', $account->name);
  s4_core_create_user($sis_user, $account);
}

/**
*  Callback to create a user account
*/
function s4_core_create_user($sis_user, $user = FALSE) {
  if (!$sis_user) {
    return FALSE;
  }
  $query = db_select('users', 'u')
         ->condition('u.name', $sis_user['login_id'])
         ->fields('u', array('uid'));
  $uid = $query->execute()->fetchField();
  if ($uid) {
    $user = user_load($uid);
  }
  if (!$user) {
    $user = new stdClass();
    $user->name = $sis_user['login_id'];
    $user->status = 1;
  }
  $values = _s4_core_map_user_attributes();
  $save = FALSE;
  foreach ($values as $sis_field => $field) {
    $current = field_get_items('user', $user, $field);
    if (isset($sis_user[$sis_field]) && $current[0]['value'] != $sis_user[$sis_field]) {
      $save[$field]['und'][0]['value'] = $sis_user[$sis_field];
    }
  }
  if ($user->mail != $sis_user['email']) {
    $save['mail'] = $sis_user['email'];
  }
  if ($save) {
    watchdog('s4', 'User @user updated with new information', array('@user' => $user->name));
    $user = user_save($user, $save);
  }
  return $user;
}

/**
*  Helper function to find an entity using it's unique hash
*  This is helpful when processing SIS integration data
*/
function s4_core_get_entity($data, $type, $id_only = FALSE) {
  $hash = s4_core_make_hash($data, $type);
  $entity = db_query('SELECT entity_id, entity_type from {s4_core_entity_data}
            WHERE unique_id = :hash',
            array(':hash' => $hash));
  $entity_id = $entity->fetchField();
  if (!$entity_id) {
    return FALSE;
  }
  if ($id_only) {
    return $entity_id;
  }
  if ($type == 'user') {
    return user_load($entity_id);
  }
  return node_load($entity_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function s4_core_form_taxonomy_form_term_alter(&$form) {

  if (module_exists('token')) {
    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('s4_signup', 'user'),
      '#weight' => $form['field_confirmation_email']['#weight'] + 1,
    );
  }
}

/**
* Implements hook_node_insert
*/
function s4_core_node_insert($node) {
  if (isset($node->s4_unique_id)) {
    db_insert('s4_core_entity_data')
        ->fields(array(
              'entity_id'   => $node->nid,
              'entity_type' => 'node',
              'unique_id'   => $node->s4_unique_id
        ))
        ->execute();
  }
  if ($node->type == 'signup') {
    $user = field_get_items('node', $node, 'field_user');
    $user = user_load($user[0]['uid']);
    if ($user->mail) {
       $site = field_get_items('node', $node, 'field_site');
       $site = node_load($site[0]['nid']);
       $form = field_get_items('node', $site, 'field_');
       $sid = field_get_items('node', $node, 'field_form_assessment_sid');
       if ($form[0]['nid'] && !$sid[0]['value']) {
           $body_message = t('<p><strong>You have not completed your registration until you complete the following form:</strong></p>');
           $body_message .= '<p>' . url('signup/register/' . $node->nid . '/' . hash('sha256', $node->nid . drupal_get_hash_salt()), array('absolute' => TRUE)) . '</p>';
       }
       $program = field_get_items('node', $node, 'field_site_restrict');
       if($program[0]['tid']) {
        $term = taxonomy_term_load($program[0]['tid']);
        $email_subject = field_get_items('taxonomy_term', $term, 'field_confirmation_subject');
        $email_body = field_get_items('taxonomy_term', $term, 'field_confirmation_email');
        if($email_subject[0]['value'] && $email_body[0]['value']) {
          $context['subject'] = $email_subject[0]['value'];
          $context['body'] = $email_body[0]['value'];
          drupal_mail('s4_core', 'action_send_email', $user->mail, language_default(), $context);
        }
       }
    }
  }
}

/**
* Implements hook_node_delete
*/
function s4_core_node_delete($node) {
  if ($node->type == 'signup') {
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $signup_sid = field_get_items('node', $node, 'field_form_signup_sid');
    $eval_sid = field_get_items('node', $node, 'field_form_evaluation_sid');

    $site = field_get_items('node', $node, 'field_site');
    if($site[0]['nid']) {
      $site = node_load($site[0]['nid']);

      $site_form = field_get_items('node', $site, 'field_site_form');
      if ($site_form[0]['nid']) {
        $site_form = node_load($site_form[0]['nid']);
        webform_submission_delete($site_node, $signup_sid);
      }

      $eval_form = field_get_items('node', $site, 'field_site_eval_form');
      if ($eval_form[0]['nid']) {
        $eval_form = node_load($eval_form[0]['nid']);
        webform_submission_delete($eval_form, $eval_sid);
      }
    }
  }
}

/**
*  Returns a unique hash code for a given object
*/
function s4_core_make_hash($object, $type) {
  switch ($type) {
    case 'term':
      return md5($object['term_code']);
    case 'course':
      return md5($object['term'] . $object['subject'] . $object['catalog_number'] . $object['section']);
    case 'user':
      return md5($object['user_id']);
  }
}

function _s4_core_map_user_attributes() {
  $mapping = array(
        'first_name' => 'field_first_name',
        'last_name' => 'field_last_name',
        'user_id' => 'field_sis_user_id',
        'constant_registration' => 'field_course_ignore',
  );
  return array_merge($mapping, variable_get('s4_core_user_attribute_mappings', array()));
}

/**
* Implements hook_element_info_alter
*  So we can go ahead and remove input filter notices
*/
function s4_core_element_info_alter(&$type) {
  // Change text format processing on elements to our version.
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 's4_core_filter_process_format';
      }
    }
  }
}

/**
*  Callback to hide some of the input filter formatting
*/
function s4_core_filter_process_format($element) {
  global $user;

  $show_selection = TRUE;
  if (isset($element['#entity_type'])) {
    $show_selection  = user_access('show input filter select menu');
  }
  $show_tips       = FALSE;
  $show_tips_link  = FALSE;

  // Ensure that children appear as subkeys of this element.
  $element['#tree'] = TRUE;
  $blacklist = array(
    // Make form_builder() regenerate child properties.
    '#parents',
    '#id',
    '#name',
    // Do not copy this #process function to prevent form_builder() from
    // recursing infinitely.
    '#process',
    // Description is handled by theme_text_format_wrapper().
    '#description',
    // Ensure proper ordering of children.
    '#weight',
    // Properties already processed for the parent element.
    '#prefix',
    '#suffix',
    '#attached',
    '#processed',
    '#theme_wrappers',
  );
  // Move this element into sub-element 'value'.
  unset($element['value']);
  foreach (element_properties($element) as $key) {
    if (!in_array($key, $blacklist)) {
      $element['value'][$key] = $element[$key];
    }
  }

  $element['value']['#type'] = $element['#base_type'];
  $element['value'] += element_info($element['#base_type']);

  // Turn original element into a text format wrapper.
  $path = drupal_get_path('module', 'filter');
  $element['#attached']['js'][] = $path . '/filter.js';
  $element['#attached']['css'][] = $path . '/filter.css';

  // Setup child container for the text format widget.
  $element['format'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('class' => array('filter-wrapper')),
  );

  // Use the default format for this user if none was selected.
  if (!isset($element['#format'])) {
    $element['#format'] = filter_default_format($user);
  }

  // Prepare text format guidelines.
  $element['format']['guidelines'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('filter-guidelines')),
    '#weight' => 20,
  );
  // Get a list of formats that the current user has access to.
  $formats = filter_formats($user);
  $options = array();
  foreach ($formats as $format) {
    // If not showing selection remove all formats except default.
    if ($format->format !== $element['#format'] && !$show_selection) {
      continue;
    }
    $options[$format->format] = $format->name;
    if ($show_tips) {
      $element['format']['guidelines'][$format->format] = array(
        '#theme' => 'filter_guidelines',
        '#format' => $format,
      );
    }
  }

  $element['format']['format'] = array(
    '#type' => 'select',
    '#title' => t('Text format'),
    '#options' => $options,
    '#default_value' => $element['#format'],
    '#access' => $show_selection ? count($formats) > 1 : FALSE,
    '#weight' => 10,
    '#attributes' => array('class' => array('filter-list')),
    '#parents' => array_merge($element['#parents'], array('format')),
  );

  if ($show_tips_link) {
    $element['format']['help'] = array(
      '#type' => 'container',
      '#theme' => 'filter_tips_more_info',
      '#attributes' => array('class' => array('filter-help')),
      '#weight' => 0,
    );
  }

  // Hide fieldset if not showing selector or tips.
  if (!$show_selection) {
    $element['format']['#attributes']['class'][] = 'element-invisible';
  }

  $all_formats = filter_formats();
  $format_exists = isset($all_formats[$element['#format']]);
  $user_has_access = isset($formats[$element['#format']]);
  $user_is_admin = user_access('administer filters');

  // If the stored format does not exist, administrators have to assign a new
  // format.
  if (!$format_exists && $user_is_admin) {
    $element['format']['format']['#required'] = TRUE;
    $element['format']['format']['#default_value'] = NULL;
    // Force access to the format selector (it may have been denied above if
    // the user only has access to a single format).
    $element['format']['format']['#access'] = TRUE;
  }
  // Disable this widget, if the user is not allowed to use the stored format,
  // or if the stored format does not exist. The 'administer filters' permission
  // only grants access to the filter administration, not to all formats.
  elseif (!$user_has_access || !$format_exists) {
    // Overload default values into #value to make them unalterable.
    $element['value']['#value'] = $element['value']['#default_value'];
    $element['format']['format']['#value'] = $element['format']['format']['#default_value'];

    // Prepend #pre_render callback to replace field value with user notice
    // prior to rendering.
    $element['value'] += array('#pre_render' => array());
    array_unshift($element['value']['#pre_render'], 'filter_form_access_denied');

    // Cosmetic adjustments.
    if (isset($element['value']['#rows'])) {
      $element['value']['#rows'] = 3;
    }
    $element['value']['#disabled'] = TRUE;
    $element['value']['#resizable'] = FALSE;

    // Hide the text format selector and any other child element (such as text
    // field's summary).
    foreach (element_children($element) as $key) {
      if ($key != 'value') {
        $element[$key]['#access'] = FALSE;
      }
    }
  }

  return $element;
}

/**
* Implements hook_action_info
*/
function s4_core_action_info() {
  return array(
    's4_core_email_site_coordinator_action' => array(
        'type' => 'system',
        'label' => t('Send site staff e-mail'),
        'configurable' => TRUE,
        'triggers' => array('any'),
      ),
      's4_core_email_user_action' => array(
        'type' => 'system',
        'label' => t('Send user e-mail'),
        'configurable' => TRUE,
        'triggers' => array('any'),
      ),
      's4_core_email_site_action' => array(
        'type' => 'system',
        'label' => t('Send email to site'),
        'configurable' => TRUE,
        'behavior' => array('sends_notification'),
        'triggers' => array('document_expiration'),
      ),
      's4_core_document_about_to_expire_action' => array(
        'type' => 'notifications',
        'label' => t('Send notifications about document close to expiration date'),
        'configurable' => FALSE,
        'behavior' => array('sends_notification'),
        'triggers' => array('document_expiration'),
      ),
  );
}

/**
*  Action to send an email to the selected user
*/
function s4_core_email_user_action($entity, $context) {
  
  $reply_to = (valid_email_address($context['reply_to']))
              ? $context['reply_to']
              : variable_get('site_mail', '');
  drupal_mail('s4_core', 'action_send_email', $entity->mail, language_default(), $context, $reply_to);
}

function s4_core_email_site_action($entity, $context) {
  $email = field_get_items('node', $entity, 'field_site_email');
  if(!$email[0]['email']) {
    return;
  }
  $reply_to = (valid_email_address($context['reply_to']))
              ? $context['reply_to']
              : variable_get('site_mail', '');
  drupal_mail('s4_core', 'action_send_email', $email[0]['email'], language_default(), $context, $reply_to);
}


/**
 * Form callback for s4_core_email_site_action
 */
function s4_core_email_site_action_form($context) {
  return s4_core_email_site_coordinator_action_form($context);
}

/**
*  Form submit callback for s4_core_email_user_action
*/
function s4_core_email_site_action_submit($form, $form_state) {
  return s4_core_email_site_coordinator_action_submit($form, $form_state);
}

/**
*  Form callback for s4_core_email_user_action
*/
function s4_core_email_user_action_form($context) {
  return s4_core_email_site_coordinator_action_form($context);
}

/**
*  Form submit callback for s4_core_email_user_action
*/
function s4_core_email_user_action_submit($form, $form_state) {
  return s4_core_email_site_coordinator_action_submit($form, $form_state);
}

/**
*  Action to send an email to the selected site coordinator
*/
function s4_core_email_site_coordinator_action($entity, $context) {
  $email = field_get_items('node', $entity, 'field_email');
  if (!$email[0]['email']) {
    return NULL;
  }
  $reply_to = (valid_email_address($context['reply_to']))
              ? $context['reply_to']
              : variable_get('site_mail', '');
  drupal_mail('s4_core', 'action_send_email', $email[0]['email'], language_default(), $context, $reply_to);
}

/**
*  Form callback for s4_core_email_site_coordinator_action
*/
function s4_core_email_site_coordinator_action_form($context) {
  // Set default values for form.
  if (!isset($context['recipient'])) {
    $context['recipient'] = '';
  }
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }
  if (!isset($context['reply_to'])) {
    $context['reply_to'] = variable_get('site_mail', '');
  }
  $form['reply_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Reply-to email'),
    '#default_value' => $context['reply_to'],
    '#maxlength' => '254',
    '#description' => t('The email address users will see when viewing or replying to the message.'),
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#format' => NULL,
    '#cols' => '80',
    '#rows' => '15',
  );

  if (module_exists('token')) {
    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }

  return $form;
}

/**
 * Process s4_core_email_site_coordinator_action form submissions.
 */
function s4_core_email_site_coordinator_action_submit($form, $form_state) {
  $params = array(
    'subject'   => $form_state['values']['subject'],
    'message'   => $form_state['values']['message'],
    'reply_to'  => $form_state['values']['reply_to'],
  );
  return $params;
}

/**
* Implements hook_mail
*/
function s4_core_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Transfer-Encoding'] = '8Bit';
  switch ($key) {
    case 'action_send_email':
      $message['subject'] = $params['subject'];
      $message['body'][] = check_markup($params['message']['value'], $params['message']['format']);
      break;
    case 'signup_confirmation':
      $message['subject'] = $params['subject'];
      $body = token_replace($params['body'], array('s4_site_staff' => $params['site_staff'],
                                                   's4_course' => $params['course'],
                                                   's4_signup' => $params['signup'],
                                                   's4_site' => $params['site']));
      $message['body'][] = $body;
      if($params['cc']) {
        $message['headers']['Cc'] = implode(', ', $params['cc']);
      }
      break;
  }
}

/**
*  Alter menu access to restrict certain fields form being deleted or edited.
*/
function s4_core_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          if (isset($bundle_info['admin'])) {
            // Extract path information from the bundle.
            $path = $bundle_info['admin']['path'];
            $items["$path/fields/%field_ui_menu"]['access callback'] = 's4_core_field_alter_access';
            $items["$path/fields/%field_ui_menu"]['access arguments'] = array(4, 6);
            $items["$path/fields/%field_ui_menu/edit"]['access callback'] = 's4_core_field_alter_access';
            $items["$path/fields/%field_ui_menu/edit"]['access arguments'] = array(4, 6);
            $items["$path/fields/%field_ui_menu/delete"]['access callback'] = 's4_core_field_alter_access';
            $items["$path/fields/%field_ui_menu/delete"]['access arguments'] = array(4, 6);
        }
      }
    }
  }
}

/**
 * Returns whether a given site has downloadable forms.
 */
function s4_core_site_has_downloadable_forms($node) {
  $taxonomy = field_get_items('node', $node, 'field_site_restrict');
  $terms = array();
  foreach ($taxonomy as $term) {
    $terms[] = $term['tid'];
  }
  if (!count($terms)) {
    return FALSE;
  }
  $forms = db_select('field_data_field_site_restrict', 'r')
           ->fields('r', array('entity_id'))
           ->condition('bundle', 'downloadable_form')
           ->condition('field_site_restrict_tid', $terms, 'IN')
           ->execute()
           ->fetchAllKeyed(0, 0);
  return (count($forms)) ? $terms : FALSE;
}

function s4_core_program_has_downloadable_forms($tid) {
  if(!$tid) {
    return;
  }
  $forms = db_select('field_data_field_site_restrict', 'r')
           ->fields('r', array('entity_id'))
           ->condition('bundle', 'downloadable_form')
           ->condition('field_site_restrict_tid', $tid)
           ->execute()
           ->fetchAllKeyed(0, 0);
  return (count($forms)) ? $terms : FALSE;
}

/**
*  Checks whether a field in a given bundle is allowed to be edited
*/
function s4_core_field_alter_access($type, $field) {
  if (!user_access('administer content types')) {
    return FALSE;
  }
  if (user_access('override default field settings')) {
    return TRUE;
  }
  static $access_list;
  if (!$access_list) {
    $access_list = module_invoke_all('s4_field_access');
  }
  foreach ($access_list as $bundle => $fields) {
    foreach ($fields as $field_name) {
      if ($bundle == $type && $field_name == $field) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
*  Implementation of s4_core_field_access
*/
function s4_core_s4_field_access() {

  return array('signup' => array(
            'field_site',
            'field_coordinator',
            'field_course',
            'field_user',
            'field_form_signup_sid',
            'field_form_evaluation_sid',
            'field_signup_hours',
            'field_signup_start_date',
            'field_signup_last_date',
            'field_signup_location',
        ),

  );
}

/**
*  Override the node field page to restrict access to certain fields
*/
function s4_core_form_field_ui_field_overview_form_alter(&$form, $form_state) {
  foreach ($form['fields'] as $field_name => $field) {
    if (!s4_core_field_alter_access($form['#bundle'], $field_name)) {
      $form['fields'][$field_name]['edit'] = array();
      $form['fields'][$field_name]['delete'] = array();
    }
  }
}

/**
* Implements hook_form_alter()
*  We are overriding the views bulk operations to change the display of the fieldset
*/
function s4_core_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'views_form_') !== FALSE && isset($form['views_bulk_operations'])) {
    $form['#pre_render'][] = 's4_core_views_bulk_operations_pre_render';
  }
  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    drupal_add_css(drupal_get_path('module', 's4_core') . '/css/status.css');
    foreach ($form['#node']->webform['components'] as $component) {
      if ($component['extra']['s4_core_field_private']) {
        $form['submitted'][$component['form_key']]['#title'] .= '<div class="private-label">Private - this question will not be viewable by your faculty member.</div>';
      }
    }
  }
}

/**
*  Implementation of hook_form_FORM_ID_alter
*  Here we're adding a checkbox to make this field private
*/
function s4_core_form_webform_component_edit_form_alter(&$form, $form_state) {
  $form['display']['s4_core_field_private'] = array(
    '#type' => 'checkbox',
    '#title' => 'Contents of this field are private and only viewable by trusted users',
    '#description' => 'When checked, only users who have permission to view private fields, or people viewing their own information, can see the contents of this field.',
    '#default_value' => $form_state['build_info']['args'][1]['extra']['s4_core_field_private'],
  );
}

function s4_core_webform_component_presave(&$component) {
  if ($component['display'] && array_key_exists('s4_core_field_private', $component['display'])) {
    $component['extra']['s4_core_field_private'] = $component['display']['s4_core_field_private'];
  }
}

/**
*  Add some JavaScript to the node file form page
*  to support different default dates and also
*  disable ceratin fields
*/
function s4_core_form_file_node_form_alter(&$form, $form_state) {
  drupal_add_js(drupal_get_path('module', 's4_core') . '/js/s4.node-file.js');
  foreach ($form['field_file_category'][$form['#node']->language]['#options'] as $tid => $taxonomy) {
    $term = taxonomy_term_load($tid);
    try {
      $days = field_get_items('taxonomy_term', $term, 'field_type_reminder_days');
      $reminders[$tid] = $days[0]['value'];
  }
  catch (Exception $e) {
    $reminders[$tid] = 30;
  }
  }
  drupal_add_js(array('file_category_reminders' => array('days' => $reminders,
            'node_exists' => ($form['#node']->nid) ? TRUE : FALSE)),
          'setting');
}

/**
*  Addes an additional class to hide the bulk operations fieldset
*/
function s4_core_views_bulk_operations_pre_render(&$form, $form_state = NULL) {
  if (isset($form['select'])) {
    $form['select']['#attributes']['class'][] = 'view-bulk-operations-wrapper';
  }
  return $form;
}

/**
* Implements hook_form_*_alter()
*  Altering the views exposed form on the serach
*  view to add placeholders as well as hiding the search button.
*/
function s4_core_form_views_exposed_form_alter(&$form, $form_state) {
  if ($form['#id'] == 'views-exposed-form-s4-search-page') {
    $form['keys']['#attributes']['placeholder'] = 'Search';
    $form['submit']['#attributes']['class'][] = 'element-invisible';
  }
}

/**
* Implements hook_theme_registry_alter()
*/
function s4_core_theme_registry_alter(&$items) {
  $items['views_savedsearches_list'] = array(
      'arguments' => array('view', 'current_view_matches_sid'),
      'function' => 'theme_s4_core_views_savedsearches_list',
    );
}

/**
*  Theme override for username so we can use first and last name
*/
function s4_core_preprocess_username(&$variables) {
  $user = user_load($variables['uid']);
  $variables['name'] = s4_core_get_user_full_name($user);
}

function s4_core_get_user_full_name($user) {
  $first_name = field_get_items('user', $user, 'field_first_name');
  $last_name = field_get_items('user', $user, 'field_last_name');
  return  ($first_name[0]['value'] && $last_name[0]['value'])
        ? $first_name[0]['value'] . ' ' . $last_name[0]['value']
        : $variables['name'];
}

/**
*  Override the views saved searches form to remove the fieldset on certain
*  pages and also rewrite the output
*/
function theme_s4_core_views_savedsearches_list($variables) {
  global $user;
  $view = $variables['view'];
  $current_view_matches_sid = $variables['current_view_matches_sid'];
  $output = '';

  // Load saved searches for the current user, to use them as form options.
  if (user_access('use all savedsearches')) {
    $saved_searches = views_savedsearches_load_multiple(NULL, $view->vid, $view->name);
  }
  else{
    $saved_searches = views_savedsearches_load_multiple($user->uid, $view->vid, $view->name);
  }
  $options = _views_savedsearches_saved_searches_to_form_options($saved_searches, $view->get_path(), $current_view_matches_sid);

  // Display a list of saved searches (if there are any) and allow the user to
  // delete any of them.
  if (count($options)) {
    $output .= drupal_render(drupal_get_form('views_savedsearches_delete_search_form', $view, $options, $current_view_matches_sid));
  }
  else {
    $output .= '<p>' . t('You have not saved any searches yet - when you perform a search, you will have the option to save it for the future here.') . '</p>';
  }

  return $output;
}

/**
* Implements hook_cron()
*  Here we check on any signups which have expired and send out emails
*/
function s4_core_cron() {
  $last_date = variable_get('s4_core_file_expiration_last_notice', time() - (7 * 24 * 60 * 60));
  $query = db_select('field_data_field_expiration_reminder', 'r')
         ->fields('r', array('entity_id'))
         ->condition('field_expiration_reminder_value', 1);
  $query->leftJoin('field_data_field_expiration_reminder_date', 'd', 'd.entity_id = r.entity_id');
  $query->fields('d', array('field_expiration_reminder_date_value'))
      ->condition('field_expiration_reminder_date_value', date('Y-m-d', $last_date), '>=')
      ->condition('field_expiration_reminder_date_value', date('Y-m-d'), '<=')
      ->orderBy('field_expiration_reminder_date_value', 'DESC');

  $result = $query->execute();
  foreach ($result as $r) {
    $node = node_load($r->entity_id);
    _trigger_node($node, 'document_expiration');
  }
  variable_set('s4_core_file_expiration_last_notice', time());
}


/**
 * Helper function to retrieve the correct form for a student.
 */
function s4_core_get_site_form($site, $term) {
  
}


function s4_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 's4_signup') {
    $program = field_get_items('node', $data['s4_signup'], 'field_site_restrict');
    if($program) {
      $forms_view = views_get_view('site_forms');
      $forms_view->set_arguments(array($program[0]['tid']));
      $forms_view->set_display('page_3');
      $forms_view->execute();
      $replacements['[s4_signup:program_forms]'] = $forms_view->render();
    }
  }
  if($type == 's4_site') {
    $replacements['[s4_site:site_name]'] = $data[$type]->title;
  }
  if(is_object($data[$type]) && property_exists($data[$type], 'type')) {
    $entity = clone $data[$type];
    list($id, $vid, $bundle) = entity_extract_ids('node', $entity);
    $fields = field_info_instances('node', $bundle);

    foreach ($fields as $field_name => $field_instance) {
      if (empty($entity->{$field_name})) {
        continue;
      }
      $field_token_name = strtr($field_name, '_', '-');
      // Replace the [entity:field-name] token.
      $original = $tokens[$field_token_name];
      if($original) {
        $field_output = field_view_field('node', $entity, $field_name);
        $output = array();
        foreach (element_children($field_output) as $key) {
          $output[$key] = $field_output[$key];
        }
        $replacements[$original] = render($output);
      }
    }
    unset($entity);
  }
  return $replacements;
}

function s4_core_token_info() {
  $types = array('s4_signup' => array(
      'name' => t('Student signup record'),
      'description' => t('Tokens related to a student\'s signup record.'),
    ),
    's4_site_staff' => array(
      'name' => t('Student site staff'),
      'description' => t('Tokens related to a student\'s chosen site staff.'),
    ),
    's4_course' => array(
      'name' => t('Student course'),
      'description' => t('Tokens related to a student\'s course.'),
    ),
    's4_site' => array(
      'name' => t('Student site'),
      'description' => t('Tokens related to the site the student signed up with.'),
    ),
  );

    $tokens['s4_site']['site_name'] = array('name' => t('Site name'),
                       'description' => t('The name of the site'),
                       'module' => 's4_core');
    $tokens['s4_signup']['evaluation_link'] = array('name' => t('Evaluation link'),
                       'description' => t('A link to the user\'s site evaluation'),
                       'module' => 's4_core');
    $tokens['s4_signup']['program_forms'] = array('name' => t('Program forms'),
                       'description' => t('A list of downloadable forms related to the program'),
                       'module' => 's4_core');
    
    $fields = field_info_fields();
    $instances = field_info_instances();
    $bundle_tokens = array('coordinator' => 's4_site_staff',
                           'site' => 's4_site',
                           'course' => 's4_course',
                           'signup' => 's4_signup');
    
    foreach ($fields as $field_name => $field) {
      if (!empty($field['bundles'])) {
        foreach ($field['bundles'] as $entity_key => $entity) {
          if($entity_key == 'node') {
            foreach($entity as $entity_type) {
              if($bundle_tokens[$entity_type]) {
                $field_token_type = strtr($field['type'], '_', '-') . '-field';
                $field_token_name = strtr($field_name, '_', '-');
                $tokens[$bundle_tokens[$entity_type]][$field_token_name] = array(
                  // @todo How the &#!% do we figure out what this token should be
                  // named when each bundle can have a different label???
                  'name' => $field_token_name,
                  'description' => '',
                  'module' => 's4_core',
                );
              }
            }   
          }
        }
      }
    }
    return array(
      'types' => $types,
      'tokens' => $tokens,
    );
}

/**
* Implements hook_notifications
*/
function s4_core_notifications($op) {
  switch ($op) {
    case 'subscription types':
      $types['document_expiration'] = array(
        'title' => t('Document expiration'),
        'class' => 'Notifications_Document_Expiration',
        'object_types' => array('node_type'),
        'access' => array('subscribe to content'),
        'description' => t('Subscribe to notifications when documents are about to expire.'),
        'display_options' => array('node_links'),
      );
      return $types;

    case 'field types':
      return array();

    case 'object types':
      $types['document'] = array(
        'title' => t('Signup'),
        'class' => 'Notifications_Document',
      );
      return $types;

    case 'event types':
      $types['document_expiration'] = array(
        'object' => 'node',
        'action' => 'document_expiration',
        'title' => t('Document is about to expire'),
        'class' => 'Notification_Document_Expires_Event',
        'template' => 's4_core-document-about-to-expire',
        'triggers' => array('node' => array('document_expiration')),
        'actions' => array('s4_core_document_about_to_expire_action'),
      );
      return $types;

    case 'message templates':
      $types['s4_core-document-about-to-expire'] = array(
        'object' => 'node',
        'title' => t('Document about to expire'),
        'class' => 'Notification_Document_Expires_Template',
      );
      return $types;

    case 'display options':
      $options['node_links'] = array(
        '#title' => t('Full node links'),
        '#description' => t('Subscription links will be displayed for full node pages.'),
      );
      return $options;

    case 'event classes':
      return array('node' => t('Node'));

    case 'event actions':
      return array(
        'document_expiration' => t('Document expiration'),
      );
  }
}

function s4_core_document_about_to_expire_action($node, $context = array()) {
  $node = $context['node'];
  if ($node->type == 'file') {
     s4_core_node_event('document_expiration', $node)->trigger();
  }
}

function s4_core_notifications_subscription($op, $subscription = NULL) {
  switch ($op) {
    case 'page objects':
      $objects = array();
      // Return objects on current page to which we can subscribe
      if (arg(0) == 'node' && is_numeric(arg(1)) && ($node = menu_get_object('file')) && $node->type == 'file') {
        $objects[] = notifications_object('file', $node);
      }
      return $objects;
      break;
  }
}

function s4_core_node_event($action, $node) {
  $page = &drupal_static(__FUNCTION__);
  if (!isset($page[$action][$node->nid])) {
    $page[$action][$node->nid] = notifications_event('document_expiration', $action)->add_object('node', $node);
  }
  return $page[$action][$node->nid];
}

function s4_core_trigger_info() {
  return array(
    'node' => array(
      'document_expiration' => array(
        'label' => t('A document is about to expire'),
      ),
    ),
  );
}

/**
*  Implementation of hook_field_formatter_info
*/
function s4_core_field_formatter_info() {
  return array(
    's4_sites_address_select' => array(
        'label' => t('Student Signup Select Location'),
        'field types' => array('location'),
      ),
  );
}

/**
*  Formatter for locations that are in the user signup for a site location screen
*/
function s4_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];
  if ($display['type'] == 's4_sites_address_select') {
     foreach ($items as $delta => $item) {
      $output = array();
      // @todo - the map link wrapper should move out to a theme
    $output[] = '<div class="map-link-wrapper item-list">';
    $output[] = '<span>';
    $output[] = '<div class="map-pointer"></div>';
    $output[] = '<a href="#" class="map-link" lat="' . $item['latitude'] . '" lon="' . $item['longitude'] . '"></a>';
    $output[] = '</span>';
    $output[] = '</div>';
      $output[] = '<div class="location-signup-location">';
      if ($item['name']) {
        $output[] = '<strong>' . $item['name'] . '</strong>';
      }
      if ($item['phone']) {
        $output[] = _s4_sites_format_phone($item['phone']);
      }
      if ($item['fax']) {
        $output[] = '<strong>Fax:</strong> ' . _s4_sites_format_phone($item['fax']);
      }
      if ($item['street']) {
        $output[] = $item['street'];
      }
      if ($item['additional']) {
        $output[] = $item['additional'];
      }
      $output[] = $item['city'] . ', ' . $item['province'] . '&nbsp;&nbsp;' . $item['postal_code'];
      $output[] = '</div>';
      $output[] = '<div class="location-signup-wrapper">';
      $site = node_load(arg(1));
      if (!isset($_SESSION['s4_signup_location']) && !$site->nid) {
        $output[] = '<div class="signup denied"><div class="icon"></div>' .
          t('Select a site first.')
          . '</div>';
      }
      else {
        if (isset($_SESSION['s4_signup_location']) && $_SESSION['s4_signup_location'] == $item['lid']) {
          $output[] = '<div class="signup signed-up"><div class="icon"></div>Site staff selected</div>';
        }
        else {
          $output[] = '<div class="signup"><div class="icon"></div>' .
          l(t('Select this location'), 's4/signup/location/' . $item['lid'] . '/' . $site->nid,
            array('attributes' => array('data-target' => 'signup-course')))
          . '</div>';
        }
    }
    $output[] = '</div>';

      $element[$delta] = array(
        '#markup' => '<address>' . implode('<br />', $output) . '</address>',
      );
    }

  }
  return $element;
}

function s4_core_views_check_node_type_roles($rids, $type, $view, $account = NULL) {
  $node = node_load(arg(1));
  global $user;
  $account = isset($account) ? $account : $user;
  $roles = array_keys($account->roles);
  $roles[] = $account->uid ? DRUPAL_AUTHENTICATED_RID : DRUPAL_ANONYMOUS_RID;
  return (array_intersect(array_filter($rids), $roles) && $node->type == $type);
}

function s4_core_views_check_reverse_view_roles($rids, $view, $account = NULL) {
  global $user;
  if (user_access('administer views')) {
    return TRUE;
  }
  $account = isset($account) ? $account : $user;
  $roles = array_keys($account->roles);
  $roles[] = $account->uid ? DRUPAL_AUTHENTICATED_RID : DRUPAL_ANONYMOUS_RID;
  return (!array_intersect(array_filter($rids), $roles));
}

function s4_core_s4_help($path) {
  module_load_include('inc', 's4_core', 's4_core.help');
  return _s4_core_help($path);
}

function s4_core_site_options_choice(&$form, $form_state) {
  return $form['site_options'];
}