<?php

/**
*	Implementation of hook_menu
*/
function s4_assessment_menu() {
	$items = array();
	
	$items['admin/config/s4/assessment'] = array(
		'title' => 'Assessment options',
		'description' => 'Manage how student assessments are managed.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_assessment_admin_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 's4_assessment.admin.inc',
	);
	
	$items['node/%node/webform/components/rubric/%'] = array(
		'title' => 'Edit rubric',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_assessment_rubric_form', 1, 5),
		'access arguments' => array('update', 1),
		'access callback' => 'node_access',
		'file' => 's4_assessment.pages.inc',
	);
	
	return $items;
}

function s4_assessment_report_access($node) {
	return (user_access('view assessment reports') && $node->type == 'course');
}

function s4_assessment_permission() {
	return array(
	    'view assessment reports' => array(
	      'title' => t('View assessment reports'),
	      'description' => t('User can view reports on student learning.'),
	    ),
	);
}

/**
* Implements hook_views_api()
*/
function s4_assessment_views_api() {
  return array('api' => 3);
}

/**
*	Implemenation of hook_form_alter
*	Here were' adding into the user's session the nid of the
*	signup record we are assessing. This is a bit of a hack, but
*	webform wipes anything from the form that's not necessary before
*	submitting it.
*/
function s4_assessment_form_alter(&$form, $form_sate, $form_id) {
	$assessment = variable_get('s4_assessment_assessment_form', array());
	foreach($assessment as $assessment_nid => $enabled) {
	  	if($enabled && $form_id == 'webform_client_form_'. $assessment_nid) {
	  		$_SESSION['s4_assessment_signup'] = $_GET['signup'];
	  	}
	}
	
	if($form_id == 'webform_component_edit_form') {
		$node = node_load($form['nid']['#value']);
		$component = $node->webform['components'][$form['cid']['#value']];
		if($component['type'] == 'grid') {
			$form['edit_descriptions'] = array(
				'#markup' => '<strong>'. l('Edit rubric descriptions', 'node/'. $node->nid .'/webform/components/rubric/'. $component['cid'], array('query' => array('destination' => 'node/'. $node->nid .'/webform/'))) .'</strong>',
				'#weight' => -12,
			);
			$form['extra']['rubric'] = array(
				'#type' => 'value',
				'#value' => $component['extra']['rubric'],
			);
		}
	}
	if(strpos($form_id, 'webform_client_form_') !== false) {
		foreach($form['submitted'] as $k => $question) {
			if(is_array($question) && isset($question['#type']) && $question['#type'] == 'webform_grid') {
				$form['submitted'][$k]['#theme_wrappers'][] = 's4_assessment_rubric_hints';
			}
		}
	}
}

function theme_s4_assessment_rubric_hints(&$variables) {
	$element = $variables['element'];
	$rubric = (isset($element['#webform_component']['extra']['rubric']))
			  ? $element['#webform_component']['extra']['rubric']
			  : false;	
	$header = $element['#grid_options'];
	array_unshift($header, '');
	if($rubric) {
		$header[] = 'Rubric';
	}
	$rows = array();
	$output = '';
	foreach($element['#grid_questions'] as $question_key => $question) {
		$rows[$question_key][] = array('data' => $question, 'header' => true);
		$rubric_header = $rubric_rows = array();
		foreach($element['#grid_options'] as $option_key => $option) {
			$element[$question_key][$option_key]['#title'] = '<span class="element-invisible">' . $question .': '. $element[$question_key][$option_key]['#title'];
			if($rubric) {
				$element[$question_key][$option_key]['#title'] .= '<span class="rubric-question">'. $rubric[$question_key][$option_key] .'</span>';			
				$rubric_header[] = $option;
				$rubric_rows[0][] = $rubric[$question_key][$option_key];
			}
			$element[$question_key][$option_key]['#title'] .= '</span>';
			$rows[$question_key][] = drupal_render($element[$question_key][$option_key]);
		}
		if($rubric) {
			$rows[$question_key][] = '<a href="#rubric-'. $element['#id'] .'-'. $question_key .'" class="rubric-show" data-toggle="modal" role="button">View rubric</a>';
		}
		if($rubric) {
			$output .= '<div id="rubric-'. $element['#id'] .'-'. $question_key . '" class="modal modal-wide hide fade" tabindex="-1" role="dialog" aria-labelledby="rubric-'. $element['#id'] .'-'. $question_key . '" aria-hidden="true"><div class="modal-header">
			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
			<h3>' . $question .'</h3>
			</div><div class="modal-body">' 
			.theme('table', array('header' => $rubric_header, 'rows' => $rubric_rows )) .'</div><div class="modal-footer">
    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
  </div>
</div>';
		}
	}
	
	return theme('table', array('header' => $header, 'rows' => $rows)) . $output;
}

function s4_assessment_theme($existing, $type, $theme, $path) {
	return array(
		's4_assessment_webform_components_form' => array(
	      'render element' => 'form',
	    ),
	    's4_assessment_rubric_hints' => array(
	      'render element' => 'element',
	    ),
	);
}

function s4_assessment_webform_submission_insert($node, $submission) {
	$assessment = variable_get('s4_assessment_assessment_form', 0);
	if(!$assessment[$node->nid] || !isset($_SESSION['s4_assessment_signup'])) {
		return null;
	}
	$signup = node_load($_SESSION['s4_assessment_signup']);
	$signup->field_form_assessment_sid[$signup->language][]['value'] = $submission->sid;
	node_save($signup);
	unset($_SESSION['s4_assessment_signup']);
	drupal_set_message(t('Your assessment has been recorded.'));
}

function theme_s4_assessment_webform_components_form($variables) {
	$form = $variables['form'];
	$node = node_load($form['nid']['#value']);
	$component = $node->webform['components'][$form['component']['#value']];
	$options = _webform_select_options_from_text($component['extra']['options']);
	$questions = _webform_select_options_from_text($component['extra']['questions']);

	$header = array('question' => 'Question') + $options;
	$row = array();
	foreach($questions as $question_key => $question) {
		$row[$question_key][] = array('data' => $question, 'header' => TRUE);
		foreach($options as $k => $option) {
			$form[$question_key .'-'. $k]['#title'] = '<span class="element-invisible">'. $form[$question_key .'-'. $k]['#title'] .'</span>';
			$row[$question_key][] = drupal_render($form[$question_key .'-'. $k]);
		}
	}
	$output = theme('table', array('header' => $header, 'rows' => $row, 'id' => 'assessment-rubric-table'));
	$output .= drupal_render_children($form);
	return $output;
}

/**
 * Implements hook_s4_site_configuration().
 */
function s4_assessment_s4_site_configuration() {
	return array(
		'assessment_settings' => array(
			'group' => t('Courses'),
			'title' => t('Assessment forms'),
			'href'  => 'admin/config/s4/assessment',
			'description' => t('Select which forms should be available for assessment.'),
		),
	);
}