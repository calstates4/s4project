<?php

/**
*  Implementaiton of hook_menu
*/
function s4_pages_menu() {
  module_load_include('inc', 'pathauto');
  $items = array();
  
  $items['homepage'] = array(
    'title' => 'Home page',
    'page callback' => '_s4_pages_homepage',
    'access arguments' => array('access content'),
  );
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_restrictions');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach($terms as $term) {  
    $items[pathauto_cleanstring($term->name)] = array(
      'title' => 'Home page',
      'page callback' => '_s4_pages_program_homepage',
      'page arguments' => array((string)$term->tid),
      'access arguments' => array('access content'),
    );
  }
  
  $items['dashboard'] = array(
    'title' => '',
    'page callback' => '_s4_pages_homepage',
    'access arguments' => array('access s4 dashboard'),
  );
  
  $items['node/%node/students'] = array(
    'title' => 'Students',
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_s4_pages_homepage',
    'access callback' => '_s4_pages_site_student_access',
    'access arguments' => array(1),
    'weight' => 1,
  );
  
  return $items;
}

function _s4_pages_program_homepage($term) {
  global $conf;
  $conf['s4_original_site_title'] = variable_get('site_name', 'S4');
  $term = taxonomy_term_load((int)$term);
  $conf['s4_pages_program_homepage'] = $term->tid;
  $title = field_get_items('taxonomy_term', $term, 'field_frontpage_title');
  drupal_set_title(FALSE);
  $context = context_load('frontpage-anonymous');
  context_set('context', 'frontpage-anonymous', $context);
  if($title[0]['value']) {
    $conf['site_name'] = ($title[0]['value']) ? check_plain($title[0]['value']) : $term->name;
  }
  $welcome_message = field_get_items('taxonomy_term', $term, 'field_statistics_message');
  if($welcome_message[0]['value']) {
    $conf['s4_pages_welcome_message'] = check_plain($welcome_message[0]['value']);
  }
  $right_message = field_get_items('taxonomy_term', $term, 'field_welcome_message');
  if($right_message[0]['value']) {
    $conf['s4_core_welcome_message'] = $right_message[0];
  }
  
  $show_register = field_get_items('taxonomy_term', $term, 'field_program_site_proposal');
  $conf['s4_core_anonymous_site_registration'] = $show_register[0]['value'];
  return '';
}

function _s4_pages_site_student_access($node) {
  return (node_access('update', $node) && $node->type == 'site');
}

function _s4_pages_homepage() {
  return '';
}  

function s4_pages_permission() {
  return array(
    'access s4 dashboard' => array(
      'title' => t('Access the dashboard'), 
      'description' => t('Allow the user to access the dashboard.'),
    ),
  );
}

/**
* Implements hook_block_info
*/
function s4_pages_block_info() {
  $blocks['overview_paragraph']['info'] = 'Overview paragraph';
  $blocks['dashboard_title']['info']    = 'Dashboard header';
  $blocks['add_contact_record']['info'] = 'Add contact record button';
  $blocks['add_site_file']['info']    = 'Add site file button';
  $blocks['program_listing']['info']    = 'Program homepages';
  return $blocks;
}

/**
* Implements hook_block_view
*/
function s4_pages_block_view($delta) {
  $function_name = 's4_pages_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
}

/**
*  Add content button for site contact records (appears in the site contact record & files page)
*/

function s4_pages_add_contact_record() {
  $node = node_load(arg(1));
  return array('subject' => NULL,
         'content' => '<div class="spacer-30">' .
                 l('<span class="add"></span>Add new note', 
                 'node/add/contact-record/' . $node->nid,
                 array('html' => TRUE,
                     'attributes' => array('class' => 'button add'),
                     'query' => array('destination' => 
                       'node/' . $node->nid . '/notes')))
                  . '</div>');
}

/**
*  Add content button for site files (appears in the site contact record & files page)
*/
function s4_pages_add_site_file() {
  $node = node_load(arg(1));
  return array('subject' => NULL,
         'content' => '<div class="spacer-30">' .
                 l('<span class="add"></span>Add new form', 
                 'node/add/file/' . $node->nid,
                 array('html' => TRUE,
                     'attributes' => array('class' => 'button add'),
                     'query' => array('destination' => 
                       'node/' . $node->nid . '/forms')))
                  . '</div>');
}

/**
* Implements hook_theme
*/
function s4_pages_theme() {
  return array(
    'overview_paragraph' => array(
      'variables' => array('paragraph' => '', 'registration' => true),
      'template'  => 'overview_paragraph',
    ),
  );
}

/**
*  Overview paragraph;
*/
function s4_pages_overview_paragraph() {
  drupal_add_css(drupal_get_path('module', 's4_pages') . '/css/overview.css');
  $message = variable_get('s4_pages_welcome_message', 'Together, we have placed [s4_welcome:students_count] students with [s4_welcome:sites_count] sites in [s4_welcome:cities_count] different cities.');
  $message = token_replace(check_plain($message), array());
  $registration = (user_access('create site content') && variable_get('s4_core_anonymous_site_registration', FALSE));
  return array('subject' => NULL,
         'content' => theme('overview_paragraph', array('paragraph' => $message, 'registration' => $registration)));
}

/**
*  Homepage welcome message
*/
function s4_pages_dashboard_title() {
  global $user;
  foreach($user->roles as $role) {
  	if ($role == 'staff') {
  		return null;
  	}
  }
  $user = user_load($user->uid);
  $values = field_get_items('user', $user, 'field_first_name');
  $name = ($values[0]['value'])
      ? $values[0]['value']
      : $user->name;
  $title = (isset($_GET['finished']))
       ? t('Great, @name, you\'re all signed up!',
                 array('@name' => $name))
       : t('Hi, @name, what would you like to do?',
                 array('@name' => $name));
  return array('subject' => NULL,
         'content' => '<h1>' . $title . '</h1>');
}

/**
 * Implements hook_tokens().
 */
function s4_pages_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 's4_welcome') {
    $query = db_select('location', 'l')
         ->fields('l', array('city', 'province'))
         ->distinct();
    $replacements['[s4_welcome:cities_count]'] = $query->countQuery()->execute()->fetchField();

    $query = db_select('node', 'n')
         ->fields('n', array('nid'))
         ->condition('type', 'site')
         ->condition('status', 1)
         ->distinct();
    $replacements['[s4_welcome:sites_count]'] = $query->countQuery()->execute()->fetchField();
    
    $query = db_select('node', 'n')
         ->fields('n', array('nid'))
         ->condition('type', 'signup')
         ->condition('status', 1)
         ->distinct();
    $replacements['[s4_welcome:students_count]'] = $query->countQuery()->execute()->fetchField();
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function s4_pages_token_info() {
  $types = array('s4_welcome' => array(
      'name' => t('Homepage statistics message'),
      'description' => t('Tokens for the welcome message.'),
    )
  );

    $tokens['s4_welcome']['cities_count'] = array('name' => t('Total number of cities'),
                       'description' => t('The number of cities served by your sites.'),
                       'module' => 's4_pages');
    $tokens['s4_welcome']['sites_count'] = array('name' => t('Total number of sites'),
                       'description' => t('The number of sites your students can signup with.'),
                       'module' => 's4_pages');
    $tokens['s4_welcome']['students_count'] = array('name' => t('Total number of students'),
                       'description' => t('Number of students who have signed up with a site.'),
                       'module' => 's4_pages');
    $tokens['s4_welcome']['hours_count'] = array('name' => t('Total number of hours'),
                       'description' => t('Number of hours students have worked at your sites.'),
                       'module' => 's4_pages');
    return array(
      'types' => $types,
      'tokens' => $tokens,
    );
}

/**
 * Implements hook_form_alter().
 */
function s4_pages_form_s4_core_admin_form_alter(&$form, $form_state) {
  $form['s4_pages'] = array(
    '#type' => 'fieldset',
    '#title' => 'Statistics message',
  );
  
  $form['s4_pages']['s4_pages_welcome_message'] = array(
    '#title' => t('The statistics message appearing on the left of the homepage'),
    '#type' => 'textarea',
    '#description' => t('The number of days before a student\'s service ends where an email should be sent.'),
    '#default_value' => variable_get('s4_pages_welcome_message', 'Together, we have placed [s4_welcome:students_count] students with [s4_welcome:sites_count] sites in [s4_welcome:cities_count] different cities.'),
    );
    
  if (module_exists('token')) {
    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('s4_pages'),
    );
  }
}

/** 
 * Block displaying all programs' homepages
 */
function s4_pages_program_listing() {
  module_load_include('inc', 'pathauto');
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_restrictions');
  $terms = taxonomy_get_tree($vocabulary->vid);
  if(!count($terms) || count($terms) < 2) {
    return;
  }
  foreach($terms as $term) {
    $items[] = l($term->name, pathauto_cleanstring($term->name));
  }
  return array('subject' => t('View our programs'),
               'content' => theme('item_list', array('items' => $items)));
}