<?php
/**
 * @file
 * Code for the S4 Sites feature.
 */

include_once('s4_sites.features.inc');

/**
*  Implementation of hook_menu_alter()
*/
function s4_sites_menu_alter(&$items) {
  $items['node/%/site-staff']['access callback'] = '_s4_sites_site_admin_view_access';
  $items['node/%/site-staff']['access arguments'] = array(1);
  $items['node/%/notes']['access callback'] = '_s4_sites_site_admin_view_access';
  $items['node/%/notes']['access arguments'] = array(1);
  $items['node/%/files']['access callback'] = '_s4_sites_site_admin_view_access';
  $items['node/%/files']['access arguments'] = array(1);
}

/**
*	Implementation of hook_menu
*/
function s4_sites_menu() {
	$items = array();
	
	$items['admin/config/s4/site-import'] = array(
		'title' => 'Import site information',
		'description' => 'Import sites from another database',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_sites_import_sites_form'),
		'file' => 's4_sites.admin.inc',
		'access arguments' => array('administer site configuration'),
		'weight' => -10,
	);
  	
  	return $items;
}

/**
*	Implementation of hook_permission
*/
function s4_sites_permission() {
	return array(
		'moderate site information' => array(
		  'title' => t('Moderate site information'),
		  'description' => t('If checked, users with this role will be able to create site and site staff content without moderation.'),
		),
    );
}
/**
*  Menu access test for site contact records
*/
function _s4_sites_site_admin_view_access($nid) {
  $node = node_load($nid);
  return (node_access('update', $node) && $node->type == 'site');
}

/**
*  Implementation of hook_init
*/
function s4_sites_init() {
  drupal_add_js(drupal_get_path('module', 's4_sites') . '/js/s4_map.js');
  drupal_add_js(drupal_get_path('module', 's4_sites') . '/js/s4_fancybox.js');

}

/**
*  Implementation of hook_block_info()
*/
function s4_sites_block_info() {
  $blocks['s4_sites_search_help'] = array('info' => 'Site list help');
  $blocks['s4_sites_search_map'] = array('info' => 'Site list map');
  return $blocks;
}

/**
*  Implementation of hook_block_view
*/
function s4_sites_block_view($delta) {
  switch ($delta) {
    case 's4_sites_search_help':
      return array('subject' => '',
             'content' => t('<p>Use this search form to find a site that meets your specific needs. Clicking on the <strong>Map link</strong> will show the location of that site on the map to the right.</p>'));
      break;
    case 's4_sites_search_map':
      if (!module_exists('gmap')) {
        return NULL;
      }
      $map = array(
         '#type' => 'gmap',
         '#gmap_settings' => array(
          'zoom' => 10,
          'width' => '100%',
          'height' => '300px',
          'id' => 'site-map',
          'maptype' => 'world-light',
          'controltype' => 'Small'
        ),
      );
      return array('subject' => '',
             'content' => '<div id="site-list-map">'. drupal_render($map) . t('<h4>!link</h4>', array('!link' => l('View large map', 'map'))) . '</div>');
      break;
  }
  
}

/**
* Implementation of hook_form_FORM_ID_alter
* Here we're adding links to descriptions as links can't be rendered right
* stright from the admin settings.
*/
function s4_sites_form_site_node_form_alter(&$form, $form_state, $form_id) {
  dpm($form);
  $terms = taxonomy_get_vocabularies();
  drupal_add_js(drupal_get_path('module', 's4_sites') .'/js/s4_site_form.js');
  drupal_add_css(drupal_get_path('module', 's4_sites') .'/css/s4_sites.css');
  foreach($terms as $k => $term) {
    unset($terms[$k]);
    $terms[$term->machine_name] = $term;
  }
  $fields = array('field_site_restrict',
                 'field_csu_facility',
                 'field_csu_org_type',
  );
  foreach($fields as $field_name) {
    $field = field_info_field($field_name);
    $term = $terms[$field['settings']['allowed_values'][0]['vocabulary']];
    if(user_access('edit terms in ' . $term->vid)) {
      $form[$field_name][$form['#node']->language]['#description'] .=
        l('Add new values to this list.', 'admin/structure/taxonomy/' . $term->machine_name, array('attributes' => array('target' => '_blank')));
    }
  }
  if(!user_access('moderate site information')) {
    $form['revision_information']['#attributes']['class'][] = 'element-invisible';
    $form['revision_information']['#group'] = false;
    foreach($form['#groups'] as $k => $group) {
    	$form['#groups'][$k]->format_type = 'accordion-item';
    }
    $form['#groups']['group_site_tabs']->format_type = 'accordion';
    $form['field_site_restrict']['#access'] = false;
    $form['field_site_users']['#access'] = false;
    $form['field_site_eval_form']['#access'] = false;
    $form['field_site_form']['#access'] = false;

    drupal_add_js(drupal_get_path('module', 's4_sites') .'/js/s4_sites_accordion.js');
  }
}

/**
*  Implementation of hook_node_insert.
*/
function s4_sites_node_presave($node) {
  if($node->type == 'site') {
     cache_clear_all('s4_pages_overview_data', 'cache');
     $user = user_load($node->uid);
     if(!user_access('moderate site information', $user)) {
       $node->status = 0;
       drupal_set_message('Thanks for your site recommendation. We will be contacting you shortly.');
     }
  }
}

/**
*	Implementation of hook_field_formatter_info_alter
*/
function s4_sites_field_formatter_info() {
	return array(
		's4_sites_local_phone_number' => array(
	      'label' => t('Student Signup phone number'),
	      'field types' => array('phone_number'),
	      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
	    ),
	    's4_sites_address' => array(
	      'label' => t('Student Signup'),
	      'field types' => array('location'),
	    ),
	    's4_sites_hours_matrix' => array(
	      'label' => t('Site hours'),
	      'field types' => array('matrix_text', 'matrix_custom'),
	    ),
	    's4_sites_population_matrix' => array(
	      'label' => t('Site population'),
	      'field types' => array('matrix_text', 'matrix_custom'),
	    ),
	);
}

/**
*	Implementation of hook_field_formatter_view
*/
function s4_sites_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $element = array();
  $settings = $display['settings'];
  if($display['type'] == 's4_sites_hours_matrix') {
  	drupal_add_css(drupal_get_path('module', 's4_sites') .'/css/s4_sites.css');
  	$element = _s4_sites_format_hours_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  if($display['type'] == 's4_sites_population_matrix') {
  	$element = _s4_sites_format_site_population_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  if($display['type'] == 's4_sites_local_phone_number') {
	  foreach ($items as $delta => $item) {
	    
	    $element[$delta] = array(
	      '#markup' => _s4_sites_format_phone($item['number']),
	    );
	  }
  }
  if($display['type'] == 's4_sites_address') {
  	 foreach ($items as $delta => $item) {
	    $output = array();
	    if($item['name']) {
	    	$output[] = '<strong>'. $item['name'] .'</strong>';
	    }
	    if($item['phone']) {
	    	$output[] = _s4_sites_format_phone($item['phone']);
	    }
	    if($item['fax']) {
	    	$output[] = '<strong>Fax:</strong> ' . _s4_sites_format_phone($item['fax']);
	    }
	    if($item['street']) {
	    	$output[] = $item['street'];
	    }
	    if($item['additional']) {
	    	$output[] = $item['additional'];
	    }
	    $output[] = $item['city'] .', '. $item['province'] . '&nbsp;&nbsp;' . $item['postal_code'];
	    $element[$delta] = array(
	      '#markup' => '<address>'. implode('<br />', $output) .'</address>',
	    );
	  }

  }
  return $element;
}

function _s4_sites_format_phone($number) {
	$regex = '/^
    ([2-9][0-8]\d)  # area code (Allowed range of [2-9] for the first digit, [0-8] for the second, and [0-9] for the third digit)
    ([2-9]\d{2})    # 3-digit prefix (cannot start with 0 or 1)
    (\d{4})         # 4-digit line number
    /x';

	$result = preg_match($regex, $number, $matches);
	
	if ($result) {
		return $cc['code'] . ' (' . $matches[1] . ') ' . $matches[2] . '-' . $matches[3];
	}
	return '';
}

function _s4_sites_format_hours_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	if (count($items[0]) == 1) { //if a single value is passed in from views
		$element[0] = array(
			'#markup' => field_filter_xss($items[0]['value']), 
		);
	}
	
	//transpose the $items array into a [$row][$col] = value arangement
	foreach ($items as $delta => $item) {
		$items[$item['row']][$item['col']][] = matrix_cell_value($item, $field);
	}

	//work out how many rows and columns to show
	// For rows this is rows_count if rows_count > 0, else the number of rows with at least some data in the row.
	if ($field['settings']['rows_count'] > 0) {
		$rows_count = $field['settings']['rows_count'];
	}
	else {
		foreach ($items as $row_id => $row) {
			foreach ($row as $col_id => $value) {
				if ($value != '') {
					$rows_count = $row_id;
				}
			}
		}
	}

	if ($cols_count = $field['settings']['cols_count'] > 0) {
		$cols_count = $field['settings']['cols_count'];
	}
	else {
		foreach ($items as $row_id => $row) {
			foreach ($row as $col_id => $value) {
				if (!empty($value)) {
					$max_cols[$col_id] = $col_id;
				}
			}
		}
		$cols_count = max($max_cols);
	}

	//populate the data part of the table rows
	$rows = array();
	for ($row = 1; $row <= $rows_count; $row++) {
		for ($col = 1; $col <= $cols_count; $col++) {
			$value = array('');
			if (isset($items[$row][$col])) {
				$value = $items[$row][$col];
			}
			$rows[$row][$col] = $value;
		}
	}
	
	//collapse any multi-valued results into a list
	foreach ($rows as $row_id => $row) {
		foreach ($row as $col_id => $values) {
			if (count($values) > 1) {
				$values = theme('item_list', array('items' => $values));
			}
			else { 
				$values = $values[0];
			}
			$yes_class = ($values) ? 'hours-yes' : 'hours-no';
			$rows[$row_id][$col_id] = array('data' => ($values) ? 'available' : 'not available', 'class' => $yes_class . ' 	matrix-col-'. $col_id .' matrix-row-'. $row_id .' matrix-cell-'. $row_id .'-'. $col_id);
		}
	}

	if ($field['type'] == 'matrix_text' && $field['settings']['spreadsheet_style'] == TRUE) {
		for ($col = 1; $col <= $cols_count; $col++) {
			$headers[$col] = matrix_make_letter($col);
		}
		array_unshift($headers, ''); //cell 0,0	 
		
		for ($row = 1; $row <= $rows_count; $row++) {
			$cell = array('data' => $row, 'scope' => 'row', 'header' => true, 'class' => 'matrix-col-header');
			array_unshift($rows[$row], $cell);
		}		 
	}
	elseif ($field['type'] == 'matrix_custom') {
		$headers = array();
		$headers = array_fill(1, $cols_count, '&nbsp;'); //initialize the headers with spaces (in case headers have not title set)
		$settings = unserialize($field['settings']['settings']);

		if (isset($settings['cols'])) {
			foreach ($settings['cols'] as $col_id => $col) {
				$headers[$col_id] = $col['title'];
			}
		}

		if ($field['settings']['rows_count'] > 0) { //had left lables so translate the headers one to the right
			array_unshift($headers, ''); //cell 0,0
		}
		
		if (!empty($settings['rows'])) {
			foreach ($settings['rows'] as $row_id => $row) {
				$cell = array('data' => $row['title'], 'scope' => 'row', 'header' => true, 'class' => 'matrix-col-header');
				if (isset($rows[$row_id])) {
					array_unshift($rows[$row_id], $cell);
				}
			}
		}
	}
	else {
		$headers = NULL;
	}

	$element[0] = array(
		'#theme' => 'table', 
		'#header' => $headers, 
		'#rows' => $rows,
		'#caption' => 'Available times are <span class="hours-sample">marked in dark blue</span>.',
	);
	return $element;
}

function _s4_sites_format_site_population_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$settings = unserialize($field['settings']['settings']);
	$data = array();
	foreach($settings['rows'] as $k => $row) {
		$data[$row['title']] = $items[$k]['value'];
	}
	$element[0] = array(
		'#theme' => 's4_reporting_chart_pie',
		'#id' => 'demographics-pie',
		'#label' => 'Population',
		'#title' => '',
		'#width' => 240,
		'#height' => 220,
		'#data' => $data,
	);
	return $element;
}