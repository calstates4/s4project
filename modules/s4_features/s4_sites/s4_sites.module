<?php
/**
 * @file
 * Code for the S4 Sites feature.
 */

include_once('s4_sites.features.inc');

/**
* Implements hook_menu_alter()
*/
function s4_sites_menu_alter(&$items) {
  $items['node/%/site-staff']['access callback'] = '_s4_sites_site_admin_view_access';
  $items['node/%/site-staff']['access arguments'] = array(1);
  unset($items['node/%node/moderation']);
  $items['node/%/site-staff-students']['access callback'] = '_s4_sites_site_staff_admin_view_access';
  $items['node/%/site-staff-students']['access arguments'] = array(1);
}

/**
*  Implementation of hook_menu
*/
function s4_sites_menu() {
  $items = array();

  $items['sites/form/%/%/%/%'] = array(
    'title' => 'Complete form',
    'description' => 'Allow users to complete a questionnaire for a site',
    'page callback' => 's4_sites_user_completed_form',
    'access callback' => 's4_sites_user_completed_form_access',
    'access arguments' => array(2, 3, 4, 5),
    'page arguments' => array(2, 3),
  );

  $items['sites/propose'] = array(
    'title' => 'Propose a new site',
    'page arguments' => array('s4_sites_propose_site_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('create site content'),
  );

  $items['sites/thank-you'] = array(
    'title' => 'Thank you',
    'page callback' => 's4_sites_thank_you',
    'page arguments' => array(2),
    'access arguments' => array('create site content'),
  );
  
  $items['signup/%node/evaluation'] = array(
    'title' => 'Complete evaluation form',
    'page callback' => 's4_sites_evaluation_form',
    'page arguments' => array(1),
    'access arguments' => array('signup for service'),
  );
  
  $items['site'] = array(
    'title' => 'Sites',
    'page callback' => 's4_sites_redirect',
    'access arguments' => array('access content'),
  );
  
  $items['node/%node/merge'] = array(
    'title' => 'Merge with another site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('s4_sites_merge_sites', 1),
    'access arguments' => array('merge sites'),
    'file' => 's4_sites.pages.inc'
  );

  $items['node/%node/log'] = array(
    'title' => 'Log',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 's4_sites_site_log',
    'page arguments' => array(1),
    'access callback' => '_s4_sites_site_admin_view_access',
    'access arguments' => array(1),
    'file' => 's4_sites.pages.inc',
    );

  return $items;
}

function s4_sites_redirect() {
  if(user_access('moderate site information')) {
    drupal_goto('site-list/manage');
    return;
  }
  drupal_goto('site-list');
}

function s4_sites_evaluation_form($node) {
  $site = field_get_items('node', $node, 'field_site');
  $site = node_load($site[0]['nid']);
  $signup_program = field_get_items('node', $node, 'field_site_restrict');
  $forms = field_get_items('node', $site, 'field_site_evaluation_group');
  foreach($forms as $form) {
    $form = field_collection_item_load($form['value']);
    $programs = field_get_items('field_collection_item', $form, 'field_site_restrict');
    foreach($programs as $k => $program) {
      if($program['tid'] == $signup_program[0]['tid']) {
        $webform = field_get_items('field_collection_item', $form, 'field_site_eval_form');
        $_SESSION['s4_sites_evaluation_nid'] = $node->nid;
        drupal_goto('node/' . $webform[$k]['nid']);
      }
    }
  }
}

/**
 * Thank you page
 */
function s4_sites_thank_you($terms) {
  $terms = explode(',', $terms);
  $output = '';
  foreach($terms as $t) {
    $term = taxonomy_term_load($t);
    if ($term->vocabulary_machine_name == 'site_restrictions') {
      $output .= '<h2>'. $term->name .'</h2>';
      $message = field_get_items('taxonomy_term', $term, 'field_thank_you_message');
      $output .= check_markup($message[0]['value'], $message[0]['format']);
    }
  }
  if (strlen($output) == 0) {
    drupal_set_message(t('Thank you for proposing your site. We will be contacting you shortly.'));
    drupal_goto('<front>');
  }
  $output .= l(t('Return to homepage'), '<front>');
  return $output;
}

/**
 * Propose sites page
 */
function s4_sites_propose_site_form() {
  drupal_add_css(drupal_get_path('module', 's4_sites') .'/css/s4_sites.css');

  $form = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_restrictions');
  $terms = taxonomy_get_tree($vocabulary->vid);
  $form['instructions'] = array(
    '#type' => 'markup',
    '#markup' => t('Please select the types of students you would like to have at your site. If you do not know right now, we will contact you once we have reviewed your application.'),
  );
  $display = FALSE;
  foreach($terms as $t) {
    $t = taxonomy_term_load($t->tid);
    $allowed = field_get_items('taxonomy_term', $t, 'field_program_site_proposal');
    $message = field_get_items('taxonomy_term', $t, 'field_program_propose_message');

    if($allowed[0]['value']) {
      $display = TRUE;
      $form['terms_'. $t->tid] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($t->name),
        '#description' => check_markup($t->description, $t->format),
      );
    }
    elseif($message[0]['value']) {
      $display = TRUE;
      $form['terms_'. $t->tid] = array(
        '#markup' => '<h2>'. check_plain($t->name) .'</h2>' . check_markup($message[0]['value'], $message[0]['format']),
      );
    }
  }
  if(!$display) {
    return array('message' => array('#markup' => t('Sorry, no programs are currently accepting submissions.')));
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

function s4_sites_propose_site_form_submit($form, $form_state) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_restrictions');
  $terms = taxonomy_get_tree($vocabulary->vid);
  $proposed_terms = array();
  foreach($terms as $term) {
    if ($form_state['values']['terms_'. $term->tid]) {
      $proposed_terms[$term->tid] = $term->tid;
    }
  }
  $proposed_terms = implode(',', $proposed_terms);
  drupal_goto('node/add/site/'. $proposed_terms, array('query' => array('destination' => 'sites/thank-you/'. $proposed_terms)));
}

/**
*  Access callback for completing the form. This basically checks that the key is correct
*/
function s4_sites_user_completed_form_access($nid, $form, $email, $key) {
  return (drupal_hmac_base64($nid .'_'. $form .'_'. $email, drupal_get_private_key() . drupal_get_hash_salt()) == $key);
}

function s4_sites_user_completed_form($site, $form) {
  $_SESSION['s4_sites_user_form_site'] = $site;
  drupal_goto('node/'. $form);
}

/**
*  Implementation of s4_core_field_access
*/
function s4_sites_s4_field_access() {

  return array('site' => array(
            'body',
            'field_site_projects',
            'field_phone',
            'field_site_email',
            'field_website',
            'field_location',
            'field_signups_max',
            'field_site_hours_minimum',
            'field_site_hours',
            'field_site_instructions_required',
            'field_site_instructions',
            'field_site_requirements',
            'field_site_health_training',
            'field_site_tour',
            'field_health_risk',
            'field_tags',
            'field_site_restrict',
            'field_csu_facility',
            'field_csu_org_type',
            'field_site_users',
            'field_site_form',
            'field_site_eval_form',
        ),
        'coordinator' => array(
            'field_first_name',
            'field_last_name',
            'field_signups_max',
            'field_site',
            'field_site_restrict',
            'field_staff_role',
            'field_staff_signup_available',
            'field_email',
            'field_phone',
        ),
        'file' => array(
            'field_site',
            'field_expiration_date',
            'field_expiration_reminder',
            'field_expiration_reminder_date',
            'field_form_sid',
            'field_file_category',
        ),
        'contact_record' => array(
            'field_site',
            'field_contact',
        ),
  );
}

/**
*  Implementation of hook_webform_submission_insert
*  Here we take any submissions made by site staff and attach
*  them to a form record.
*/
function s4_sites_webform_submission_insert($node, $submission) {
  global $user;
  if( $_SESSION['s4_sites_evaluation_nid']) {
    $signup = node_load( $_SESSION['s4_sites_evaluation_nid']);
    $signup_user = field_get_items('node', $signup, 'field_user');
    if($signup_user[0]['uid'] == $user->uid) {
      $signup->field_form_evaluation_sid[$signup->language][0]['value'] = $submission->sid;
      node_save($signup);
      $_SESSION['s4_sites_evaluation_nid'] = 0;
    }
  }
  if (!$_SESSION['s4_sites_user_form_site']) {
    return null;
  }
  $site = node_load($_SESSION['s4_sites_user_form_site']);
  $form = new stdClass();
  $form->type = 'file';
  node_object_prepare($form);
    $form->language = LANGUAGE_NONE;
  $form->title = $node->title;
  $form->uid = $user->uid;
  $form->field_site[$form->language][0]['nid'] = $site->nid;
  $form->field_form_sid[$form->language][0]['value'] = $submission->sid;
  node_save($form);
  unset($_SESSION['s4_sites_user_form_site']);
  if (node_access('update', $site)) {
    drupal_goto('node/'. $form->field_site[$form->language][0]['nid'] .'/log');
  }
  drupal_set_message(t('Thanks for submitting your form!'));
  drupal_goto('<front>');
}

/**
*  Implementation of hook_permission
*/
function s4_sites_permission() {
  return array(
    'moderate site information' => array(
      'title' => t('Moderate site information'),
      'description' => t('If checked, users with this role will be able to create site and site staff content without moderation.'),
    ),
    'bypass site access control' => array(
      'title' => t('Bypass access control on sites'),
      'description' => t('When checked, users with this role will be able to edit any site regardless of what program they are assigned to.'),
    ),
    'merge sites' => array(
      'title' => t('Merge sites'),
      'description' => t('Merge two sites together. When this happens one of the sites will be deleted, and students will have their placements moved to the other.'),
    ),
    );
}

function s4_sites_node_view($node, $view_mode, $language) {
  if($view_mode != 'full') {
    return;
  }
  if($node->type == 'site') {
    drupal_set_breadcrumb(
      array(l(t('Home'), '<front>'),
            l(t('Sites'), 'site-list'),
            l($node->title, 'node/'. $node->nid))
    );
    if(node_access('update', $node) && !$node->status) {
      drupal_set_message(t('This site is inactive'), 'error');
    }
    
  }
  if($node->type == 'coordinator') {
    $site = field_get_items('node', $node, 'field_site');
    $site = node_load($site[0]['nid']);
    drupal_set_breadcrumb(
      array(l(t('Home'), '<front>'),
            l(t('Sites'), 'site-list'),
            l($site->title, 'node/'. $site->nid),
            l(t('Site staff'), 'node/'. $site->nid .'/site-staff'),
            l($node->title, 'node/'. $node->nid))
    );
  }
  if($node->type == 'contact_record') {
    $site = field_get_items('node', $node, 'field_site');
    $site = node_load($site[0]['nid']);
    drupal_set_breadcrumb(
      array(l(t('Home'), '<front>'),
            l(t('Sites'), 'site-list'),
            l($site->title, 'node/'. $site->nid),
            l(t('Notes'), 'node/'. $site->nid .'/notes'),
            l($node->title, 'node/'. $node->nid))
    );
  }
  if($node->type == 'file') {
    $site = field_get_items('node', $node, 'field_site');
    $site = node_load($site[0]['nid']);
    drupal_set_breadcrumb(
      array(l(t('Home'), '<front>'),
            l(t('Sites'), 'site-list'),
            l($site->title, 'node/'. $site->nid),
            l(t('Forms'), 'node/'. $site->nid .'/forms'),
            l($node->title, 'node/'. $node->nid))
    );
  }
  if($node->type == 'webform' || $node->type == 'downloadable_form') {
    drupal_set_breadcrumb(
      array(l(t('Home'), '<front>'),
            l(t('Forms'), 'forms'),
            l($node->title, 'node/'. $node->nid))
    );
  }  
}

/**
 *
 */
function s4_sites_node_access($node, $op,  $account) {
  if(is_object($node) && $node->type == 'site') {
    if($op == 'delete') {
      $count = db_select('field_data_field_site', 's')
                 ->condition('field_site_nid', $node->nid)
                 ->fields('s', array('entity_id'))
                 ->countQuery()
                 ->execute()
                 ->fetchField();
      if($count) {
        return NODE_ACCESS_DENY;
      }
      return NODE_ACCESS_IGNORE;
    }
    if($op == 'view' || $op == 'create' || user_access('bypass site access control', $account) || !variable_get('s4_sites_enable_program_access', FALSE)) {
      return NODE_ACCESS_IGNORE;
    }
    $programs = field_get_items('node', $node, 'field_site_restrict');
    $account = user_load($account->uid);
    $user_programs = field_get_items('user', $account, 'field_site_restrict');
    $restrict = array();
    foreach($programs as $program) {
      foreach($user_programs as $user_program) {
        if($user_program['tid'] == $program['tid']) {
          return NODE_ACCESS_ALLOW;
        }
      }
    }
    return NODE_ACCESS_DENY;
  }
  if(is_object($node) && $node->type == 'coordinator' && $op == 'delete') {
    $count = db_select('field_data_field_coordinator', 'f')
               ->condition('field_coordinator_nid', $node->nid)
               ->fields('f', array('entity_id'))
               ->countQuery()
               ->execute()
               ->fetchField();
    if($count) {
      return NODE_ACCESS_DENY;
    }
    return NODE_ACCESS_IGNORE;
  }
}

/**
*  Menu access test for site contact records
*/
function _s4_sites_site_admin_view_access($node) {
  if(!is_object($node)) {
    $node = node_load($node);
  }
  return (node_access('update', $node) && $node->type == 'site');
}

/**
*  Menu access test for site contact records
*/
function _s4_sites_site_staff_admin_view_access($nid) {
  $node = node_load($nid);
  return (node_access('update', $node) && $node->type == 'coordinator');
}

/**
* Implements hook_block_info()
*/
function s4_sites_block_info() {
  $blocks['s4_sites_search_help'] = array('info' => 'Site list help');
  $blocks['s4_sites_site_send_form'] = array('info' => 'Send site form');
  $blocks['s4_sites_form_webform'] = array('info' => 'Site form webform results');
  $blocks['s4_sites_return_tab'] = array('info' => 'Return to site');
  $blocks['s4_sites_merge_link'] = array('info' => 'Merge sites link');
  $blocks['s4_sites_site_full'] = array('info' => 'Site is full indicator');
  $blocks['s4_sites_add_log'] = array('info' => 'Site log add button');
  return $blocks;
}

/**
* Implements hook_block_view
*/
function s4_sites_block_view($delta) {
  switch ($delta) {
    case 's4_sites_search_help':
      return array('subject' => '',
             'content' => t('<p class="lead">Use this search form to find a site that meets your specific needs. Clicking on the <strong>Map link</strong> will show the location of that site on the map to the right.</p>'));
      break;
    case 's4_sites_site_send_form':
      return array('subject' => 'Attach a form',
               'content' => drupal_get_form('s4_sites_send_site_form'));
      break;
    case 's4_sites_form_webform':
      return s4_webform_render_submission('field_form_sid');
      break;
    case 's4_sites_return_tab':
      $node = menu_get_object();
      if($node->type == 'file' || $node->type == 'contact_record') {
        $site = field_get_items('node', $node, 'field_site');
        if(!$site) {
          return;
        }
        $site = node_load($site[0]['nid']);
        $path = ($node->type == 'file') ? 'forms' : 'notes';
        return array('content' => l(t('Return to @site', array('@site' => $site->title)), 'node/'. $site->nid .'/'. $path));
      }
      break;
    case 's4_sites_merge_link':
      if(!user_access('merge sites') || !$node = menu_get_object()) {
        return;
      }
      if(!$node->type == 'site') {
        return;
      }
      return array('content' => l('<i class="icon-resize-small"></i> '. t('Merge'), 'node/'. $node->nid .'/merge', array('html' => TRUE, 'attributes' => array('class' => array('btn')))));
    case 's4_sites_site_full':
      $node = menu_get_object();
      if(!$node || $node->type != 'site') {
        return;
      }
      
        return array('content' => t('This site is full'));
      $max = field_get_items('node', $node, 'field_signups_max');
      if(!$max || $max[0]['value'] == 0) {
        return;
      }
      if(_s4_core_object_is_full($node)) {
        return array('content' => t('This site is full'));
      }
    case 's4_sites_add_log' :
      $site = menu_get_object();
      $output = '<div class="btn-group">';
      $output .= '<a class="btn btn-success dropdown-toggle" data-toggle="dropdown" href="#">
        <i class="icon-plus icon-white"></i> '. t('Add') .'
        <span class="caret"></span>
      </a>';
      $links = array(l(t("Form"), "node/add/file/". $site->nid, array("query" => array("destination" => "node/". $site->nid ."/log"))),
        l(t('Online form'), '', array('absolute' => TRUE, 'fragment' => 'add-form', 'attributes' => array('data-toggle' => 'modal'))),
        l(t("Log entry"), "node/add/contact-record/". $site->nid, array("query" => array("destination" => "node/". $site->nid ."/log"))),
        l(t('Approval'), '', array('absolute' => TRUE, 'fragment' => 'moderate-form', 'attributes' => array('data-toggle' => 'modal'))),
        );
      $output .= theme('item_list', array('items' => $links, 'attributes' => array('class' => array('dropdown-menu'))));
      $output .= '</div>';
      return array('content' => $output);
  }

}

function s4_sites_send_site_form() {
  $form = array();
  $node = node_load(arg(1));

  $form['site'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $forms = array();
  $forms_query = db_select('node', 'n');
  $forms_query->condition('n.status', '1')
        ->condition('n.type', 'webform')
        ->fields('n', array('nid', 'title'))
        ->orderBy('n.title')
        ->distinct();

  $result = $forms_query->execute();
  foreach($result as $row) {
    $forms[$row->nid] = $row->title;
  }

  $form['form'] = array(
    '#type' => 'select',
    '#title' => 'Select the form to complete',
    '#options' => $forms,
  );

  $site_staff = array('none' => '-- None --');
  $staff_query = db_select('node', 'n');
  $staff_query->leftJoin('field_data_field_site', 's', 's.entity_id = n.nid AND s.bundle = :bundle', array(':bundle' => 'coordinator'));
  $staff_query->leftJoin('field_data_field_email', 'e', 's.entity_id = n.nid AND e.bundle = :bundle', array(':bundle' => 'coordinator'));

  $staff_query->condition('n.status', '1')
        ->condition('s.field_site_nid', $node->nid)
        ->isNotNull('e.field_email_email')
        ->fields('n', array('nid', 'title'))
        ->orderBy('n.title')
        ->distinct();

  $result = $staff_query->execute();
  foreach($result as $row) {
    $site_staff[$row->nid] = $row->title;
  }
  $form['email'] = array(
   '#type' => 'fieldset',
   '#title' => 'Email form to someone else',
   '#collapsible' => TRUE,
   '#collapsed' => TRUE,
  );

  $form['email']['email_form'] = array(
   '#type' => 'checkbox',
   '#title' => t('Email this form for someone else to complete'),
  );

  $form['email']['site_staff'] = array(
    '#type' => 'select',
    '#title' => 'Select who should receive this message',
    '#options' => $site_staff,
  );

  $form['email']['manual_email'] = array(
    '#type' => 'textfield',
    '#title' => 'Or type in an email address',
  );

  $form['email']['subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Message subject',
  );

  $form['email']['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Message body',
    '#description' => 'We will append the link to the form at the bottom of your message.',
  );

  $form['send_form_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Attach form',
  );

  return $form;
}

function s4_sites_send_site_form_validate($form, &$form_state) {
  if ($form_state['values']['email_form'] && $form_state['values']['site_staff'] == 'none' && !valid_email_address($form_state['values']['manual_email'])) {
    form_set_error('manual_email', 'Please enter a valid email address.');
  }
}

function s4_sites_send_site_form_submit($form, &$form_state) {
  if (!$form_state['values']['email_form']) {
    $key = drupal_hmac_base64($form_state['values']['site'] .'_'. $form_state['values']['form'] .'_email', drupal_get_private_key() . drupal_get_hash_salt());
    drupal_goto('sites/form/' . $form_state['values']['site'] .'/'. $form_state['values']['form'] .'/email/'. $key, array('destination' => 'node/'. $form_state['values']['site'] .'/forms'));
    return;
  }
  $email = ($form_state['values']['manual_email'])
       ? $form_state['values']['manual_email']
       : false;
  if (!$email) {
    $coordinator = node_load($form_state['values']['site_staff']);
    $email = field_get_items('node', $coordinator, 'field_email');
    $email = $email[0]['email'];
  }

  drupal_mail('s4_sites',
        'send_site_form',
        $email,
        $coordinator->language,
        array('subject' => $form_state['values']['subject'],
            'body' => $form_state['values']['body'],
            'form' => $form_state['values']['form'],
            'site' => $form_state['values']['site'],
            'email' => $email,
            'key' => drupal_hmac_base64($form_state['values']['site'] .'_'. $form_state['values']['form'] .'_'. $email, drupal_get_private_key() . drupal_get_hash_salt()),
        ));
  drupal_set_message(t('Your message has been sent.'));
}

function s4_sites_form_views_savedsearches_save_search_form_alter(&$form, $form_state) {
  if($form['variables']['display']['#value'] == 'attachment_1') {
    $form = array();
  }
}

function s4_sites_mail($key, &$message, $params) {
  switch($key) {
    case 'send_site_form':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['body'][] = 'You can complete the form online here.';
      $message['body'][] = url('sites/form/' . $params['site'] .'/'. $params['form'] .'/'. $params['email'] .'/'. $params['key'], array('absolute' => true));
      break;
    case 'site_evaluation':
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;
  }

}

function s4_sites_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#instance']['entity_type'] != 'node' || $form['#instance']['bundle'] != 'site') {
    return null;
  }
  
  $form['instance']['s4_sites_field_access'] = array(
    '#type' => 'checkbox',
    '#title' => 'Non department staff can edit this field',
    '#default_value' => ($form['#instance']['s4_sites_field_access']) ? $form['#instance']['s4_sites_field_access'] : FALSE,
  );

}

/**
* Implementation of hook_form_FORM_ID_alter
* Here we're adding links to descriptions as links can't be rendered right
* stright from the admin settings.
*/
function s4_sites_form_site_node_form_alter(&$form, $form_state) {
  drupal_add_js(drupal_get_path('module', 's4_sites') .'/js/s4_site_form.js');
  drupal_add_css(drupal_get_path('module', 's4_sites') .'/css/s4_sites.css');
  
  if (empty($form['#validate'])) {
    $form['#validate'] = array();
  }
  array_unshift($form['#validate'], 's4_sites_form_site_node_form_alter_validate');
  
  $form['actions']['submit']['#value'] = t('Save draft');
  if(user_access('moderate site information')) {
    $form['actions']['publish_now'] = array(
      '#type' => 'submit',
      '#class' => 'form-submit',
      '#value' => t('Save and publish'),
      '#weight' => '9',
      '#submit' => array('s4_sites_form_site_node_form_alter_submit')
    );
  }
  
  if (isset($form['nid']['#value']) && $form['#node']->status == 1) {
    $form['actions']['unpublish'] = array(
      '#type' => 'submit',
      '#class' => 'form-submit',
      '#value' => t('Make inactive'),
      '#weight' => '9',
      '#submit' => array('s4_sites_form_site_node_form_alter_submit')
    );
  }
  
  
  $terms = taxonomy_get_vocabularies();
  foreach($terms as $k => $term) {
    unset($terms[$k]);
    $terms[$term->machine_name] = $term;
  }
  $fields = array('field_site_restrict',
                 'field_csu_facility',
                 'field_csu_org_type',
  );
  foreach($fields as $field_name) {
    $field = field_info_field($field_name);
    $term = $terms[$field['settings']['allowed_values'][0]['vocabulary']];
    if (user_access('edit terms in ' . $term->vid)) {
      $form[$field_name][$form['#node']->language]['#description'] .=
        l('Add new values to this list.', 'admin/structure/taxonomy/' . $term->machine_name, array('attributes' => array('target' => '_blank')));
    }
  }
  if (!user_access('moderate site information')) {
    $form['#theme'] = array();
    $form['#group_children']['field_csu_org_type'] = 'group_site_general';
    $form['#group_children']['field_csu_facility'] = 'group_site_general';
    $form['#group_children']['field_site_other_csu'] = 'group_site_general';
    $form['#group_children']['field_site_language'] = 'group_site_general';
    $form['#group_children']['field_site_language_bilingual'] = 'group_site_general';
    
    $form['revision_information']['#attributes']['class'][] = 'element-invisible';
    $form['revision_information']['#group'] = false;
    foreach($form['#groups'] as $k => $group) {
      $form['#groups'][$k]->format_type = 'accordion-item';
    }
    $form['actions']['submit']['#value'] = t('Propose site');
    $form['#groups']['group_site_tabs']->format_type = 'accordion';
    $fields = field_info_instances('node', 'site');
    foreach($fields as $name => $field) {
      if (!$field['s4_sites_field_access']) {
        $form[$name]['#access'] = $form[$name]['#required'] = false;
      }
    }
    if (arg(3)) {
     $terms = explode(',', arg(3));
     foreach($terms as $term) {
       $form['field_site_restrict'][$form['#node']->language]['#default_value'][] = $term;
     }
    }

    drupal_add_js(array('wysiwyg' => array()), 'setting');
    drupal_set_title(t('Request a new site'));
    drupal_add_js(drupal_get_path('module', 's4_sites') .'/js/s4_sites_accordion.js');
  }
  else {
  	$form['actions_bottom'] = $form['actions'];
		$form['actions_bottom']['#weight'] = 40;
  }
}

function s4_sites_form_site_node_form_alter_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#value'] == $form['actions']['unpublish']['#value']) {
    $form_state['values']['status'] = 0;
  }
}


function s4_sites_form_site_node_form_alter_submit($form, &$form_state) {
  node_form_submit($form, $form_state);
  if ($form_state['triggering_element']['#value'] == $form['actions']['publish_now']['#value'] && isset($form_state['nid'])) {
    $node = node_load($form_state['nid']);
    workbench_moderation_moderate($node, 'published');
  }
  if ($form_state['triggering_element']['#value'] == $form['actions']['unpublish']['#value'] && isset($form_state['nid'])) {
    $node = node_load($form_state['nid']);
    workbench_moderation_moderate($node, 'published');
    $node = node_load($node->nid, NULL, TRUE);
    drupal_goto('node/'. $node->nid .'/moderation/'. $node->workbench_moderation['published']->vid .'/unpublish');
  }

}

/**
* Implements hook_node_presave.
*/
function s4_sites_node_presave($node) {
  if ($node->type == 'site') {
     cache_clear_all('s4_pages_overview_data', 'cache');
     $user = user_load($node->uid);
     if (!user_access('moderate site information') && !$node->s4_sites_import) {
       $node->status = 0;
       drupal_set_message(t('Thanks for your site recommendation. We will be contacting you shortly.'));
     }
  }
  if($node->type == 'coordinator') {
    $first_name = field_get_items('node', $node, 'field_first_name');
    $last_name = field_get_items('node', $node, 'field_last_name');
    $node->title = t('!first !last', array('!first' => $first_name[0]['value'],
                                           '!last' => $last_name[0]['value']));
  }
}

function s4_sites_form_coordinator_node_form_alter(&$form, $form_state) {
  $form['title']['#type'] = 'value';
  $form['title']['#required'] = FALSE;
}

/**
*  Implementation of hook_field_formatter_info_alter
*/
function s4_sites_field_formatter_info() {
  return array(
    's4_sites_local_phone_number' => array(
        'label' => t('Student Signup phone number'),
        'field types' => array('phone_number'),
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
      's4_sites_address' => array(
        'label' => t('Site address'),
        'field types' => array('location'),
      ),
      's4_sites_address_city' => array(
        'label' => t('Just the city'),
        'field types' => array('location'),
      ),
      's4_sites_hours_matrix' => array(
        'label' => t('Site hours'),
        'field types' => array('matrix_text', 'matrix_custom'),
      ),
      's4_sites_population_matrix' => array(
        'label' => t('Site population'),
        'field types' => array('matrix_text', 'matrix_custom'),
      ),
      's4_sites_limited_taxonomy_term' => array(
        'label' => t('Limited taxonomy term'),
        'field types' => array('taxonomy_term_reference'),
      ),
  );
}

/**
*  Implementation of hook_field_formatter_view
*/
function s4_sites_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];
  if ($display['type'] == 's4_sites_hours_matrix') {
    drupal_add_css(drupal_get_path('module', 's4_sites') .'/css/s4_sites.css');
    $element = _s4_sites_format_hours_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  if ($display['type'] == 's4_sites_population_matrix') {
    $element = _s4_sites_format_site_population_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  if ($display['type'] == 's4_sites_local_phone_number') {
    foreach ($items as $delta => $item) {
      $extension = ($item['extension']) ? $item['extension'] : FALSE;
      $element[$delta] = array(
        '#markup' => _s4_sites_format_phone($item['number'], $extension),
      );
    }
  }
  if ($display['type'] == 's4_sites_address_city') {
    
     foreach ($items as $delta => $item) {
       $element[$delta] = array(
        '#markup' => $item['city'],
      );
    }
  }
  if ($display['type'] == 's4_sites_address') {
     foreach ($items as $delta => $item) {
      $output = array();
      if ($item['name']) {
        $output[] = '<strong>'. $item['name'] .'</strong>';
      }
      if ($item['phone']) {
        $output[] = _s4_sites_format_phone($item['phone']);
      }
      if ($item['fax']) {
        $output[] = '<strong>Fax:</strong> ' . _s4_sites_format_phone($item['fax']);
      }
      if ($item['street']) {
        $output[] = $item['street'];
      }
      if ($item['additional']) {
        $output[] = $item['additional'];
      }
      $output[] = $item['city'] .', '. $item['province'] . '&nbsp;&nbsp;' . $item['postal_code'];
      foreach($output as $l => $line) {
        if(strlen(trim($line)) == 0) {
          unset($output[$l]);
        }
      }
      $element[$delta] = array(
        '#markup' => '<address>'. implode('<br />', $output) .'</address>',
      );
    }

  }
  if($display['type'] == 's4_sites_limited_taxonomy_term') {
    foreach($items as &$item) {
      $item = taxonomy_term_load($item['tid']);
      $item = $item->name;
    }
    $items_full = $items;
    $items = array_chunk($items, 5);
    $output = implode(', ', $items[0]);
    if(count($items_full) > 5) {
      $output .= '<div class="popover-wrapper">';
      $output .= l(t('...and @more more', array('@more' => count($items_full) - 5)), '', array('absolute' => TRUE, 'fragment' => 'term-more-'. $field['field_name'], 'attributes' => array('class' => array('popover-link', 'left'))));
      $output .= '<div class="popover-content element-invisible">
            <div>
              '.
              implode(', ', $items_full)
              .'
            </div>
          </div>';
      $output .= '</div>';
    }
    $element[$delta] = array(
      '#markup' => $output,
    );
  }
  return $element;
}

/**
*  Field formatter for phone numbers
*/
function _s4_sites_format_phone($number, $extension = FALSE) {
  $regex = '/^
    ([2-9][0-8]\d)  # area code (Allowed range of [2-9] for the first digit, [0-8] for the second, and [0-9] for the third digit)
    ([2-9]\d{2})    # 3-digit prefix (cannot start with 0 or 1)
    (\d{4})         # 4-digit line number
    /x';

  $result = preg_match($regex, $number, $matches);

  if ($result) {
    $extension = ($extension) ? t(' ext. @extension', array('@extension' => $extension)) : '';
    return $cc['code'] . ' (' . $matches[1] . ') ' . $matches[2] . '-' . $matches[3] . $extension;
  }
  return '';
}

/**
 * Implements hook_form_alter().
 */
function s4_sites_form_s4_core_admin_form_alter(&$form, $form_state) {
  $form['s4_sites_evaluation_form_lead_time'] = array(
    '#title' => t('Lead time for sending evaluation reminders'),
    '#type' => 'select',
    '#description' => t('The number of days before a student\'s service ends where an email should be sent.'),
    '#default_value' => variable_get('s4_sites_evaluation_form_lead_time', '14'),
    '#options' => array('5',
                        '7',
                        '14',
                        '21'),
    );
  $form['s4_sites_enable_program_access'] = array(
    '#title' => t('Enable restricting access to sites based on program'),
    '#type' => 'checkbox',
    '#description' => t('When checked, only users added to a program can edit a site\'s information.'),
    '#default_value' => variable_get('s4_sites_enable_program_access', FALSE),
    );
}

/**
* Implements hook_cron().
*/
function s4_sites_cron() {
  if(variable_get('s4_site_cron_last_date', FALSE) == date('Y-m-d')) {
    return;
  }
  $queue = DrupalQueue::get('s4_site_evaluation_queue');
  
  $query = db_select('field_data_field_signup_last_date', 'd')
              ->condition('d.field_signup_last_date_value', date('Y-m-d', time() + (variable_get('s4_sites_evaluation_form_lead_time', '14') * (24 * 60 * 60))), '=')
              ->condition('d.entity_type', 'node')
              ->condition('d.bundle', 'signup')
              ->fields('d', array('entity_id'));
  $query->leftJoin('field_data_field_form_evaluation_sid', 's', 's.entity_type = d.entity_type AND s.bundle = d.bundle AND s.entity_id = d.entity_id AND s.revision_id = d.revision_id');
  $query->isNull('s.field_form_evaluation_sid_value');
  $results = $query->execute();
              
  foreach($results->fetchAll() as $row) {
    $queue->createItem($row->entity_id);
  }
  variable_set('s4_site_cron_last_date', date('Y-m-d'));
}

/**
 * Implements hook_cron_queue_info().
 */
function s4_sites_queue_info() {
  $queues['s4_site_evaluation_queue'] = array(
    'worker callback' => 's4_sites_send_evaluation', 
    'time' => 60,
  );
  return $queues;
}

/**
 * 
 */
function s4_sites_send_evaluation($signup) {
  $params = array();
  $signup = node_load($signup);
  $site = field_get_items('node', $signup, 'field_site');
  $site = node_load($site[0]['nid']);
  $program = field_get_items('node', $signup, 'field_site_restrict');
  $program = taxonomy_term_load($program[0]['tid']);
  $user = field_get_items('node', $signup, 'field_user');
  $user = user_load($user[0]['uid']);

  $params['subject'] = field_get_items('taxonomy_term', $program, 'field_evaluation_email_subject');
  $params['body'] = field_get_items('taxonomy_term', $program, 'field_evaluation_email_body');
  $params['body'] = token_replace($params['body'], array('s4_signup' => $signup,
                                               's4_site' => $site,
                                               'user' => $user));
  drupal_mail('s4_site', 'site_evaluation', $user->mail, language_default(), $params);
}

function s4_sites_token_info() {
  $tokens['s4_signup']['evaluation_link'] = array('name' => t('Evaluation link'),
                       'description' => t('Link to complete the site evaluation.'),
                       'module' => 's4_sites');
  return array(
    'tokens' => $tokens,
  );
}

function s4_sites_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 's4_signup') {
    $replacements['[s4_signup:evaluation_link]'] = url('signup/'. $data['s4_signup']->nid .'/evaluation', array('absolute' => TRUE));
  }
  return $replacements;
}

/**
*  Field formatter for site hours matrix
*/
function _s4_sites_format_hours_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $hour_count = 0;
  if (count($items[0]) == 1) { //if a single value is passed in from views
    $element[0] = array(
      '#markup' => field_filter_xss($items[0]['value']),
    );
  }

  //transpose the $items array into a [$row][$col] = value arangement
  if(!is_array($raw_items)) {
  	return;
  }
  foreach ($raw_items as $delta => $item) {
    $items[$item['row']][$item['col']][] = matrix_cell_value($item, $field);
  }

  //work out how many rows and columns to show
  // For rows this is rows_count if rows_count > 0, else the number of rows with at least some data in the row.
  if ($field['settings']['rows_count'] > 0) {
    $rows_count = $field['settings']['rows_count'];
  }
  else {
    foreach ($items as $row_id => $row) {
      foreach ($row as $col_id => $value) {
        if ($value != '') {
          $rows_count = $row_id;
        }
      }
    }
  }

  if ($cols_count = $field['settings']['cols_count'] > 0) {
    $cols_count = $field['settings']['cols_count'];
  }
  else {
    foreach ($items as $row_id => $row) {
      foreach ($row as $col_id => $value) {
        if (!empty($value)) {
          $max_cols[$col_id] = $col_id;
        }
      }
    }
    $cols_count = max($max_cols);
  }
  //populate the data part of the table rows
  $rows = array();
  for ($row = 1; $row <= $rows_count; $row++) {
    for ($col = 1; $col <= $cols_count; $col++) {
      $value = array('');
      foreach($items as $item) {
        if($item['row'] == $row && $item['col'] == $col) {
          $value = $item['value'];
        }
      }
      $rows[$row][$col] = $value;
    }
  }
  
  //collapse any multi-valued results into a list
  foreach ($rows as $row_id => $row) {
    foreach ($row as $col_id => $values) {
      if (count($values) > 1) {
        $values = theme('item_list', array('items' => $values));
      }
      else {
        $values = $values[0];
      }
      $yes_class = ($values) ? 'hours-yes' : 'hours-no';
      if ($values) {
       $hour_count++;
      }
      $rows[$row_id][$col_id] = array('data' => ($values) ? 'available' : 'not available', 'class' => $yes_class . '   matrix-col-'. $col_id .' matrix-row-'. $row_id .' matrix-cell-'. $row_id .'-'. $col_id);
    }
  }

  if ($field['type'] == 'matrix_text' && $field['settings']['spreadsheet_style'] == TRUE) {
    for ($col = 1; $col <= $cols_count; $col++) {
      $headers[$col] = matrix_make_letter($col);
    }
    array_unshift($headers, ''); //cell 0,0

    for ($row = 1; $row <= $rows_count; $row++) {
      $cell = array('data' => $row, 'scope' => 'row', 'header' => true, 'class' => 'matrix-col-header');
      array_unshift($rows[$row], $cell);
    }
  }
  elseif ($field['type'] == 'matrix_custom') {
    $headers = array();
    $headers = array_fill(1, $cols_count, '&nbsp;'); //initialize the headers with spaces (in case headers have not title set)
    $settings = unserialize($field['settings']['settings']);
    
    if (isset($settings['cols'])) {
      foreach ($settings['cols'] as $col_id => $col) {
        $headers[$col_id] = $col['title'];
      }
    }

    if ($field['settings']['rows_count'] > 0) { //had left lables so translate the headers one to the right
      array_unshift($headers, ''); //cell 0,0
    }

    if (!empty($settings['rows'])) {
      foreach ($settings['rows'] as $row_id => $row) {
        $cell = array('data' => $row['title'], 'scope' => 'row', 'header' => true, 'class' => 'matrix-col-header');
        if (isset($rows[$row_id])) {
          array_unshift($rows[$row_id], $cell);
        }
      }
    }
  }
  else {
    $headers = NULL;
  }

  $element[0] = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
    '#attributes' => array('class' => array('hidden-phone')),
    '#caption' => 'Available times are <span class="hours-sample">marked in dark blue</span>.',
  );
  if (!$hour_count) {
   return null;
  }
  return $element;
}

/**
*  Field format callback for population matrix fields
*/
function _s4_sites_format_site_population_matrix($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = unserialize($field['settings']['settings']);
  $data = array();
  foreach($items as $row) {
    $data[$settings['rows'][$row['row']]['title']] = $row['value'];
  }
  $element[0] = array(
    '#theme' => 's4_reporting_chart_pie',
    '#id' => 'demographics-pie',
    '#label' => 'Population',
    '#title' => '',
    '#width' => 240,
    '#height' => 220,
    '#data' => $data,
  );
  return $element;
}

/**
*
*/
function s4_sites_s4_reporting_info() {
  $info = array();
  foreach(array('site', 'file', 'coordinator', 'contact_record') as $type) {
    $fields = field_info_instances('node', $type);
    foreach($fields as $name => $field) {
      $info['s4_sites']['filters'][$type][$name] = $field;
      $info['s4_sites']['fields'][$type][$name] = $field;
    }
    $info['s4_sites']['types'][$type] = node_type_load($type);
  }
  return $info;
}

function s4_sites_s4_reporting_summary_report() {
  return array('_s4_sites_reporting_general' => array('callback' => '_s4_sites_reporting_general',
                'file' => drupal_get_path('module', 's4_sites') .'/s4_sites.reporting.inc',
                'title' => t('General site information')),
          '_s4_sites_reporting_report_org_type' => array('callback' => '_s4_sites_reporting_report_org_type',
                'file' => drupal_get_path('module', 's4_sites') .'/s4_sites.reporting.inc',
                'title' => t('Organization type')),
          '_s4_sites_reporting_report_issues' => array('callback' => '_s4_sites_reporting_report_issues',
                'file' => drupal_get_path('module', 's4_sites') .'/s4_sites.reporting.inc',
                'title' => t('Issues addressed')),
          '_s4_sites_reporting_district_lower' => array('callback' => '_s4_sites_reporting_district_lower',
                'file' => drupal_get_path('module', 's4_sites') .'/s4_sites.reporting.inc',
                'title' => t('State lower district')),
          '_s4_sites_reporting_district_upper' => array('callback' => '_s4_sites_reporting_district_upper',
                'file' => drupal_get_path('module', 's4_sites') .'/s4_sites.reporting.inc',
                'title' => t('State upper district')),                                 
                                                );
}

/**
*  Implementation of hook_s4_help
*/
function s4_sites_s4_help($path) {
  module_load_include('inc', 's4_sites', 's4_sites.help');
  return _s4_sites_help($path);
}

function s4_sites_s4_site_configuration() {
  return array(
    'category_restrictions' => array(
      'group' => t('Categories'),
      'title' => t('Programs'),
      'description' => t('Manage the types of programs a student, site, site staff, and course can be associated with.'),
      'href' => 'admin/structure/taxonomy/site_restrictions',
    ),
    'category_files' => array(
      'group' => t('Categories'),
      'title' => t('File categories'),
      'description' => t('Change how files attached to sites are categorized.'),
      'href' => 'admin/structure/taxonomy/file_category',
    ),
    'category_issues' => array(
      'group' => t('Categories'),
      'title' => t('Issues addressed'),
      'description' => t('Manage the list of issues addressed by sites.'),
      'href' => 'admin/structure/taxonomy/issues_addressed',
    ),
    'category_site_org' => array(
      'group' => t('Categories'),
      'title' => t('Organization type'),
      'description' => t('Manage the list of site organization types.'),
      'href' => 'admin/structure/taxonomy/organization_type',
    ),
    'category_site_org' => array(
      'group' => t('Categories'),
      'title' => t('Languages'),
      'description' => t('Manage the list of site languages.'),
      'href' => 'admin/structure/taxonomy/language',
    ),
    'category_requirements' => array(
      'group' => t('Categories'),
      'title' => t('Site special requirements'),
      'description' => t('Special requirements like training or other risk-associated restrictions.'),
      'href' => 'admin/structure/taxonomy/special_requirements',
    ),
    'category_staff' => array(
      'group' => t('Categories'),
      'title' => t('Site staff roles'),
      'description' => t('Manage the list of available site staff roles like "Executive Director" or "Site supervisor."'),
      'href' => 'admin/structure/taxonomy/site_staff_role',
    ),
  );
}

/**
 * Define a 75%/25% layout for sites
 */
function s4_sites_ds_layout_info() {
  $path = drupal_get_path('module', 's4_sites');

  $layouts = array(
    's4_site' => array(
      'label' => t('Two column 75/25 stacked'),
      'path' => $path . '/layouts/s4_site',
      'regions' => array(
        'left' => t('Left'),
        'right' => t('Right'),
        'details' => t('Details'),
        'details_1' => t('Details section one'),
        'details_2' => t('Details section two'),
        'details_3' => t('Details section three'),
        'details_4' => t('Details section four'),
        'risks' => t('Risks'),
        'staff' => t('Site staff'),
        'hours' => t('Hours'),
      ),
      'css' => TRUE,
      'form' => TRUE
    ),
  );

  return $layouts;
}

/**
 * Implements hook_theme_registry_alter();
 */
function s4_sites_theme_registry_alter(&$items) {
  $items['field_collection_table_multiple_value_fields']['function'] = 's4_sites_theme_field_collection_table';
}

/**
 * Implements hook_theme().
 */
function s4_sites_theme() {
  return array('s4_sites_log_page' => array(
    'template' => 's4-sites-log-page',
    'path' => drupal_get_path('module', 's4_sites') .'/theme',
    'variables' => array('site' => array(), 'moderate_form' => '', 'send_form' => '', 'form' => '', 'results' => '')),
  );
}

/**
 * Theme alter to make field collection labels not be in the first column
 */
function s4_sites_theme_field_collection_table($variables) {
  $element = $variables['element'];
  $output = '';

  if (isset($element['#cardinality']) && ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED)) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? '<span class="form-required" title="' . t('This field is required. ') . '">*</span>' : '';

    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    $header = array('');
    // Add the items as table rows.
    foreach ($items as $key => $item) {
      uasort($item, 'element_sort');
      $item['_weight']['#attributes']['class'] = array($order_class);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
      );
      foreach (element_children($item) as $field_name) {
        // Only add the header once.
        if ($key == 0 && $field_name != '_weight') {
          $header[] = array(
            'data' => '<label>' . t('!title', array('!title' => _field_collection_table_get_title($item[$field_name]))) . '</label>',
            'class' => array('field-label'),
          );
        }
        elseif ($key == 0 && $field_name == '_weight') {
          $header[] = array(
            'data' => '<label>' . t('!title', array('!title' => _field_collection_table_get_title($item[$field_name]))) . '</label>',
            'class' => array('element-invisible'),
          );
        }
        $class = array();
        if($field_name == '_weight') {
           $class[] = 'element-invisible';
        }
        $cells[] = array('data' => $item[$field_name],
                         'class' => $class);
      }
      $rows[] = $cells;
    }

    $output = array(
      '#prefix' => '<div class="form-item">',
      '#suffix' => '</div>',
    );
    $output['field_collection_table'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => $table_id,
        'class' => array(
          'field-multiple-table',
        ),
      ),
    );
    if (!empty($element['#description'])) {
      $output[] = array(
        '#prefix' => '<div class="description">',
        '#suffix' => '</div>',
        '#markup' => $element['#description'],
      );
    }
    if (isset($add_more_button)) {
      $output[] = $add_more_button + array(
        '#prefix' => '<div class="clearfix">',
        '#suffix' => '</div>',
      );
    }

    $output = '<label>' . t('!title: !required', array('!title' => $element['#title'], '!required' => $required)) .'</label>'
               . drupal_render($output);

  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }

  return $output;
}

/**
 * Alter the public site search form to expand if there are values in the advanced search fieldset.
 * Implements hook_form_FORM_ID_alter().
 */
function s4_sites_form_views_exposed_form_alter(&$form, $form_state) {
  if($form_state['view']->name == 'sites') {
    $set_filters = array();
    foreach($form_state['view']->exposed_input as $field => $value) {
      if(is_array($value) || strlen($value) > 0) {
        $set_filters[$field] = $field;
      }
    }
    foreach($form['filters'] as &$filter) {
      if(is_array($filter) && $filter['#collapsed']) {
        foreach($filter as $field_name => $field) {
          if($set_filters[$field_name]) {
            $filter['#collapsed'] = FALSE;
          }
        }
      }
    }
  }
}