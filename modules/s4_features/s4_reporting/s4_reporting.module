<?php
/**
 * @file
 * Code for the S4 Reporting feature.
 */

include_once('s4_reporting.features.inc');

function s4_reporting_menu() {
	$items = array();
	
	$items['node/%node/responses'] = array(
		'title' => 'Responses',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/signup'] = array(
		'title' => 'Signup',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'signup'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/evaluation'] = array(
		'title' => 'Evaluations',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'evaluation'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['reports/terms'] = array(
		'title' => 'Terms',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_reporting_term_report'),
		'access arguments' => array('view all webform fields'),
		'file' => 's4_reporting.pages.inc',
	);

	return $items;
}

function s4_reporting_form_views_exposed_form_alter(&$form, $form_state) {
	$saved_searches = variable_get('views_savedsearches', array());
	if($saved_searches[$form_state['view']->name]) {
		global $user;
		$saved_searches = views_savedsearches_load_multiple($user->uid, $form_state['view']->vid);
		if(count($saved_searches)) {
			$fancybox_settings = variable_get('fancybox_settings', array());
			if (!empty($fancybox_settings)) {
				fancybox_activate($fancybox_settings);
			}
			drupal_add_js(drupal_get_path('module', 's4_reporting') .'/js/s4_reporting.views.js');
			$form['show-searches'] = array(
				'#markup' => '<a href="#saved-search-selector" id="show-searches" class="show-form-fancybox button" data-selector="#saved-search-selector">Saved searches</a>',
			);
		}
	}
	
}

function s4_reporting_form_views_savedsearches_delete_search_form_alter(&$form, $form_state) {
	$form['#prefix'] = '<div class="element-invisible"  id="saved-search-selector">';
	$form['#suffix'] = '</div>';
	$form['saved_collapse']['#collapsible'] = FALSE;
	$form['saved_collapse']['#collapsed'] = FALSE;
}

function s4_reporting_form_views_savedsearches_save_search_form_alter(&$form, $form_state) {
	$form['name']['#title'] = t('Save this search as');
}

function s4_reporting_form_report_node_form_alter(&$form, $form_state) {
	drupal_add_js(drupal_get_path('module', 's4_reporting') .'/js/s4_reporting.js');
	foreach($form['field_report_filters'][$form['#node']->language] as $key => $field_entity) {
		if(is_numeric($key) && is_array($field_entity) && isset($field_entity['field_filter_field'])) {
			$field = &$form['field_report_filters'][$form['#node']->language][$key]['field_filter_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_filter_fields();
		}
	}
	foreach($form['field_report_fields'][$form['#node']->language] as $key => $field_entity) {
		if(is_numeric($key) && is_array($field_entity) && isset($field_entity['field_report_field'])) {
			$field = &$form['field_report_fields'][$form['#node']->language][$key]['field_report_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_field_fields();
		}
	}
	$info = _s4_reporting_get_fields();
	$filter_settings = array();
	foreach($info['filters'] as $bundle => $filters) {
		foreach($filters as $filter_key => $filter) {
			$options = s4_reporting_get_options($filter);
			foreach($options as $k => $option) {
				$options[$k] = text_summary($option, null, 40);
			}
			if(count($options)) {
				$filter_settings[$filter['bundle'] .'|'. $filter['field_name']] = $options;
			}
		}
	}
	drupal_add_js(array('s4_reporting_filters' => $filter_settings), 'setting');
}

function s4_reporting_get_options($field) {
	$type = str_replace('options_', '', $field['widget']['type']);
	$multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
	$properties = _options_properties($type, $multiple, null, null);
	
	// Prepare the list of options.
	return _options_get_options(field_info_field($field['field_name']), $field, $properties);
}

function s4_reporting_get_filter_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['filters'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field['bundle'] .'|'. $field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function s4_reporting_get_field_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['fields'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field['bundle'] .'|'. $field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function _s4_reporting_get_fields() {
	static $info;
	if(is_array($info)) {
		return $info;
	}
	$info = array('filters' => array(), 'fields' => array(), 'types' => array());
	foreach(module_invoke_all('s4_reporting_info') as $module => $options) {
		$info['filters'] += $options['filters'];
		$info['fields'] += $options['fields'];
		$info['types'] += $options['types'];
	}
	return $info;
}

function s4_reporting_object_report_access($node) {
	return (in_array($node->type, array('site', 'course')) && node_access('update', $node));
}

function s4_reporting_block_info() {
	$blocks['site_summary'] = array('info' => 'Site summary');
	$blocks['course_summary'] = array('info' => 'Course summary');
	return $blocks;
}

function s4_reporting_block_view($delta) {
  module_load_include('inc', 's4_reporting', 's4_reporting.blocks');
  $function_name = 's4_reporting_block_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
  return NULL;
}

/**
*	Implementation of hook_theme
*/
function s4_reporting_theme($existing, $type, $theme, $path) {
	return array(
		's4_reporting_chart_pie' => array(
			'variables' => array('data' => array(), 'width' => '', 'height' => '', 'label' => '', 'title' => '','id' => ''),
		),
	);
}

function s4_reporting_theme_registry_alter(&$items) {
	$items['views_savedsearches_list']['function'] = 's4_reporting_theme_views_savedsearches_list';
	$items['views_savedsearches_container']['function'] = 's4_reporting_theme_views_savedsearches_container';
}

function s4_reporting_theme_views_savedsearches_container($variables) {
	$view = $variables['view'];
	$views_filters_form_values = $variables['views_filters_form_values'];
	$output = '';

	$view_filters = _views_savedsearches_params_to_filters($view, $views_filters_form_values);
	$current_view_matches_sid = views_savedsearches_sid_by_filters($view_filters);
	
	// The list (also delete saved search form).
	$output .= '<div class="views-savedsearches-list-ahah">';
	$output .= theme('views_savedsearches_list', array('view' => $view, 'current_view_matches_sid' => $current_view_matches_sid));
	$output .= '</div>';
	
	// The save search form.
	$output .= '<div class="views-savedsearches-save-ahah">';
	if ($current_view_matches_sid == -1 && count($view_filters)) {
		$output .= drupal_render(drupal_get_form('views_savedsearches_save_search_form', $view));
	}
	$output .= '</div>';
	
	return $output;
}

function s4_reporting_theme_views_savedsearches_list($variables) {
  global $user;
  $view = $variables['view'];
  $current_view_matches_sid = $variables['current_view_matches_sid'];
  $output = '';

  // Load saved searches for the current user, to use them as form options.
  if(user_access('use all savedsearches')){
    $saved_searches = views_savedsearches_load_multiple(NULL, $view->vid, $view->name);
  }
  else{
    $saved_searches = views_savedsearches_load_multiple($user->uid, $view->vid, $view->name);
  }
  $options = _views_savedsearches_saved_searches_to_form_options($saved_searches, $view->get_path(), $current_view_matches_sid);

  // Display a list of saved searches (if there are any) and allow the user to
  // delete any of them.
  if (count($options)) {
    $output .= drupal_render(drupal_get_form('views_savedsearches_delete_search_form', $view, $options, $current_view_matches_sid));
  }

  return $output;
}

function theme_s4_reporting_chart_pie($data) {
	drupal_add_js('https://www.google.com/jsapi');
	$script = 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();
		%s
        var chart = new google.visualization.PieChart(document.getElementById("'. $data['id'] .'"));
        chart.draw(data, {pieSliceText : "label", legend : "none", tooltipText: "percentage",  width: '. $data['width'] .', height: '. $data['height'] .', title: "'. $data['title'] .'", chartArea : {height: '. $data['height'] .', width: '. $data['width'] .'}});
      }';
    $values = array();
	$values[] = 'data.addColumn("string", "'. $data['label'] .'");';
	$values[] = 'data.addColumn("number", "Values");';
	$values[] = 'data.addRows('. count($data['data']) .');';
	$i = 0;
	foreach($data['data'] as $type => $value) {
		if($value) {
			$values[] = 'data.setValue('. $i .',0,"'. $type .'");';
			$values[] = 'data.setValue('. $i .',1,'. $value .');';
			$i++;
		}
	}
	if(count($values) == 3) {
		return null;
	}
	drupal_add_js(sprintf($script, implode("\n", $values)), 'inline');
	return '<div class="chart-pie" id="'. $data['id'] .'"></div>';
}

function s4_reporting_views_pre_render($view) {
	if($view->name == 'report_students' && arg(0) == 'reports') {
		module_load_include('inc', 'webform', 'includes/webform.submissions');
		if(isset($view->result[0]->field_field_form_signup_sid)) { 
			s4_reporting_append_form_to_view($view, 'field_field_form_signup_sid', 'field_field_site_form');
		}
	}
}

function s4_reporting_append_form_to_view($view, $signup_field, $site_field) {
	static $webform_fields;
	foreach($view->result as $result_key => $result) {
		$form = $result->{$site_field}[0]['raw']['nid'];
		$sid = $result->{$signup_field}[0]['raw']['value'];
		$submission = webform_get_submission($form, $sid);
		$form = node_load($form);
		/**
		*	Please don't look so hard at this, you might go blind.
		*/
		foreach($form->webform['components'] as $key => $component) {
			$view->result[$result_key]->{$component['form_key']} = array(
				'rendered' => array(
					'#markup' => webform_component_invoke($component['type'], 'table', $component, $submission->data[$key]['value'])
				),
				'raw' => array(
					'value' => $submission->data[$key]['value'],
				),
			);
			if(!isset($view->field[$component['form_key']])) {
				foreach($view->field as $field_key => $field) {
					if(get_class($field) == 'views_handler_field_field') {
						$view->field[$component['form_key']] = clone $view->field[$field_key];
					}
				}
				$view->field[$component['form_key']] = new views_handler_field_field();
				$view->field[$component['form_key']]->view = $view->field['nid']->view;
				$view->field[$component['form_key']]->query = $view->field['nid']->query;
				$view->field[$component['form_key']]->handler_type = 'field';
				$view->field[$component['form_key']]->is_handler = TRUE;
				$view->field[$component['form_key']]->additional_fields[$component['form_key']] = array(
					'table' => 'node',
					'field' => 'nid',
				);
				$view->field[$component['form_key']]->options['label'] = $component['name'];
				$view->field[$component['form_key']]->options['exclude'] = 0;
				$view->field[$component['form_key']]->options['id'] = $component['form_key'];
				$view->field[$component['form_key']]->aliases = array($component['form_key'] =>  $component['form_key']);
				$view->field[$component['form_key']]->field = $component['form_key'];
				$view->field[$component['form_key']]->field_alias = $component['form_key'];
				
			}
		}
	}
}

function s4_reporting_s4_reporting_term_report($report_criteria) {
	/*$totals = array('courses' => array('count' => 0,
											   'title' => t('Total service learning courses')),
						'students' => array('count' => 0,
											   'title' => t('Total students')),
						'placements' => array('count' => 0,
											   'title' => t('Total placements')),
					);
	$courses = array();			
	$query = db_select('node_revision', 'r')
				   ->fields('r', array('nid', 'status'));
    $query->leftJoin('field_data_field_term', 't', 't.entity_id = r.nid AND t.bundle = :course', array(':course' => 'course'));
    $query->fields('t', array('field_term_nid'));
    if($report_criteria['term']) {
    	$query->condition('t.field_term_nid', $report_criteria['term']->nid);
    }
    else {
	    $query->condition('r.timestamp', strtotime($report_criteria['start']), '>=')
	    	  ->condition('r.timestamp', strtotime($report_criteria['end']), '<=');
	}
	$query->leftJoin('field_data_field_course_students', 's', 's.entity_id = r.nid AND s.bundle = :course', array(':course' => 'course'));
	$query->leftJoin('field_data_field_user', 'u', 's.field_course_students_uid = u.field_user_uid AND u.bundle = :signup', array(':signup' => 'signup'));
	$query->leftJoin('field_data_field_course', 'c', 'c.field_course_nid = r.nid AND c.bundle = :signup', array(':signup' => 'signup'));
	$query->fields('c', array('entity_id'));
	$query->fields('s', array('field_course_students_uid'));
	$query->leftJoin('node', 'n', 'n.vid = r.vid');
	$query->condition('n.type', 'course');
	$results = $query->execute()->fetchAll();
	
	foreach($results as $result) {
		$courses[$result->nid]++;
		$totals['students']['count']++;
		$signups[$result->entity_id]++;
	};
	$totals['courses']['count'] = count($courses);
	$totals['placements']['count'] = count($signups);
	
	
	return array('totals' => $totals,
				 'output' => $output,
				);*/
}