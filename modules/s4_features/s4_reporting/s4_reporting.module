<?php
/**
 * @file
 * Code for the S4 Reporting feature.
 */

include_once('s4_reporting.features.inc');

function s4_reporting_menu() {
	$items = array();
	
	$items['node/%node/responses'] = array(
		'title' => 'Responses',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/signup'] = array(
		'title' => 'Signup',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'signup'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/evaluation'] = array(
		'title' => 'Evaluations',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'evaluation'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/report'] = array(
		'title' => 'View report',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 's4_reporting_run_report',
		'page arguments' => array(1),
		'access callback' => 's4_reporting_run_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
	);

	return $items;
}

function s4_reporting_run_report_access($node) {
	return ($node->type == 'report' && user_access('view s4 reports'));
}

function s4_reporting_form_report_node_form_alter(&$form, $form_state) {
	drupal_add_js(drupal_get_path('module', 's4_reporting') .'/js/s4_reporting.js');
	foreach($form['field_report_filters'][$form['#node']->language] as $key => $field_entity) {
		if(is_numeric($key) && is_array($field_entity) && isset($field_entity['field_filter_field'])) {
			$field = &$form['field_report_filters'][$form['#node']->language][$key]['field_filter_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_filter_fields();
		}
	}
	foreach($form['field_report_fields'][$form['#node']->language] as $key => $field_entity) {
		if(is_numeric($key) && is_array($field_entity) && isset($field_entity['field_report_field'])) {
			$field = &$form['field_report_fields'][$form['#node']->language][$key]['field_report_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_field_fields();
		}
	}
	$info = _s4_reporting_get_fields();
	$filter_settings = array();
	foreach($info['filters'] as $bundle => $filters) {
		foreach($filters as $filter_key => $filter) {
			$value_key = key($field['columns']);

			$type = str_replace('options_', '', $filter['widget']['type']);
			$multiple = $filter['cardinality'] > 1 || $filter['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
			$properties = _options_properties($type, $multiple, null, null);
			
			// Prepare the list of options.
			$options = _options_get_options(field_info_field($filter['field_name']), $field, $properties);
			if(count($options)) {
				$filter_settings[$filter['field_name']] = $options;
			}
		}
	}
	drupal_add_js(array('s4_reporting_filters' => $filter_settings), 'setting');
}

function s4_reporting_get_filter_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['filters'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function s4_reporting_get_field_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['fields'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function _s4_reporting_get_fields() {
	static $info;
	if(is_array($info)) {
		return $info;
	}
	$info = array('filters' => array(), 'fields' => array(), 'types' => array());
	foreach(module_invoke_all('s4_reporting_info') as $module => $options) {
		$info['filters'] += $options['filters'];
		$info['fields'] += $options['fields'];
		$info['types'] += $options['types'];
	}
	return $info;
}

function s4_reporting_object_report_access($node) {
	return (in_array($node->type, array('site', 'course')) && node_access('update', $node));
}

function s4_reporting_block_info() {
	$blocks['site_summary'] = array('info' => 'Site summary');
	$blocks['course_summary'] = array('info' => 'Course summary');
	return $blocks;
}

function s4_reporting_block_view($delta) {
  module_load_include('inc', 's4_reporting', 's4_reporting.blocks');
  $function_name = 's4_reporting_block_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
  return NULL;
}

/**
*	Implementation of hook_theme
*/
function s4_reporting_theme($existing, $type, $theme, $path) {
	return array(
		's4_reporting_chart_pie' => array(
			'variables' => array('data' => array(), 'width' => '', 'height' => '', 'label' => '', 'title' => '','id' => ''),
		),
	);
}

function theme_s4_reporting_chart_pie($data) {
	drupal_add_js('https://www.google.com/jsapi');
	$script = 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();
		%s
        var chart = new google.visualization.PieChart(document.getElementById("'. $data['id'] .'"));
        chart.draw(data, {pieSliceText : "label", legend : "none", tooltipText: "percentage",  width: '. $data['width'] .', height: '. $data['height'] .', title: "'. $data['title'] .'", chartArea : {height: '. $data['height'] .', width: '. $data['width'] .'}});
      }';
    $values = array();
	$values[] = 'data.addColumn("string", "'. $data['label'] .'");';
	$values[] = 'data.addColumn("number", "Values");';
	$values[] = 'data.addRows('. count($data['data']) .');';
	$i = 0;
	foreach($data['data'] as $type => $value) {
		if($value) {
			$values[] = 'data.setValue('. $i .',0,"'. $type .'");';
			$values[] = 'data.setValue('. $i .',1,'. $value .');';
			$i++;
		}
	}
	if(count($values) == 3) {
		return null;
	}
	drupal_add_js(sprintf($script, implode("\n", $values)), 'inline');
	return '<div class="chart-pie" id="'. $data['id'] .'"></div>';
}
