<?php
/**
 * @file
 * Code for the S4 Reporting feature.
 */

include_once('s4_reporting.features.inc');

function s4_reporting_menu() {
	$items = array();
	
	$items['node/%node/responses'] = array(
		'title' => 'Responses',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/signup'] = array(
		'title' => 'Signup',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'signup'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/evaluation'] = array(
		'title' => 'Evaluations',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'evaluation'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['reports/terms'] = array(
		'title' => 'Term Summary',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_reporting_term_report'),
		'access arguments' => array('view all webform fields'),
		'file' => 's4_reporting.pages.inc',
		'weight' => 9,
	);
	
	$items['reports-forms/%'] = array(
	 'title' => 'View report',	 
	 'title callback' => 's4_reporting_view_form_title',
	 'title arguments' => array(1),
	 'page callback' => 's4_reporting_view_form_report',
	 'page arguments' => array(1),
	 'access arguments' => array('access s4 reporting'),
		'file' => 's4_reporting.pages.inc',
	);
	
	$items['reports-forms/%/summary'] = array(
	 'title' => 'Summary',
	 'type' => MENU_DEFAULT_LOCAL_TASK,
	 'page callback' => 's4_reporting_view_form_report',
	 'page arguments' => array(1),
	 'access arguments' => array('access s4 reporting'),
		'file' => 's4_reporting.pages.inc',
	);
	
	$items['reports-forms/%/download'] = array(
	 'title' => 'Download',
	 'type' => MENU_LOCAL_TASK,
	 'page callback' => 'drupal_get_form',
	 'page arguments' => array('s4_reporting_view_form_report_form', 1),
	 'access arguments' => array('access s4 reporting'),
		'file' => 's4_reporting.pages.inc',
	);
	
	$items['reports-forms/%/responses'] = array(
	 'title' => 'Responses',
	 'type' => MENU_LOCAL_TASK,
	 'page callback' => 's4_reporting_view_form_report_responses',
	 'page arguments' => array(1),
	 'access arguments' => array('access s4 reporting'),
		'file' => 's4_reporting.pages.inc',
	);

	return $items;
}

function s4_reporting_form_views_exposed_form_alter(&$form, $form_state) {
	$saved_searches = variable_get('views_savedsearches', array());
	if ($saved_searches[$form_state['view']->name]) {
		global $user;
		$saved_searches = views_savedsearches_load_multiple($user->uid, $form_state['view']->vid);
		if (count($saved_searches)) {
			$fancybox_settings = variable_get('fancybox_settings', array());
			if (!empty($fancybox_settings)) {
				fancybox_activate($fancybox_settings);
			}
			drupal_add_js(drupal_get_path('module', 's4_reporting') .'/js/s4_reporting.views.js');
			$form['show-searches'] = array(
				'#markup' => '<a href="#saved-search-selector" id="show-searches" class="show-form-fancybox button" data-selector="#saved-search-selector">Saved searches</a>',
			);
		}
	}
	if($form_state['view']->name == 'reports_sites') {
  	$district_fields = 
  	 array('field_district_federal_value' => 'field_data_field_district_federal',
  	       'field_district_state_lower_value' => 'field_data_field_district_state_lower',
  	       'field_district_state_upper_value' => 'field_data_field_district_state_upper');
  	
  	foreach($form['filters'] as &$filter) {
    	if(is_array($filter)) {
      	foreach($filter as $field_name => &$field) {
        	if(isset($district_fields[$field_name])) {
          	$field['#type'] = 'select';
          	$field['#options'] = array();
          	unset($field['#size']);
          	$field['#empty_option'] = t('-- Any --');
          	$query = db_select($district_fields[$field_name], 'd');
          	$query->addField('d', $field_name, 'value');
          	$query->distinct();
          	$districts = $query->execute();
            $field['#options'] = $districts->fetchCol(0);
          	             
        	}
      	}
    	}
  	}
	}
}

function s4_reporting_form_views_savedsearches_delete_search_form_alter(&$form, $form_state) {
	$form['#prefix'] = '<div class="element-invisible"  id="saved-search-selector">';
	$form['#suffix'] = '</div>';
	$form['saved_collapse']['#collapsible'] = FALSE;
	$form['saved_collapse']['#collapsed'] = FALSE;
}

function s4_reporting_form_views_savedsearches_save_search_form_alter(&$form, $form_state) {
	$form['name']['#title'] = t('Save this search as');
}

function s4_reporting_form_report_node_form_alter(&$form, $form_state) {
	drupal_add_js(drupal_get_path('module', 's4_reporting') .'/js/s4_reporting.js');
	foreach($form['field_report_filters'][$form['#node']->language] as $key => $field_entity) {
		if (is_numeric($key) && is_array($field_entity) && isset($field_entity['field_filter_field'])) {
			$field = &$form['field_report_filters'][$form['#node']->language][$key]['field_filter_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_filter_fields();
		}
	}
	foreach($form['field_report_fields'][$form['#node']->language] as $key => $field_entity) {
		if (is_numeric($key) && is_array($field_entity) && isset($field_entity['field_report_field'])) {
			$field = &$form['field_report_fields'][$form['#node']->language][$key]['field_report_field'];
			$field[$field['#language']]['#options'] = s4_reporting_get_field_fields();
		}
	}
	$info = _s4_reporting_get_fields();
	$filter_settings = array();
	foreach($info['filters'] as $bundle => $filters) {
		foreach($filters as $filter_key => $filter) {
			$options = s4_reporting_get_options($filter);
			foreach($options as $k => $option) {
				$options[$k] = text_summary($option, null, 40);
			}
			if (count($options)) {
				$filter_settings[$filter['bundle'] .'|'. $filter['field_name']] = $options;
			}
		}
	}
	drupal_add_js(array('s4_reporting_filters' => $filter_settings), 'setting');
}

function s4_reporting_get_options($field) {
	$type = str_replace('options_', '', $field['widget']['type']);
	$multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
	$properties = _options_properties($type, $multiple, null, null);
	
	// Prepare the list of options.
	return _options_get_options(field_info_field($field['field_name']), $field, $properties);
}

function s4_reporting_get_filter_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['filters'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field['bundle'] .'|'. $field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function s4_reporting_get_field_fields() {
	$filters = _s4_reporting_get_fields('filters');
	$options = array();
	foreach($filters['fields'] as $type => $fields) {
		foreach($fields as $field_name => $field) {
			$options[$filters['types'][$type]->name][$field['bundle'] .'|'. $field_name] = text_summary($field['label'], null, 50);
		}
	}
	return $options;
}

function _s4_reporting_get_fields() {
	static $info;
	if (is_array($info)) {
		return $info;
	}
	$info = array('filters' => array(), 'fields' => array(), 'types' => array());
	foreach(module_invoke_all('s4_reporting_info') as $module => $options) {
		$info['filters'] += $options['filters'];
		$info['fields'] += $options['fields'];
		$info['types'] += $options['types'];
	}
	return $info;
}

function s4_reporting_object_report_access($node) {
	return (in_array($node->type, array('site', 'course')) && node_access('update', $node));
}

function s4_reporting_block_info() {
	$blocks['site_summary'] = array('info' => 'Site summary');
	$blocks['course_summary'] = array('info' => 'Course summary');
	$blocks['frontpage_demographics'] = array('info' => 'Frontpage: Demographics');
	return $blocks;
}

function s4_reporting_block_view($delta) {
  module_load_include('inc', 's4_reporting', 's4_reporting.blocks');
  $function_name = 's4_reporting_block_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
  return NULL;
}

/**
*	Implementation of hook_theme
*/
function s4_reporting_theme($existing, $type, $theme, $path) {
	return array(
		's4_reporting_chart_pie' => array(
			'variables' => array('data' => array(), 'width' => '', 'height' => '', 'label' => '', 'title' => '','id' => ''),
		),
	);
}

function s4_reporting_theme_registry_alter(&$items) {
	$items['views_savedsearches_list']['function'] = 's4_reporting_theme_views_savedsearches_list';
	$items['views_savedsearches_container']['function'] = 's4_reporting_theme_views_savedsearches_container';
}

function s4_reporting_theme_views_savedsearches_container($variables) {
	$view = $variables['view'];
	$views_filters_form_values = $variables['views_filters_form_values'];
	$output = '';

	$view_filters = _views_savedsearches_params_to_filters($view, $views_filters_form_values);
	$current_view_matches_sid = views_savedsearches_sid_by_filters($view_filters);
	
	// The list (also delete saved search form).
	$output .= '<div class="views-savedsearches-list-ahah">';
	$output .= theme('views_savedsearches_list', array('view' => $view, 'current_view_matches_sid' => $current_view_matches_sid));
	$output .= '</div>';
	
	// The save search form.
	$output .= '<div class="views-savedsearches-save-ahah">';
	if ($current_view_matches_sid == -1 && count($view_filters)) {
		$output .= drupal_render(drupal_get_form('views_savedsearches_save_search_form', $view));
	}
	$output .= '</div>';
	
	return $output;
}

function s4_reporting_theme_views_savedsearches_list($variables) {
  global $user;
  $view = $variables['view'];
  $current_view_matches_sid = $variables['current_view_matches_sid'];
  $output = '';

  // Load saved searches for the current user, to use them as form options.
  if (user_access('use all savedsearches')){
    $saved_searches = views_savedsearches_load_multiple(NULL, $view->vid, $view->name);
  }
  else{
    $saved_searches = views_savedsearches_load_multiple($user->uid, $view->vid, $view->name);
  }
  $options = _views_savedsearches_saved_searches_to_form_options($saved_searches, $view->get_path(), $current_view_matches_sid);

  // Display a list of saved searches (if there are any) and allow the user to
  // delete any of them.
  if (count($options)) {
    $output .= drupal_render(drupal_get_form('views_savedsearches_delete_search_form', $view, $options, $current_view_matches_sid));
  }

  return $output;
}

function theme_s4_reporting_chart_pie($data) {
	drupal_add_js('https://www.google.com/jsapi');
	$script = 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();
		%s
        var chart = new google.visualization.PieChart(document.getElementById("'. $data['id'] .'"));
        chart.draw(data, {pieSliceText : "label", legend : "none", tooltipText: "percentage",  width: '. $data['width'] .', height: '. $data['height'] .', title: "'. $data['title'] .'", chartArea : {height: '. $data['height'] .', width: '. $data['width'] .'}});
      }';
    $values = array();
	$values[] = 'data.addColumn("string", "'. $data['label'] .'");';
	$values[] = 'data.addColumn("number", "Values");';
	$values[] = 'data.addRows('. count($data['data']) .');';
	$i = 0;
	foreach($data['data'] as $type => $value) {
		if ($value) {
			$values[] = 'data.setValue('. $i .',0,"'. $type .'");';
			$values[] = 'data.setValue('. $i .',1,'. $value .');';
			$i++;
		}
	}
	if (count($values) == 3) {
		return null;
	}
	drupal_add_js(sprintf($script, implode("\n", $values)), 'inline');
	return '<div class="chart-pie" id="'. $data['id'] .'"></div>';
}

function s4_reporting_views_pre_render($view) {
	if ($view->name == 'report_students' && arg(0) == 'reports') {
		module_load_include('inc', 'webform', 'includes/webform.submissions');
		if (isset($view->result[0]->field_field_form_signup_sid)) { 
			//s4_reporting_append_form_to_view($view, 'field_field_form_signup_sid', 'field_field_site_form');
		}
	}
}

function s4_reporting_append_form_to_view($view, $signup_field, $site_field) {
	static $webform_fields;
	foreach($view->result as $result_key => $result) {
		$form = $result->{$site_field}[0]['raw']['nid'];
		$sid = $result->{$signup_field}[0]['raw']['value'];
		$submission = webform_get_submission($form, $sid);
		$form = node_load($form);
		/**
		*	Please don't look so hard at this, you might go blind.
		*/
		if ($form->webform['components']) {
			foreach($form->webform['components'] as $key => $component) {
				$view->result[$result_key]->{$component['form_key']} = array(
					'rendered' => array(
						'#markup' => webform_component_invoke($component['type'], 'table', $component, $submission->data[$key]['value'])
					),
					'raw' => array(
						'value' => $submission->data[$key]['value'],
					),
				);
				if (!isset($view->field[$component['form_key']])) {
					foreach($view->field as $field_key => $field) {
						if (get_class($field) == 'views_handler_field_field') {
							$view->field[$component['form_key']] = clone $view->field[$field_key];
						}
					}
					$view->field[$component['form_key']] = new views_handler_field_field();
					$view->field[$component['form_key']]->view = $view->field['nid']->view;
					$view->field[$component['form_key']]->query = $view->field['nid']->query;
					$view->field[$component['form_key']]->handler_type = 'field';
					$view->field[$component['form_key']]->is_handler = TRUE;
					$view->field[$component['form_key']]->additional_fields[$component['form_key']] = array(
						'table' => 'node',
						'field' => 'nid',
					);
					$view->field[$component['form_key']]->options['label'] = $component['name'];
					$view->field[$component['form_key']]->options['exclude'] = 0;
					$view->field[$component['form_key']]->options['id'] = $component['form_key'];
					$view->field[$component['form_key']]->aliases = array($component['form_key'] =>  $component['form_key']);
					$view->field[$component['form_key']]->field = $component['form_key'];
					$view->field[$component['form_key']]->field_alias = $component['form_key'];
					
				}
			}
		}
	}
}

function s4_reporting_permission() {
  return array('access s4 reporting' => array('title' => t('Access S4 reports'),
                'description' => t('User can run reports on students, sites, and site staff.')),
                );
}

function s4_reporting_action_info() {
  return array(
    's4_reporting_forms_signup' => array(
      'type' => 'system',
      'label' => t('Report on user responses to forms'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    's4_reporting_forms_site' => array(
      'type' => 'system',
      'label' => t('Report on forms for a site'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

function s4_reporting_forms_signup($entity, $context) {
  $signups = db_select('field_data_field_user', 's')
               ->fields('s', array('entity_id'))
               ->condition('entity_type', 'node')
               ->condition('bundle' , 'signup')
               ->condition('field_user_uid', $entity->uid)
               ->execute()
               ->fetchAll();
  dpm($signups);
  _s4_reporting_forms_process_submissions($signups, $context);
  
  if($context['progress']['current'] >= $context['progress']['total']) {
    drupal_set_message(t('Your report is ready. !link', array('!link' => l('View form report', 'reports-forms/'. $context['report_key']))));
  }
}

function s4_reporting_forms_site($entity, $context) {
  $signups = db_select('field_data_field_site', 's')
               ->fields('s', array('entity_id'))
               ->condition('entity_type', 'node')
               ->condition('bundle' , 'signup')
               ->condition('field_site_nid', $entity->nid)
               ->execute()
               ->fetchAll();
  _s4_reporting_forms_process_submissions($signups, $context);
  
  if($context['progress']['current'] >= $context['progress']['total']) {
    drupal_set_message(t('Your report is ready. !link', array('!link' => l('View form report', 'reports-forms/'. $context['report_key']))));
  }
}

function _s4_reporting_forms_process_submissions($signups, $context) {
  if(!is_array($signups)) {
    return;
  }
  foreach($signups as $signup) {
    $set = true;
    $signup = node_load($signup->entity_id);
    if($context['course_term']) {
      $course = field_get_items('node', $signup, 'field_course');
      $course = node_load($course[0]['nid']);
      $term = field_get_items('node', $course, 'field_term');
      if(!$context['course_term'][$term[0]['nid']]) {
        $set = false;
      }
    }
    elseif($context['signup_date_start'] && $context['signup_date_end']) {
      $start_date = field_get_items('node', $signup, 'field_signup_start_date');
      if(strtotime($start_date) < strtotime($context['signup_date_start']) ||
         strtotime($start_date) > strtotime($context['signup_date_end']) ) {
           $set = false;
         }
    }
    
    $form = field_get_items('node', $signup, $context['form_type']);
    $submission = db_select('webform_submissions', 'w')
                    ->fields('w', array('sid', 'nid'))
                    ->condition('sid', $form[0]['value'])
                    ->condition('nid', $context['webform'])
                    ->execute()
                    ->fetchAssoc();
    if(!$submission) {
      $set = false;
    }
    if($set) {
      _s4_reporting_add_submission($context['report_key'], $submission['sid'], $submission['nid'], $signup->nid);
    }
  }
}

function _s4_reporting_add_submission($key, $sid, $nid, $signup) {
  $result = db_select('s4_reporting', 'r')
              ->fields('r', array('data'))
              ->condition('report_key', $key)
              ->execute()
              ->fetchAssoc();
  $result['data'] = unserialize($result['data']);
  $result['data']['signups'][$sid] = $signup;
  $result['data']['submissions'][$sid] = $sid;
  db_update('s4_reporting')
    ->condition('report_key', $key)
    ->fields(array('data' => serialize($result['data'])))
    ->execute();
}

function s4_reporting_forms_signup_form($context) {
  return s4_reporting_forms_site_form($context);
}

function s4_reporting_forms_site_form($context) {
  $webforms = db_select('node', 'n')
                ->fields('n', array('nid', 'title'))
                ->condition('type', 'webform')
                ->condition('status', 1)
                ->execute()
                ->fetchAllKeyed();
  
  $terms = db_select('node', 'n')
             ->fields('n', array('nid', 'title'))
             ->condition('type', 'course_term')
             ->condition('status', 1)
             ->execute()
             ->fetchAllKeyed();
             
  $form['webform'] = array(
    '#type' => 'select',
    '#title' => t('Select the form you would like to report on'),
    '#options' => $webforms,
    '#required' => TRUE,
  );
  
  $form['form_type'] = array(
    '#type' => 'radios',
    '#title' => t('Form type'),
    '#options' => array('field_form_signup_sid' => t('Signup form'),
                        'field_form_evaluation_sid' => t('Evaluation form'),
                        'field_form_assessment_sid' => t('Assessment by faculty')
                        ),
    '#required' => TRUE,
  );
  
  $form['course_term'] = array(
    '#type' => 'select',
    '#title' => t('Placements in a specific term'),
    '#options' => $terms,
    '#multiple' => TRUE,
  );
  
  $form['date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Find placements without courses'),
  );
  
  $form['date']['signup_date_start'] = array(
    '#type' => 'date_select',
    '#title' => t('Placements starts on or after'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-10:+1',
    '#multiple' => TRUE,
  );
  
  $form['date']['signup_date_end'] = array(
    '#type' => 'date_select',
    '#title' => t('Placements starts before'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-10:+1',
    '#multiple' => TRUE,
  );
  
  $form['report_key'] = array(
    '#type' => 'hidden',
    '#value' => md5($context['view']->name . serialize($context['view']->exposed_raw_input)),
  );
    
  return $form;
}

function s4_reporting_forms_site_validate($form, $form_state) {
  $terms = 0;
  foreach($form_state['values']['course_term'] as $term) {
    if($term) {
      $terms++;
    }
  }
  if(!$terms && !$form_state['values']['signup_date_start']) {
    form_set_error('signup_date_start', t('You must have either a course term or date range selected.'));
  }
  if($form_state['values']['signup_date_start'] && 
     strtotime($form_state['values']['signup_date_start']) >= strtotime($form_state['values']['signup_date_end'])) {
    form_set_error('signup_date_start', t('The end date must be later than the start date.'));
  }
}

function s4_reporting_forms_signup_validate($form, $form_state) {
  return s4_reporting_forms_site_validate($form, $form_state);
}

function s4_reporting_forms_signup_submit($form, $form_state) {
  return s4_reporting_forms_site_submit($form, $form_state);
}

function s4_reporting_forms_site_submit($form, $form_state) {
  db_delete('s4_reporting')
    ->condition('report_key', $form_state['values']['report_key'])
    ->execute();
  $form_state['values']['report_key'] = md5($form_state['values']['report_key'] . serialize($form_state['values']));
  db_insert('s4_reporting')
    ->fields(array('report_key' => $form_state['values']['report_key'],
                   'date' => time(),
                   'data' => serialize(array('options' => $form_state['values'])),
                  )
                )
    ->execute();
  return $form_state['values'];
}

function s4_reporting_cron() {
  db_delete('s4_reporting')
    ->condition('date', time() - (4 * 60 * 60), '<')
    ->execute();
}

function s4_reporting_s4_reporting_term_report($report_criteria) {
	/*$totals = array('courses' => array('count' => 0,
											   'title' => t('Total service learning courses')),
						'students' => array('count' => 0,
											   'title' => t('Total students')),
						'placements' => array('count' => 0,
											   'title' => t('Total placements')),
					);
	$courses = array();			
	$query = db_select('node_revision', 'r')
				   ->fields('r', array('nid', 'status'));
    $query->leftJoin('field_data_field_term', 't', 't.entity_id = r.nid AND t.bundle = :course', array(':course' => 'course'));
    $query->fields('t', array('field_term_nid'));
    if ($report_criteria['term']) {
    	$query->condition('t.field_term_nid', $report_criteria['term']->nid);
    }
    else {
	    $query->condition('r.timestamp', strtotime($report_criteria['start']), '>=')
	    	  ->condition('r.timestamp', strtotime($report_criteria['end']), '<=');
	}
	$query->leftJoin('field_data_field_course_students', 's', 's.entity_id = r.nid AND s.bundle = :course', array(':course' => 'course'));
	$query->leftJoin('field_data_field_user', 'u', 's.field_course_students_uid = u.field_user_uid AND u.bundle = :signup', array(':signup' => 'signup'));
	$query->leftJoin('field_data_field_course', 'c', 'c.field_course_nid = r.nid AND c.bundle = :signup', array(':signup' => 'signup'));
	$query->fields('c', array('entity_id'));
	$query->fields('s', array('field_course_students_uid'));
	$query->leftJoin('node', 'n', 'n.vid = r.vid');
	$query->condition('n.type', 'course');
	$results = $query->execute()->fetchAll();
	
	foreach($results as $result) {
		$courses[$result->nid]++;
		$totals['students']['count']++;
		$signups[$result->entity_id]++;
	};
	$totals['courses']['count'] = count($courses);
	$totals['placements']['count'] = count($signups);
	
	
	return array('totals' => $totals,
				 'output' => $output,
				);*/
}