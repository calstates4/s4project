<?php
/**
 * @file
 * Code for the S4 Reporting feature.
 */

include_once('s4_reporting.features.inc');

function s4_reporting_menu() {
	$items = array();
	
	$items['node/%node/responses'] = array(
		'title' => 'Responses',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/signup'] = array(
		'title' => 'Signup',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'signup'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['node/%node/responses/evaluation'] = array(
		'title' => 'Evaluations',
		'page callback' => 's4_reporting_object_report',
		'type' => MENU_LOCAL_TASK,
		'page arguments' => array(1, 'evaluation'),
		'access callback' => 's4_reporting_object_report_access',
		'access arguments' => array(1),
		'file' => 's4_reporting.pages.inc',
		'weight' => 10
	);
	
	$items['reports/view/%'] = array(
		'title' => 'Report',
		'page callback' => 's4_reporting_report_view',
		'page arguments' => array(2),
		'access arguments' => array('view s4 reports'),
		'file' => 's4_reporting.pages.inc',
	);

	return $items;
}

function s4_reporting_form_report_node_form_alter(&$form, $form_state) {
	drupal_add_css(drupal_get_path('module', 's4_reporting') .'/css/s4_reporting.node-form.css');
	$form['report'] = array(
		'#type' => 'vertical_tabs',
		'#title' => 'Report',
	);
	
	$fields = _s4_reporting_get_fields(0);
	
	drupal_add_js(array('s4_reporting_filters' => $filter_settings), 'setting');
	
	$form['report']['filters'] = array(
		'#type' => 'fieldset',
		'#title' => 'Filters',
	);
	
	$form['report']['filters']['filters'] = array(
		'#theme' => 'field_multiple_value_form',
		'#cardinality' => -1,
		'#title' => 'Filters',
		'#required' => TRUE,
		'#description' => 'Use filters to limit your report to only certain types of data',
		'#prefix' => '<div id="report-filters">',
		'#suffix' => '</div>',
		'#max_delta' => 1,
	);
	
	$form['report']['filters']['filters'] += $fields['filters'];
	
	
	$form['report']['filters']['filters']['add_more'] = array(
      '#type' => 'submit',
      '#name' => 'filters_add_more',
      '#value' => t('Add another item'),
      '#attributes' => array('class' => array('field-add-more-submit rebuild-chosen')),
      '#submit' => array('s4_reporting_add_more_submit'),
      '#ajax' => array(
        'callback' => 's4_reporting_add_more_js',
        'wrapper' => 'report-filters',
        'effect' => 'fade',
      ),
    );
	
	$form['report']['fields'] = array(
		'#type' => 'fieldset',
		'#title' => 'Fields',
	);
	
	$form['report']['fields']['fields'] = array(
		'#theme' => 'field_multiple_value_form',
		'#cardinality' => -1,
		'#title' => 'Fields',
		'#required' => TRUE,
		'#description' => 'Select what data you want in your report',
		'#prefix' => '<div id="report-fields">',
		'#suffix' => '</div>',
		'#max_delta' => 1,
	);
	
	$form['report']['fields']['fields'] += $fields['fields'];
	
	
	$form['report']['fields']['fields']['add_more'] = array(
      '#type' => 'submit',
      '#name' => 'fields_add_more',
      '#value' => t('Add another item'),
      '#attributes' => array('class' => array('field-add-more-submit rebuild-chosen')),
      '#submit' => array('s4_reporting_add_more_submit'),
      '#ajax' => array(
        'callback' => 's4_reporting_add_more_js',
        'wrapper' => 'report-fields',
        'effect' => 'fade',
      ),
    );
	
	$form['report']['settings'] = array(
		'#type' => 'fieldset',
		'#title' => 'Settings',
	);
	
	$form['report']['settings']['merge_questions'] = array(
		'#type' => 'radios',
		'#title' => 'Multiple form handling',
		'#description' => t('If you are including data from evaluation or signup forms, we can merge questions that are the same together, or leave them seperate'),
		'#options' => array(
			'merge' => 'Merge same questions from different forms together',
			'seperate' => 'Keep same questions seperate',
		),
	);
}

function s4_reporting_add_more_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

function s4_reporting_add_more_js($form, $form_state) {
    $button = $form_state['clicked_button'];
	$element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
	$delta = $element['#max_delta'];
	$fields = _s4_reporting_get_fields($delta);
	$element += $fields['filters'];
	
  // Add a DIV around the delta receiving the Ajax effect.

  $element[$delta]['#prefix'] = '<div class="ajax-new-content">' . (isset($element[$delta]['#prefix']) ? $element[$delta]['#prefix'] : '');
  $element[$delta]['#suffix'] = (isset($element[$delta]['#suffix']) ? $element[$delta]['#suffix'] : '') . '</div>';

  return $element;
}

function _s4_reporting_get_fields($delta) {
	$filters = array();
	$fields = array();
	$types = array();
	foreach(module_invoke_all('s4_reporting_info') as $info) {
		$filters += $info['filters'];
		$fields += $info['fields'];	
		$types += $info['types'];
	}
	$filter_settings = array();
	foreach($filters as $type => $filters) {
		$max_filters += count($filters);
		
		foreach($filters as $filter) {
			$filter_types[$types[$type]->name][$filter['field_name']] = $filter['label'];
			$filter_settings[$type][$filter['field_name']] = $filter['label'];
		}
	}
	foreach($fields as $type => $fields) {
		$max_fields += count($fields);
		
		foreach($fields as $field) {
			$field_types[$types[$type]->name][$field['field_name']] = $field['label'];
			$field_settings[$type][$field['field_name']] = $field['label'];
		}
	}
	
	
	$fields['filters'][$delta]['type'] = array(
		'#type' => 'select',
		'#title' => 'Field',
		'#options' => $filter_types,
		'#attributes' => array('class' => array('chosen')),
	);
	
	$fields['filters'][$delta]['filter_value'] = array(
		'#type' => 'textfield',
		'#title' => 'Value',
		'#options' => array(),
	);
	
	$fields['filters'][$delta]['_weight'] = array(
		'#type' => 'weight',
		'#title' => t('Weight for row @number', array('@number' => $delta + 1)),
		'#title_display' => 'invisible',
		 // Note: this 'delta' is the FAPI 'weight' element's property.
		'#delta' => $max,
		'#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
		'#weight' => 100,
	);
	
	$fields['fields'][$delta]['type'] = array(
		'#type' => 'select',
		'#title' => 'Field',
		'#options' => $field_types,
		'#attributes' => array('class' => array('chosen')),
	);
	
	$fields['fields'][$delta]['_weight'] = array(
		'#type' => 'weight',
		'#title' => t('Weight for row @number', array('@number' => $delta + 1)),
		'#title_display' => 'invisible',
		 // Note: this 'delta' is the FAPI 'weight' element's property.
		'#delta' => $max,
		'#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
		'#weight' => 100,
	);
	
	return $fields;
}

function s4_reporting_object_report_access($node) {
	return (in_array($node->type, array('site', 'course')) && node_access('update', $node));
}

function s4_reporting_block_info() {
	$blocks['site_summary'] = array('info' => 'Site summary');
	$blocks['course_summary'] = array('info' => 'Course summary');
	return $blocks;
}

function s4_reporting_block_view($delta) {
  module_load_include('inc', 's4_reporting', 's4_reporting.blocks');
  $function_name = 's4_reporting_block_' . $delta;
  if (function_exists($function_name)) {
    return $function_name();
  }
  return NULL;
}

/**
*	Implementation of hook_theme
*/
function s4_reporting_theme($existing, $type, $theme, $path) {
	return array(
		's4_reporting_chart_pie' => array(
			'variables' => array('data' => array(), 'width' => '', 'height' => '', 'label' => '', 'title' => '','id' => ''),
		),
	);
}

function theme_s4_reporting_chart_pie($data) {
	drupal_add_js('https://www.google.com/jsapi');
	$script = 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();
		%s
        var chart = new google.visualization.PieChart(document.getElementById("'. $data['id'] .'"));
        chart.draw(data, {pieSliceText : "label", legend : "none", tooltipText: "percentage",  width: '. $data['width'] .', height: '. $data['height'] .', title: "'. $data['title'] .'", chartArea : {height: '. $data['height'] .', width: '. $data['width'] .'}});
      }';
    $values = array();
	$values[] = 'data.addColumn("string", "'. $data['label'] .'");';
	$values[] = 'data.addColumn("number", "Values");';
	$values[] = 'data.addRows('. count($data['data']) .');';
	$i = 0;
	foreach($data['data'] as $type => $value) {
		if($value) {
			$values[] = 'data.setValue('. $i .',0,"'. $type .'");';
			$values[] = 'data.setValue('. $i .',1,'. $value .');';
			$i++;
		}
	}
	if(count($values) == 3) {
		return null;
	}
	drupal_add_js(sprintf($script, implode("\n", $values)), 'inline');
	return '<div class="chart-pie" id="'. $data['id'] .'"></div>';
}
