<?php

/**
 * @file
 * Module for the s4_opportunity Entity - a starting point to create your own Entity
 * and associated administration interface
 */  


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function s4_opportunity_entity_info() {
  $return['s4_opportunity'] = array(
    'label' => t('Opportunity'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 's4_opportunity',
    'controller class' => 's4OpportunityController',
    'base table' => 's4_opportunity',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 's4_opportunity_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the s4_opportunity types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 's4_opportunity_create',
    'access callback' => 's4_opportunity_access',
    'module' => 's4_opportunity',
    // The information below is used by the s4OpportunityUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/opportunities',
      'file' => 's4_opportunity.admin.inc',
      'controller class' => 's4OpportunityUIController',
      'menu wildcard' => '%s4_opportunity',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['s4_opportunity_type'] = array(
    'label' => t('Opportunity Type'),
    'entity class' => 's4_opportunityType',
    'controller class' => 's4OpportunityTypeController',
    'base table' => 's4_opportunity_type',
    'fieldable' => FALSE,
    'bundle of' => 's4_opportunity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 's4_opportunity_type_access',
    'module' => 's4_opportunity',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/s4_opportunity_types',
      'file' => 's4_opportunity_type.admin.inc',
      'controller class' => 's4OpportunityTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the s4_opportunity types via a hook to avoid a recursion
 * issue as loading the s4_opportunity types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function s4_opportunity_entity_info_alter(&$entity_info) {
  foreach (s4_opportunity_get_types() as $type => $info) {
    $entity_info['s4_opportunity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/s4_opportunity_types/manage/%s4_opportunity_type',
        'real path' => 'admin/structure/s4_opportunity_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer s4_opportunity types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function s4_opportunity_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer s4_opportunity types' => array(
      'title' => t('Administer s4_opportunity types'),
      'description' => t('Create and delete fields for s4_opportunity types, and set their permissions.'),
    ),
    'administer opportunities' => array(
      'title' => t('Administer opportunities'),
      'description' => t('Edit and delete all opportunities'),
    ),  
  );
  
  //Generate permissions per s4_opportunity 
  foreach (s4_opportunity_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name s4_opportunity" => array(
        'title' => t('%type_name: Edit any s4_opportunity', array('%type_name' => $type->label)),
      ),
      "view any $type_name s4_opportunity" => array(
        'title' => t('%type_name: View any s4_opportunity', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a s4_opportunity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $s4_opportunity
 *   Optionally a s4_opportunity or a s4_opportunity type to check access for. If nothing is
 *   given, access for all opportunities is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function s4_opportunity_access($op, $s4_opportunity = NULL, $account = NULL) {
  if (user_access('administer opportunities', $account)) {
    return TRUE;
  }
  if (isset($s4_opportunity) && $type_name = $s4_opportunity->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name s4_opportunity", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function s4_opportunity_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer s4_opportunity types', $account);
}


/**
 * Gets an array of all s4_opportunity types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return s4_opportunityType[]
 *   Depending whether $type isset, an array of s4_opportunity types or a single one.
 */
function s4_opportunity_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our s4_opportunity entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('s4_opportunity_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a s4_opportunity type by string.
 *
 * @param $type
 *   The machine-readable name of a s4_opportunity type to load.
 * @return
 *   A s4_opportunity type array or FALSE if $type does not exist.
 */
function s4_opportunity_type_load($type) {
  return s4_opportunity_get_types($type);
}


/**
 * Fetch a s4_opportunity object. Make sure that the wildcard you choose 
 * in the s4_opportunity entity definition fits the function name here.
 *
 * @param $s4_opportunity_id
 *   Integer specifying the s4_opportunity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $s4_opportunity object or FALSE if it cannot be loaded.
 *
 * @see s4_opportunity_load_multiple()
 */
function s4_opportunity_load($s4_opportunity_id, $reset = FALSE) {
  $opportunities = s4_opportunity_load_multiple(array($s4_opportunity_id), array(), $reset);
  return reset($opportunities);
}


/**
 * Load multiple opportunities based on certain conditions.
 *
 * @param $s4_opportunity_ids
 *   An array of s4_opportunity IDs.
 * @param $conditions
 *   An array of conditions to match against the {s4_opportunity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of s4_opportunity objects, indexed by s4_opportunity_id.
 *
 * @see entity_load()
 * @see s4_opportunity_load()
 */
function s4_opportunity_load_multiple($s4_opportunity_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('s4_opportunity', $s4_opportunity_ids, $conditions, $reset);
}


/**
 * Deletes a s4_opportunity.
 */
function s4_opportunity_delete(s4_opportunity $s4_opportunity) {
  $s4_opportunity->delete();
}


/**
 * Delete multiple opportunities.
 *
 * @param $s4_opportunity_ids
 *   An array of s4_opportunity IDs.
 */
function s4_opportunity_delete_multiple(array $s4_opportunity_ids) {
  entity_get_controller('s4_opportunity')->delete($s4_opportunity_ids);
}


/**
 * Create a s4_opportunity object.
 */
function s4_opportunity_create($values = array()) {
  return entity_get_controller('s4_opportunity')->create($values);
}


/**
 * Saves a s4_opportunity to the database.
 *
 * @param $s4_opportunity
 *   The s4_opportunity object.
 */
function s4_opportunity_save(s4_opportunity $s4_opportunity) {
  return $s4_opportunity->save();
}


/**
 * Saves a s4_opportunity type to the db.
 */
function s4_opportunity_type_save(s4_opportunityType $type) {
  $type->save();
}


/**
 * Deletes a s4_opportunity type from the db.
 */
function s4_opportunity_type_delete(s4_opportunityType $type) {
  $type->delete();
}


/**
 * URI callback for opportunities
 */
function s4_opportunity_uri(s4_opportunity $s4_opportunity){
  return array(
    'path' => 's4_opportunity/' . $s4_opportunity->s4_opportunity_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function s4_opportunity_page_title(s4_opportunity $s4_opportunity){
  return $s4_opportunity->name;
}


/**
 * Sets up content to show an individual s4_opportunity
 * @todo - get rid of drupal_set_title();
 */
function s4_opportunity_page_view($s4_opportunity, $view_mode = 'full') {    
  $controller = entity_get_controller('s4_opportunity');  
  $content = $controller->view(array($s4_opportunity->s4_opportunity_id => $s4_opportunity));
  drupal_set_title($s4_opportunity->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function s4_opportunity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 's4_opportunity') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function s4_opportunity_theme() {
  return array(
    's4_opportunity_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 's4_opportunity.admin.inc',
    ),
    's4_opportunity' => array(
      'render element' => 'elements',
      'template' => 's4_opportunity',
    ),
   's4_opportunity_sample_data' => array(
      'variables' => array('s4_opportunity_sample_data', 's4_opportunity' => NULL),
      'template' => 's4_opportunity-sample-data',
    ),


  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function s4_opportunity_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/opportunities/add' on 'admin/structure/opportunities'.
  if ($root_path == 'admin/content/opportunities') {
    $item = menu_get_item('admin/content/opportunities/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Add default fields to new opportunity types
 */
function s4_opportunity_add_default_fields($type) {
  $field = field_info_field('field_sites');
  $instance = field_info_instance('s4_opportunity', 'field_sites', $type);
  if (empty($field)) {
    $field = array(
      'entity_types' => array(),
      'field_name' => 'field_sites',
      'foreign keys' => array(
        'nid' => array(
          'columns' => array(
            'nid' => 'nid',
          ),
          'table' => 'node',
        ),
      ),
      'global_block_settings' => '2',
      'indexes' => array(
        'nid' => array(
          0 => 'nid',
        ),
      ),
      'module' => 'node_reference',
      'settings' => array(
        'nodeaccess_nodereference' => array(
          'all' => array(
            'view' => 0,
          ),
          'author' => array(
            'delete' => 'delete',
            'update' => 'update',
            'view' => 'view',
          ),
          'priority' => '0',
          'referenced' => array(
            'delete' => array(
              'delete' => 0,
              'update' => 0,
              'view' => 0,
            ),
            'update' => array(
              'delete' => 0,
              'update' => 0,
              'view' => 0,
            ),
            'view' => array(
              'delete' => 0,
              'update' => 0,
              'view' => 'view',
            ),
          ),
        ),
        'referenceable_types' => array(
          'contact_record' => 0,
          'coordinator' => 0,
          'course' => 0,
          'course_term' => 0,
          'downloadable_form' => 0,
          'fieldtrip' => 0,
          'file' => 0,
          'page' => 0,
          'signup' => 0,
          'site' => 'site',
          'webform' => 0,
        ),
        'view' => array(
          'args' => array(),
          'display_name' => '',
          'view_name' => '',
        ),
      ),
      'translatable' => '1',
      'type' => 'node_reference',
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'bundle' => $type,
      'default_value' => NULL,
      'description' => 'The sites related to this opportunity.',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'node_reference',
          'settings' => array(),
          'type' => 'node_reference_default',
          'weight' => '1',
        ),
        'full' => array(
          'label' => 'above',
          'module' => 'node_reference',
          'settings' => array(),
          'type' => 'node_reference_default',
          'weight' => '1',
        ),
        'notifications' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 's4_opportunity',
      'field_name' => 'field_sites',
      'label' => 'Sites',
      'required' => 0,
      'settings' => array(
        'custom_add_another' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
		    'weight' => '4',
		    'type' => 'nodereference_url',
		    'module' => 'nodereference_url',
		    'active' => 1,
		    'settings' => array(
		      'fallback' => 'page_not_found',
		      'edit_fallback' => 1,
		      'node_link' => array(
		        'teaser' => 0,
		        'full' => 0,
		        'title' => '',
		        'hover_title' => '',
		        'destination' => 'default',
		      ),
		    ),
		  ),
    );
    $instance = field_create_instance($instance);
  }
  
  $field = field_info_field('field_coordinator');
  $instance = field_info_instance('s4_opportunity', 'field_coordinator', $type);
  if (empty($field)) {
    $field = array(
		  'entity_types' => array(),
		  'foreign keys' => array(
		    'nid' => array(
		      'table' => 'node',
		      'columns' => array(
		        'nid' => 'nid',
		      ),
		    ),
		  ),
		  'global_block_settings' => '2',
		  'indexes' => array(
		    'nid' => array(
		      'nid',
		    ),
		  ),
		  'settings' => array(
		    'nodeaccess_nodereference' => array(
		      'all' => array(
		        'view' => 0,
		      ),
		      'author' => array(
		        'delete' => 0,
		        'update' => 'update',
		        'view' => 'view',
		      ),
		      'priority' => '0',
		      'referenced' => array(
		        'delete' => array(
		          'delete' => 0,
		          'update' => 0,
		          'view' => 'view',
		        ),
		        'update' => array(
		          'delete' => 0,
		          'update' => 0,
		          'view' => 'view',
		        ),
		        'view' => array(
		          'delete' => 0,
		          'update' => 0,
		          'view' => 0,
		        ),
		      ),
		    ),
		    'referenceable_types' => array(
		      'article' => 0,
		      'contact_record' => 0,
		      'coordinator' => 'coordinator',
		      'course' => 0,
		      'course_term' => 0,
		      'feed' => 0,
		      'feed_item' => 0,
		      'file' => 0,
		      'news' => 0,
		      'page' => 0,
		      'signup' => 0,
		      'site' => 0,
		      'webform' => 0,
		    ),
		    'view' => array(
		      'args' => array(),
		      'display_name' => '',
		      'view_name' => '',
		    ),
		  ),
		  'translatable' => '1',
		  'storage' => array(
		    'type' => 'field_sql_storage',
		    'settings' => array(),
		    'module' => 'field_sql_storage',
		    'active' => '1',
		    'details' => array(
		      'sql' => array(
		        'FIELD_LOAD_CURRENT' => array(
		          'field_data_field_coordinator' => array(
		            'nid' => 'field_coordinator_nid',
		          ),
		        ),
		        'FIELD_LOAD_REVISION' => array(
		          'field_revision_field_coordinator' => array(
		            'nid' => 'field_coordinator_nid',
		          ),
		        ),
		      ),
		    ),
		  ),
		  'field_name' => 'field_coordinator',
		  'type' => 'node_reference',
		  'module' => 'node_reference',
		  'active' => '1',
		  'locked' => '0',
		  'cardinality' => '1',
		  'deleted' => '0',
		  'columns' => array(
		    'nid' => array(
		      'type' => 'int',
		      'unsigned' => TRUE,
		      'not null' => FALSE,
		    ),
		  ),
		  'bundles' => array(
		    'node' => array(
		      'signup',
		    ),
		  ),
		);
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'bundle' => $type,
      'entity_type' => 's4_opportunity',
		  'default_value' => NULL,
		  'description' => '',
		  'display' => array(
		    'default' => array(
		      'label' => 'above',
		      'type' => 'node_reference_default',
		      'weight' => '2',
		      'settings' => array(),
		      'module' => 'node_reference',
		    ),
		    'full' => array(
		      'label' => 'above',
		      'module' => 'node_reference',
		      'settings' => array(),
		      'type' => 'node_reference_default',
		      'weight' => '3',
		    ),
		    'notifications' => array(
		      'label' => 'above',
		      'settings' => array(),
		      'type' => 'hidden',
		      'weight' => 0,
		    ),
		    'teaser' => array(
		      'label' => 'above',
		      'settings' => array(),
		      'type' => 'hidden',
		      'weight' => 0,
		    ),
		  ),
		  'label' => 'Site staff',
		  'required' => 0,
		  'settings' => array(
		    'user_register_form' => FALSE,
		    'custom_add_another' => '',
		  ),
		  'widget' => array(
		    'active' => 1,
		    'module' => 'nodereference_url',
		    'settings' => array(
		      'edit_fallback' => 0,
		      'fallback' => 'select',
		      'node_link' => array(
		        'destination' => 'default',
		        'full' => 0,
		        'hover_title' => '',
		        'teaser' => 0,
		        'title' => '',
		      ),
		      'autocomplete_match' => 'contains',
		    ),
		    'type' => 'nodereference_url',
		    'weight' => '2',
		  ),
		  'field_name' => 'field_coordinator',
		  'deleted' => '0',
    );
    $instance = field_create_instance($instance);
  }
  
  
  $field = field_info_field('field_site_restrict');
  $instance = field_info_instance('s4_opportunity', 'field_site_restrict', $type);
  if (empty($field)) {
    $field = array(
		  'entity_types' => array(),
		  'foreign keys' => array(
		    'tid' => array(
		      'columns' => array(
		        'tid' => 'tid',
		      ),
		      'table' => 'taxonomy_term_data',
		    ),
		  ),
		  'global_block_settings' => '2',
		  'indexes' => array(
		    'tid' => array(
		      'tid',
		    ),
		  ),
		  'settings' => array(
		    'allowed_values' => array(
		      array(
		        'vocabulary' => 'site_restrictions',
		        'parent' => '0',
		      ),
		    ),
		  ),
		  'translatable' => '1',
		  'storage' => array(
		    'type' => 'field_sql_storage',
		    'settings' => array(),
		    'module' => 'field_sql_storage',
		    'active' => '1',
		    'details' => array(
		      'sql' => array(
		        'FIELD_LOAD_CURRENT' => array(
		          'field_data_field_site_restrict' => array(
		            'tid' => 'field_site_restrict_tid',
		          ),
		        ),
		        'FIELD_LOAD_REVISION' => array(
		          'field_revision_field_site_restrict' => array(
		            'tid' => 'field_site_restrict_tid',
		          ),
		        ),
		      ),
		    ),
		  ),
		  'field_name' => 'field_site_restrict',
		  'type' => 'taxonomy_term_reference',
		  'module' => 'taxonomy',
		  'active' => '1',
		  'locked' => '0',
		  'cardinality' => '-1',
		  'deleted' => '0',
		  'columns' => array(
		    'tid' => array(
		      'type' => 'int',
		      'unsigned' => TRUE,
		      'not null' => FALSE,
		    ),
		  ),
		  'bundles' => array(
		    'field_collection_item' => array(
		      'field_site_evaluation_group',
		      'field_site_signup_group',
		    ),
		    'node' => array(
		      'coordinator',
		      'site',
		      'downloadable_form',
		      'signup',
		      'course',
		      'webform',
		    ),
		    'user' => array(
		      'user',
		    ),
		  ),
		);
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'bundle' => $type,
      'entity_type' => 's4_opportunity',
		  'default_value' => NULL,
		  'description' => 'Select which programs can access this site.',
		  'display' => array(
		    'default' => array(
		      'label' => 'above',
		      'type' => 'taxonomy_term_reference_plain',
		      'weight' => '11',
		      'settings' => array(),
		      'module' => 'taxonomy',
		    ),
		    'full' => array(
		      'label' => 'above',
		      'settings' => array(),
		      'type' => 'hidden',
		      'weight' => '5',
		    ),
		    'notifications' => array(
		      'label' => 'above',
		      'settings' => array(),
		      'type' => 'hidden',
		      'weight' => 0,
		    ),
		    'teaser' => array(
		      'label' => 'above',
		      'settings' => array(),
		      'type' => 'hidden',
		      'weight' => 0,
		    ),
		    'search_index' => array(
		      'label' => 'above',
		      'type' => 'hidden',
		      'weight' => '2',
		      'settings' => array(),
		    ),
		  ),
		  'display_label' => '',
		  'label' => 'Program(s)',
		  'required' => 1,
		  's4_sites_field_access' => 0,
		  'settings' => array(
		    'user_register_form' => FALSE,
		    'custom_add_another' => '',
		  ),
		  'widget' => array(
		    'weight' => '4',
		    'type' => 'options_buttons',
		    'module' => 'options',
		    'active' => 1,
		    'settings' => array(),
		  ),
		  'field_name' => 'field_site_restrict',
		  'deleted' => '0',
		);
    $instance = field_create_instance($instance);
  }
  
  $field = field_info_field('field_active_date');
  $instance = field_info_instance('s4_opportunity', 'field_active_date', $type);
  if (empty($field)) {
    $field = array(
		  'translatable' => '0',
		  'entity_types' => array(),
		  'settings' => array(
		    'granularity' => array(
		      'month' => 'month',
		      'day' => 'day',
		      'year' => 'year',
		      'hour' => 0,
		      'minute' => 0,
		      'second' => 0,
		    ),
		    'tz_handling' => 'none',
		    'timezone_db' => '',
		    'cache_enabled' => 0,
		    'cache_count' => '4',
		    'todate' => 'required',
		  ),
		  'storage' => array(
		    'type' => 'field_sql_storage',
		    'settings' => array(),
		    'module' => 'field_sql_storage',
		    'active' => '1',
		    'details' => array(
		      'sql' => array(
		        'FIELD_LOAD_CURRENT' => array(
		          'field_data_field_active_date' => array(
		            'value' => 'field_active_date_value',
		            'value2' => 'field_active_date_value2',
		          ),
		        ),
		        'FIELD_LOAD_REVISION' => array(
		          'field_revision_field_active_date' => array(
		            'value' => 'field_active_date_value',
		            'value2' => 'field_active_date_value2',
		          ),
		        ),
		      ),
		    ),
		  ),
		  'foreign keys' => array(),
		  'indexes' => array(),
		  'field_name' => 'field_active_date',
		  'type' => 'datetime',
		  'module' => 'date',
		  'active' => '1',
		  'locked' => '0',
		  'cardinality' => '1',
		  'deleted' => '0',
		  'columns' => array(
		    'value' => array(
		      'type' => 'datetime',
		      'mysql_type' => 'datetime',
		      'pgsql_type' => 'timestamp without time zone',
		      'sqlite_type' => 'varchar',
		      'sqlsrv_type' => 'smalldatetime',
		      'not null' => FALSE,
		      'sortable' => TRUE,
		      'views' => TRUE,
		    ),
		    'value2' => array(
		      'type' => 'datetime',
		      'mysql_type' => 'datetime',
		      'pgsql_type' => 'timestamp without time zone',
		      'sqlite_type' => 'varchar',
		      'sqlsrv_type' => 'smalldatetime',
		      'not null' => FALSE,
		      'sortable' => TRUE,
		      'views' => FALSE,
		    ),
		  ),
		  'bundles' => array(
		    's4_opportunity' => array(
		      $type,
		    ),
		  ),
		);
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
		  'label' => 'Active date',
		  'widget' => array(
		    'weight' => '6',
		    'type' => 'date_popup',
		    'module' => 'date',
		    'active' => 1,
		    'settings' => array(
		      'input_format' => 'm/d/Y - H:i:s',
		      'input_format_custom' => '',
		      'year_range' => '-3:+3',
		      'increment' => '15',
		      'label_position' => 'above',
		      'text_parts' => array(),
		      'display_all_day' => 0,
		    ),
		  ),
		  'settings' => array(
		    'default_value' => 'now',
		    'default_value_code' => '',
		    'default_value2' => 'same',
		    'default_value_code2' => '',
		    'custom_add_another' => '',
		    'user_register_form' => FALSE,
		  ),
		  'display' => array(
		    'default' => array(
		      'label' => 'above',
		      'type' => 'date_default',
		      'settings' => array(
		        'format_type' => 'long',
		        'multiple_number' => '',
		        'multiple_from' => '',
		        'multiple_to' => '',
		        'fromto' => 'both',
		      ),
		      'module' => 'date',
		      'weight' => 13,
		    ),
		  ),
		  'required' => 0,
		  'description' => 'Select the time when this opportunity is available.',
		  'display_label' => '',
		  'field_name' => 'field_active_date',
		  'entity_type' => 's4_opportunity',
		  'bundle' => $type,
		  'deleted' => '0',
		);
    $instance = field_create_instance($instance);
  }
  
  $field = field_info_field('field_maximum_placements');
  $instance = field_info_instance('s4_opportunity', 'field_maximum_placements', $type);
  if (empty($field)) {
    $field = array(
		  'translatable' => '0',
		  'entity_types' => array(),
		  'settings' => array(),
		  'storage' => array(
		    'type' => 'field_sql_storage',
		    'settings' => array(),
		    'module' => 'field_sql_storage',
		    'active' => '1',
		    'details' => array(
		      'sql' => array(
		        'FIELD_LOAD_CURRENT' => array(
		          'field_data_field_maximum_placements' => array(
		            'value' => 'field_maximum_placements_value',
		          ),
		        ),
		        'FIELD_LOAD_REVISION' => array(
		          'field_revision_field_maximum_placements' => array(
		            'value' => 'field_maximum_placements_value',
		          ),
		        ),
		      ),
		    ),
		  ),
		  'foreign keys' => array(),
		  'indexes' => array(),
		  'field_name' => 'field_maximum_placements',
		  'type' => 'number_integer',
		  'module' => 'number',
		  'active' => '1',
		  'locked' => '0',
		  'cardinality' => '1',
		  'deleted' => '0',
		  'columns' => array(
		    'value' => array(
		      'type' => 'int',
		      'not null' => FALSE,
		    ),
		  ),
		  'bundles' => array(
		    's4_opportunity' => array(
		      $type,
		    ),
		  ),
		);
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
		  'label' => 'Maximum placements',
		  'widget' => array(
		    'weight' => '5',
		    'type' => 'number',
		    'module' => 'number',
		    'active' => 0,
		    'settings' => array(),
		  ),
		  'settings' => array(
		    'min' => '',
		    'max' => '',
		    'prefix' => '',
		    'suffix' => '',
		    'custom_add_another' => '',
		    'user_register_form' => FALSE,
		  ),
		  'display' => array(
		    'default' => array(
		      'label' => 'above',
		      'type' => 'number_integer',
		      'settings' => array(
		        'thousand_separator' => ' ',
		        'decimal_separator' => '.',
		        'scale' => 0,
		        'prefix_suffix' => TRUE,
		      ),
		      'module' => 'number',
		      'weight' => 12,
		    ),
		  ),
		  'required' => 0,
		  'description' => 'Enter the maximum number of placements that can be made at any given time.',
		  'display_label' => '',
		  'default_value' => NULL,
		  'field_name' => 'field_maximum_placements',
		  'entity_type' => 's4_opportunity',
		  'bundle' => $type,
		  'deleted' => '0',
		);
    $instance = field_create_instance($instance);
  }

}

/**
 * The class used for s4_opportunity entities
 */
class s4_opportunity extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 's4_opportunity');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 's4_opportunity/' . $this->s4_opportunity_id);
  }
  
  
}


/**
 * The class used for s4_opportunity type entities
 */
class s4_opportunityType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 's4_opportunity_type');
  }
  
}


/**
 * The Controller for s4_opportunity entities
 */
class s4OpportunityController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a s4_opportunity - we first set up the values that are specific
   * to our s4_opportunity schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the s4_opportunity.
   *
   * @return
   *   A s4_opportunity object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our s4_opportunity
    $values += array( 
      's4_opportunity_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $s4_opportunity = parent::create($values);
    return $s4_opportunity;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['s4_opportunity_sample_data'] =  array(
      '#markup' => theme('s4_opportunity_sample_data', array('s4_opportunity_sample_data' => check_plain($entity->data['sample_data']), 's4_opportunity' => $entity)),
    );

    return $content;
  }
  
}


/**
 * The Controller for s4_opportunity entities
 */
class s4OpportunityTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a s4_opportunity type - we first set up the values that are specific
   * to our s4_opportunity type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the s4_opportunity.
   *
   * @return
   *   A s4_opportunity type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our s4_opportunity
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $s4_opportunity_type = parent::create($values);
    return $s4_opportunity_type;
  }

}