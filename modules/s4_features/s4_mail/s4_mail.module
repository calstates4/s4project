<?php
/**
 * @file
 * Code for the S4 Mail feature.
 */

include_once('s4_mail.features.inc');

function s4_mail_menu() {
	$items = array();

	$items['admin/config/s4/s4-mail'] = array(
		'type' => MENU_LOCAL_TASK,
		'title' => 'Mail',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('s4_mail_admin_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 's4_mail.admin.inc',
		);

	return $items;
}

function s4_mail_send($key, $to, $subject, $message, $format = FALSE, $tokens = FALSE, $sender = FALSE, $cc = FALSE) {
	$params = array('subject' => $subject,
									'cc' => $cc,
									);
	$params['message']['value'] = ($tokens) ? token_replace($message, $tokens) : $message;
	$params['message']['format'] = ($format) ? $format : filter_default_format();
	$params['subject'] = ($tokens) ? token_replace($subject, $tokens) : $subject;
	$sender = ($sender) ? $sender : variable_get('site_mail', '');
	if(variable_get('s4_mail_debug', FALSE)) {
		$count = drupal_static(__FUNCTION__);
		if($count < 3) {
			drupal_set_message(t('<p>Mail would have been sent to %to subject %subject</p><p>%body</p>', array('%to' => $to, '%subject' => $params['subject'], '%body' => $params['message']['value'])));
			if(function_exists('dpm')) {
				dpm($params);
			}
		}
		$count++;
		return;
	}
	drupal_mail('s4_mail', 'normal', $to, language_default(), $params, $sender);
}

function s4_mail_send_subscriptions($flag, $entity_type, $entity_id, $subject, $message, $format = FALSE, $tokens = FALSE, $sender = FALSE) {
	$uids = flag_get_entity_flags($entity_type, $entity_id, $flag);
	foreach($uids as $uid) {
		$user = user_load($uid->uid);
		s4_mail_send('subscription', $user->mail, $subject, $message, $format, $tokens, $sender);
	}
}

function s4_mail_mail($key, &$message, $params) {
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Transfer-Encoding'] = '8Bit';
  $message['subject'] = $params['subject'];
  $message['body'][] = check_markup($params['message']['value'], $params['message']['format']);
  if($params['cc']) {
    $message['headers']['Cc'] = implode(', ', $params['cc']);
  }
}

function s4_mail_block_info() {
	$blocks['s4_mail_subscribe'] = array('info' => t('S4 Subscription'));
	$blocks['s4_manage_subscriptions'] = array('info' => t('Manage site subscriptions'));
	return $blocks;
}

function s4_mail_block_view($delta) {
	switch($delta) {
		case 's4_mail_subscribe':
			$node = menu_get_object();
			$function = 's4_mail_block_'. $node->type;
			if(function_exists($function)) {
				return array('content' => $function($node));
			}
			break;
		case 's4_manage_subscriptions':
			return array('content' => s4_mail_block_manage_subscriptions());
	}
}

function s4_mail_block_course($node) {
	global $user;
	$flag = flag_get_flag('subscription_course_placements');
	$faculty = field_get_items('node', $node, 'field_course_faculty');
	if(!$flag->access($node->nid) || !$faculty || !count($faculty)) {
		return;
	}
	$is_faculty = FALSE;
	foreach($faculty as $instructor) {
		if($instructor['uid'] == $user->uid) {
			$is_faculty = TRUE;
			break;
		}
	}
	if(!$is_faculty) {
		return;
	}
	return $flag->theme($flag->is_flagged($node->nid) ? 'unflag' : 'flag', $node->nid, array('needs_wrapping_element' => TRUE));
}

function s4_mail_block_site($node) {
	global $user;
	$flag = flag_get_flag('subscription_site_placements');
	if(!$flag->access($node->nid)) {
		return;
	}
	return $flag->theme($flag->is_flagged($node->nid) ? 'unflag' : 'flag', $node->nid, array('needs_wrapping_element' => TRUE));
}

function s4_mail_block_manage_subscriptions() {
	$modal = '<a href="#manage-subscriptions" data-toggle="modal" class="btn">'. t('Manage subscriptions') .'</a> <div id="manage-subscriptions" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
    <h3 id="myModalLabel">'. t('Manage subscriptions') .'</h3>
  </div>
  '. drupal_render(drupal_get_form('s4_mail_block_manage_subscriptions_form')) .'

</div>';
	return $modal;
}

function s4_mail_block_manage_subscriptions_form() {
	$form = array();
	$form_flag = flag_get_flag('subscription_expired_forms');
	$site_flag = flag_get_flag('subscription_new_sites');

	$options = array();
	$default = array();
	$vocabulary = taxonomy_vocabulary_machine_name_load('site_restrictions');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach($terms as $term) {
  	$options[$term->tid] = $term->name;
  	$default_forms[$term->tid] = ($form_flag->is_flagged($term->tid)) ? $term->tid : 0;
  	$default_sites[$term->tid] = ($site_flag->is_flagged($term->tid)) ? $term->tid : 0;
  }

	$form['programs_forms'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Email me when a site form is about to expire in one the following programs.'),
		'#options' => $options,
		'#default_value' => $default_forms,
		'#prefix' => '<div class="modal-body">',
	);

	$form['programs_sites'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Email me when a new site is added to one of the following programs.'),
		'#options' => $options,
		'#default_value' => $default_sites,
		'#suffix' => '</div>'
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#prefix' => '<div class="modal-footer">',
		'#suffix' => '</div>'
	);
	return $form;
}

function s4_mail_block_manage_subscriptions_form_submit($form, $form_state) {
	$flag = flag_get_flag('subscription_expired_forms');
	foreach($form_state['values']['programs_forms'] as $id => $enabled) {
		$action = ($enabled) ? 'flag' : 'unflag';
		$flag->flag($action, $id);
	}
	$flag = flag_get_flag('subscription_new_sites');
	foreach($form_state['values']['programs_sites'] as $id => $enabled) {
		$action = ($enabled) ? 'flag' : 'unflag';
		$flag->flag($action, $id);
	}
	drupal_set_message(t('Your subscription has been updated.'), 'success');
}
